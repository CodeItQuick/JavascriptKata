{"files":{"src/folder_1/12_kata.ts":{"language":"typescript","mutants":[{"id":"43","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":31},"start":{"column":31,"line":29}}},{"id":"49","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":48},"start":{"column":31,"line":46}}},{"id":"61","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":26,"line":66},"start":{"column":16,"line":66}}},{"id":"31","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["19","20","21"],"location":{"end":{"column":6,"line":13},"start":{"column":31,"line":9}}},{"id":"30","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["19","20","21"],"location":{"end":{"column":29,"line":8},"start":{"column":27,"line":8}}},{"id":"33","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["19","20","21"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"32","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":3,"killedBy":["21"],"coveredBy":["19","20","21"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"35","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["19"],"coveredBy":["19"],"location":{"end":{"column":6,"line":17},"start":{"column":22,"line":15}}},{"id":"34","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["19","20"],"location":{"end":{"column":10,"line":12},"start":{"column":45,"line":10}}},{"id":"36","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["19"],"coveredBy":["19"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"37","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["19"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"38","mutatorName":"EqualityOperator","replacement":"this.hitpoints >= 0","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["19"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"40","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["19","20"],"location":{"end":{"column":6,"line":21},"start":{"column":28,"line":19}}},{"id":"39","mutatorName":"EqualityOperator","replacement":"this.hitpoints <= 0","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["19"],"coveredBy":["19"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"41","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["19"],"coveredBy":["19","20"],"location":{"end":{"column":6,"line":25},"start":{"column":32,"line":23}}},{"id":"42","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["19"],"coveredBy":["19","20"],"location":{"end":{"column":33,"line":24},"start":{"column":9,"line":24}}},{"id":"44","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["19"],"coveredBy":["19"],"location":{"end":{"column":6,"line":35},"start":{"column":22,"line":33}}},{"id":"46","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["19"],"coveredBy":["19"],"location":{"end":{"column":6,"line":39},"start":{"column":30,"line":37}}},{"id":"45","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected false to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["19"],"coveredBy":["19"],"location":{"end":{"column":20,"line":34},"start":{"column":16,"line":34}}},{"id":"47","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["19"],"location":{"end":{"column":6,"line":42},"start":{"column":32,"line":40}}},{"id":"50","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["20"],"coveredBy":["20"],"location":{"end":{"column":6,"line":52},"start":{"column":22,"line":50}}},{"id":"48","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["19"],"location":{"end":{"column":33,"line":41},"start":{"column":9,"line":41}}},{"id":"51","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected false to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["20"],"coveredBy":["20"],"location":{"end":{"column":20,"line":51},"start":{"column":16,"line":51}}},{"id":"52","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["20"],"location":{"end":{"column":6,"line":56},"start":{"column":29,"line":54}}},{"id":"53","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["20"],"location":{"end":{"column":6,"line":60},"start":{"column":32,"line":58}}},{"id":"54","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["20"],"location":{"end":{"column":33,"line":59},"start":{"column":9,"line":59}}},{"id":"55","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["21"],"coveredBy":["21"],"location":{"end":{"column":6,"line":67},"start":{"column":27,"line":62}}},{"id":"56","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["21"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"57","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["21"],"coveredBy":["21"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"58","mutatorName":"EqualityOperator","replacement":"this.hitpoints !== 2","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["21"],"coveredBy":["21"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"59","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["21"],"coveredBy":["21"],"location":{"end":{"column":10,"line":65},"start":{"column":35,"line":63}}},{"id":"60","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected '' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["21"],"coveredBy":["21"],"location":{"end":{"column":26,"line":64},"start":{"column":20,"line":64}}}],"source":"ï»¿interface IUnit {\r\n    attack(unit: IUnit): void;\r\n    alive(): boolean;\r\n    hurt(damage: number): void;\r\n}\r\nexport class Zergling implements IUnit {\r\n    hitpoints = 1;\r\n    closeUnits: IUnit[] = [];\r\n    attack(unit: IUnit): void {\r\n        if (this.closeUnits.includes(unit)) {\r\n            unit.hurt(1);\r\n        }\r\n    }\r\n\r\n    alive(): boolean {\r\n        return this.hitpoints > 0;\r\n    }\r\n\r\n    run(unit: IUnit): void {\r\n        this.closeUnits.push(unit);\r\n    }\r\n\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n}\r\nexport class Marine implements IUnit {\r\n    hitpoints = 2;\r\n    attack(unit: IUnit): void {\r\n        this.shoot(unit);\r\n    }\r\n\r\n    alive(): boolean {\r\n        return true;\r\n    }\r\n\r\n    shoot(unit: IUnit): void {\r\n        unit.hurt(1);\r\n    }\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n}\r\nexport class Zealot implements IUnit {\r\n    hitpoints = 2;\r\n    attack(unit: IUnit): void {\r\n        this.claw(unit);\r\n    }\r\n\r\n    alive(): boolean {\r\n        return true;\r\n    }\r\n\r\n    claw(unit: IUnit): void {\r\n        unit.hurt(2);\r\n    }\r\n\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n\r\n    hitpointBar(): string {\r\n        if (this.hitpoints === 2) {\r\n            return \"full\";\r\n        }\r\n        return \"not full\";\r\n    }\r\n}"},"src/folder_1/15_kata.ts":{"language":"typescript","mutants":[{"id":"105","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":31},"start":{"column":31,"line":29}}},{"id":"111","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":48},"start":{"column":31,"line":46}}},{"id":"123","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":26,"line":66},"start":{"column":16,"line":66}}},{"id":"92","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["37","38","39"],"location":{"end":{"column":29,"line":8},"start":{"column":27,"line":8}}},{"id":"93","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["37","38","39"],"location":{"end":{"column":6,"line":13},"start":{"column":31,"line":9}}},{"id":"94","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":3,"killedBy":["39"],"coveredBy":["37","38","39"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"95","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["37","38","39"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"97","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["37"],"coveredBy":["37"],"location":{"end":{"column":6,"line":17},"start":{"column":22,"line":15}}},{"id":"96","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["37","38"],"location":{"end":{"column":10,"line":12},"start":{"column":45,"line":10}}},{"id":"98","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["37"],"coveredBy":["37"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"99","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["37"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"100","mutatorName":"EqualityOperator","replacement":"this.hitpoints >= 0","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["37"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"101","mutatorName":"EqualityOperator","replacement":"this.hitpoints <= 0","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["37"],"coveredBy":["37"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"102","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["37","38"],"location":{"end":{"column":6,"line":21},"start":{"column":28,"line":19}}},{"id":"103","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["37"],"coveredBy":["37","38"],"location":{"end":{"column":6,"line":25},"start":{"column":32,"line":23}}},{"id":"106","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["37"],"coveredBy":["37"],"location":{"end":{"column":6,"line":35},"start":{"column":22,"line":33}}},{"id":"104","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["37"],"coveredBy":["37","38"],"location":{"end":{"column":33,"line":24},"start":{"column":9,"line":24}}},{"id":"107","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected false to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["37"],"coveredBy":["37"],"location":{"end":{"column":20,"line":34},"start":{"column":16,"line":34}}},{"id":"108","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["37"],"coveredBy":["37"],"location":{"end":{"column":6,"line":39},"start":{"column":30,"line":37}}},{"id":"109","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["37"],"location":{"end":{"column":6,"line":42},"start":{"column":32,"line":40}}},{"id":"110","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["37"],"location":{"end":{"column":33,"line":41},"start":{"column":9,"line":41}}},{"id":"112","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["38"],"coveredBy":["38"],"location":{"end":{"column":6,"line":52},"start":{"column":22,"line":50}}},{"id":"113","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected false to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["38"],"coveredBy":["38"],"location":{"end":{"column":20,"line":51},"start":{"column":16,"line":51}}},{"id":"114","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["38"],"location":{"end":{"column":6,"line":56},"start":{"column":29,"line":54}}},{"id":"115","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["38"],"location":{"end":{"column":6,"line":60},"start":{"column":32,"line":58}}},{"id":"116","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["38"],"location":{"end":{"column":33,"line":59},"start":{"column":9,"line":59}}},{"id":"117","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["39"],"coveredBy":["39"],"location":{"end":{"column":6,"line":67},"start":{"column":27,"line":62}}},{"id":"118","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["39"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"119","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["39"],"coveredBy":["39"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"120","mutatorName":"EqualityOperator","replacement":"this.hitpoints !== 2","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["39"],"coveredBy":["39"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"121","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["39"],"coveredBy":["39"],"location":{"end":{"column":10,"line":65},"start":{"column":35,"line":63}}},{"id":"122","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected '' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["39"],"coveredBy":["39"],"location":{"end":{"column":26,"line":64},"start":{"column":20,"line":64}}}],"source":"ï»¿interface IUnit {\r\n    attack(unit: IUnit): void;\r\n    alive(): boolean;\r\n    hurt(damage: number): void;\r\n}\r\nexport class Zergling implements IUnit {\r\n    hitpoints = 1;\r\n    closeUnits: IUnit[] = [];\r\n    attack(unit: IUnit): void {\r\n        if (this.closeUnits.includes(unit)) {\r\n            unit.hurt(1);\r\n        }\r\n    }\r\n\r\n    alive(): boolean {\r\n        return this.hitpoints > 0;\r\n    }\r\n\r\n    run(unit: IUnit): void {\r\n        this.closeUnits.push(unit);\r\n    }\r\n\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n}\r\nexport class Marine implements IUnit {\r\n    hitpoints = 2;\r\n    attack(unit: IUnit): void {\r\n        this.shoot(unit);\r\n    }\r\n\r\n    alive(): boolean {\r\n        return true;\r\n    }\r\n\r\n    shoot(unit: IUnit): void {\r\n        unit.hurt(1);\r\n    }\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n}\r\nexport class Zealot implements IUnit {\r\n    hitpoints = 2;\r\n    attack(unit: IUnit): void {\r\n        this.claw(unit);\r\n    }\r\n\r\n    alive(): boolean {\r\n        return true;\r\n    }\r\n\r\n    claw(unit: IUnit): void {\r\n        unit.hurt(2);\r\n    }\r\n\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n\r\n    hitpointBar(): string {\r\n        if (this.hitpoints === 2) {\r\n            return \"full\";\r\n        }\r\n        return \"not full\";\r\n    }\r\n}"},"src/folder_1/18_kata.ts":{"language":"typescript","mutants":[{"id":"167","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":31},"start":{"column":31,"line":29}}},{"id":"173","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":48},"start":{"column":31,"line":46}}},{"id":"185","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":26,"line":66},"start":{"column":16,"line":66}}},{"id":"154","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["55","56","57"],"location":{"end":{"column":29,"line":8},"start":{"column":27,"line":8}}},{"id":"155","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["55","56","57"],"location":{"end":{"column":6,"line":13},"start":{"column":31,"line":9}}},{"id":"156","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":3,"killedBy":["57"],"coveredBy":["55","56","57"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"157","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["55","56","57"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"158","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["55","56"],"location":{"end":{"column":10,"line":12},"start":{"column":45,"line":10}}},{"id":"159","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["55"],"coveredBy":["55"],"location":{"end":{"column":6,"line":17},"start":{"column":22,"line":15}}},{"id":"160","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["55"],"coveredBy":["55"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"162","mutatorName":"EqualityOperator","replacement":"this.hitpoints >= 0","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["55"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"161","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["55"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"163","mutatorName":"EqualityOperator","replacement":"this.hitpoints <= 0","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["55"],"coveredBy":["55"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"164","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["55","56"],"location":{"end":{"column":6,"line":21},"start":{"column":28,"line":19}}},{"id":"165","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["55"],"coveredBy":["55","56"],"location":{"end":{"column":6,"line":25},"start":{"column":32,"line":23}}},{"id":"166","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["55"],"coveredBy":["55","56"],"location":{"end":{"column":33,"line":24},"start":{"column":9,"line":24}}},{"id":"168","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["55"],"coveredBy":["55"],"location":{"end":{"column":6,"line":35},"start":{"column":22,"line":33}}},{"id":"169","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected false to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["55"],"coveredBy":["55"],"location":{"end":{"column":20,"line":34},"start":{"column":16,"line":34}}},{"id":"170","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["55"],"coveredBy":["55"],"location":{"end":{"column":6,"line":39},"start":{"column":30,"line":37}}},{"id":"171","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["55"],"location":{"end":{"column":6,"line":42},"start":{"column":32,"line":40}}},{"id":"172","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["55"],"location":{"end":{"column":33,"line":41},"start":{"column":9,"line":41}}},{"id":"174","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["56"],"coveredBy":["56"],"location":{"end":{"column":6,"line":52},"start":{"column":22,"line":50}}},{"id":"175","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected false to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["56"],"coveredBy":["56"],"location":{"end":{"column":20,"line":51},"start":{"column":16,"line":51}}},{"id":"176","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["56"],"location":{"end":{"column":6,"line":56},"start":{"column":29,"line":54}}},{"id":"177","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["56"],"location":{"end":{"column":6,"line":60},"start":{"column":32,"line":58}}},{"id":"178","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["56"],"location":{"end":{"column":33,"line":59},"start":{"column":9,"line":59}}},{"id":"180","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["57"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"179","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["57"],"coveredBy":["57"],"location":{"end":{"column":6,"line":67},"start":{"column":27,"line":62}}},{"id":"181","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["57"],"coveredBy":["57"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"182","mutatorName":"EqualityOperator","replacement":"this.hitpoints !== 2","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["57"],"coveredBy":["57"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"183","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["57"],"coveredBy":["57"],"location":{"end":{"column":10,"line":65},"start":{"column":35,"line":63}}},{"id":"184","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected '' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["57"],"coveredBy":["57"],"location":{"end":{"column":26,"line":64},"start":{"column":20,"line":64}}}],"source":"ï»¿interface IUnit {\r\n    attack(unit: IUnit): void;\r\n    alive(): boolean;\r\n    hurt(damage: number): void;\r\n}\r\nexport class Zergling implements IUnit {\r\n    hitpoints = 1;\r\n    closeUnits: IUnit[] = [];\r\n    attack(unit: IUnit): void {\r\n        if (this.closeUnits.includes(unit)) {\r\n            unit.hurt(1);\r\n        }\r\n    }\r\n\r\n    alive(): boolean {\r\n        return this.hitpoints > 0;\r\n    }\r\n\r\n    run(unit: IUnit): void {\r\n        this.closeUnits.push(unit);\r\n    }\r\n\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n}\r\nexport class Marine implements IUnit {\r\n    hitpoints = 2;\r\n    attack(unit: IUnit): void {\r\n        this.shoot(unit);\r\n    }\r\n\r\n    alive(): boolean {\r\n        return true;\r\n    }\r\n\r\n    shoot(unit: IUnit): void {\r\n        unit.hurt(1);\r\n    }\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n}\r\nexport class Zealot implements IUnit {\r\n    hitpoints = 2;\r\n    attack(unit: IUnit): void {\r\n        this.claw(unit);\r\n    }\r\n\r\n    alive(): boolean {\r\n        return true;\r\n    }\r\n\r\n    claw(unit: IUnit): void {\r\n        unit.hurt(2);\r\n    }\r\n\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n\r\n    hitpointBar(): string {\r\n        if (this.hitpoints === 2) {\r\n            return \"full\";\r\n        }\r\n        return \"not full\";\r\n    }\r\n}"},"src/folder_1/3_kata.ts":{"language":"typescript","mutants":[{"id":"229","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":31},"start":{"column":31,"line":29}}},{"id":"235","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":48},"start":{"column":31,"line":46}}},{"id":"247","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":26,"line":66},"start":{"column":16,"line":66}}},{"id":"217","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["69","70","71"],"location":{"end":{"column":6,"line":13},"start":{"column":31,"line":9}}},{"id":"216","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["69","70","71"],"location":{"end":{"column":29,"line":8},"start":{"column":27,"line":8}}},{"id":"218","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":3,"killedBy":["71"],"coveredBy":["69","70","71"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"219","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["69","70","71"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"220","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["69","70"],"location":{"end":{"column":10,"line":12},"start":{"column":45,"line":10}}},{"id":"221","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["69"],"coveredBy":["69"],"location":{"end":{"column":6,"line":17},"start":{"column":22,"line":15}}},{"id":"222","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["69"],"coveredBy":["69"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"223","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["69"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"224","mutatorName":"EqualityOperator","replacement":"this.hitpoints >= 0","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["69"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"225","mutatorName":"EqualityOperator","replacement":"this.hitpoints <= 0","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["69"],"coveredBy":["69"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"226","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["69","70"],"location":{"end":{"column":6,"line":21},"start":{"column":28,"line":19}}},{"id":"227","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["69"],"coveredBy":["69","70"],"location":{"end":{"column":6,"line":25},"start":{"column":32,"line":23}}},{"id":"228","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["69"],"coveredBy":["69","70"],"location":{"end":{"column":33,"line":24},"start":{"column":9,"line":24}}},{"id":"230","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["69"],"coveredBy":["69"],"location":{"end":{"column":6,"line":35},"start":{"column":22,"line":33}}},{"id":"231","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected false to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["69"],"coveredBy":["69"],"location":{"end":{"column":20,"line":34},"start":{"column":16,"line":34}}},{"id":"232","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["69"],"coveredBy":["69"],"location":{"end":{"column":6,"line":39},"start":{"column":30,"line":37}}},{"id":"233","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["69"],"location":{"end":{"column":6,"line":42},"start":{"column":32,"line":40}}},{"id":"234","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["69"],"location":{"end":{"column":33,"line":41},"start":{"column":9,"line":41}}},{"id":"236","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["70"],"coveredBy":["70"],"location":{"end":{"column":6,"line":52},"start":{"column":22,"line":50}}},{"id":"237","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected false to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["70"],"coveredBy":["70"],"location":{"end":{"column":20,"line":51},"start":{"column":16,"line":51}}},{"id":"238","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["70"],"location":{"end":{"column":6,"line":56},"start":{"column":29,"line":54}}},{"id":"239","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["70"],"location":{"end":{"column":6,"line":60},"start":{"column":32,"line":58}}},{"id":"240","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["70"],"location":{"end":{"column":33,"line":59},"start":{"column":9,"line":59}}},{"id":"241","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["71"],"coveredBy":["71"],"location":{"end":{"column":6,"line":67},"start":{"column":27,"line":62}}},{"id":"242","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["71"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"244","mutatorName":"EqualityOperator","replacement":"this.hitpoints !== 2","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["71"],"coveredBy":["71"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"243","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["71"],"coveredBy":["71"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"245","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["71"],"coveredBy":["71"],"location":{"end":{"column":10,"line":65},"start":{"column":35,"line":63}}},{"id":"246","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected '' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["71"],"coveredBy":["71"],"location":{"end":{"column":26,"line":64},"start":{"column":20,"line":64}}}],"source":"ï»¿interface IUnit {\r\n    attack(unit: IUnit): void;\r\n    alive(): boolean;\r\n    hurt(damage: number): void;\r\n}\r\nexport class Zergling implements IUnit {\r\n    hitpoints = 1;\r\n    closeUnits: IUnit[] = [];\r\n    attack(unit: IUnit): void {\r\n        if (this.closeUnits.includes(unit)) {\r\n            unit.hurt(1);\r\n        }\r\n    }\r\n\r\n    alive(): boolean {\r\n        return this.hitpoints > 0;\r\n    }\r\n\r\n    run(unit: IUnit): void {\r\n        this.closeUnits.push(unit);\r\n    }\r\n\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n}\r\nexport class Marine implements IUnit {\r\n    hitpoints = 2;\r\n    attack(unit: IUnit): void {\r\n        this.shoot(unit);\r\n    }\r\n\r\n    alive(): boolean {\r\n        return true;\r\n    }\r\n\r\n    shoot(unit: IUnit): void {\r\n        unit.hurt(1);\r\n    }\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n}\r\nexport class Zealot implements IUnit {\r\n    hitpoints = 2;\r\n    attack(unit: IUnit): void {\r\n        this.claw(unit);\r\n    }\r\n\r\n    alive(): boolean {\r\n        return true;\r\n    }\r\n\r\n    claw(unit: IUnit): void {\r\n        unit.hurt(2);\r\n    }\r\n\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n\r\n    hitpointBar(): string {\r\n        if (this.hitpoints === 2) {\r\n            return \"full\";\r\n        }\r\n        return \"not full\";\r\n    }\r\n}"},"src/folder_1/6_kata.ts":{"language":"typescript","mutants":[{"id":"291","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":31},"start":{"column":31,"line":29}}},{"id":"297","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":48},"start":{"column":31,"line":46}}},{"id":"309","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":26,"line":66},"start":{"column":16,"line":66}}},{"id":"278","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["87","88","89"],"location":{"end":{"column":29,"line":8},"start":{"column":27,"line":8}}},{"id":"279","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["87","88","89"],"location":{"end":{"column":6,"line":13},"start":{"column":31,"line":9}}},{"id":"280","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":3,"killedBy":["89"],"coveredBy":["87","88","89"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"281","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["87","88","89"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"282","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["87","88"],"location":{"end":{"column":10,"line":12},"start":{"column":45,"line":10}}},{"id":"283","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["87"],"coveredBy":["87"],"location":{"end":{"column":6,"line":17},"start":{"column":22,"line":15}}},{"id":"284","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["87"],"coveredBy":["87"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"285","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["87"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"286","mutatorName":"EqualityOperator","replacement":"this.hitpoints >= 0","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["87"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"288","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["87","88"],"location":{"end":{"column":6,"line":21},"start":{"column":28,"line":19}}},{"id":"287","mutatorName":"EqualityOperator","replacement":"this.hitpoints <= 0","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["87"],"coveredBy":["87"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"289","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["87"],"coveredBy":["87","88"],"location":{"end":{"column":6,"line":25},"start":{"column":32,"line":23}}},{"id":"290","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["87"],"coveredBy":["87","88"],"location":{"end":{"column":33,"line":24},"start":{"column":9,"line":24}}},{"id":"292","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["87"],"coveredBy":["87"],"location":{"end":{"column":6,"line":35},"start":{"column":22,"line":33}}},{"id":"293","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected false to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["87"],"coveredBy":["87"],"location":{"end":{"column":20,"line":34},"start":{"column":16,"line":34}}},{"id":"294","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["87"],"coveredBy":["87"],"location":{"end":{"column":6,"line":39},"start":{"column":30,"line":37}}},{"id":"295","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["87"],"location":{"end":{"column":6,"line":42},"start":{"column":32,"line":40}}},{"id":"296","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["87"],"location":{"end":{"column":33,"line":41},"start":{"column":9,"line":41}}},{"id":"298","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["88"],"coveredBy":["88"],"location":{"end":{"column":6,"line":52},"start":{"column":22,"line":50}}},{"id":"299","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected false to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["88"],"coveredBy":["88"],"location":{"end":{"column":20,"line":51},"start":{"column":16,"line":51}}},{"id":"300","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["88"],"location":{"end":{"column":6,"line":56},"start":{"column":29,"line":54}}},{"id":"302","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["88"],"location":{"end":{"column":33,"line":59},"start":{"column":9,"line":59}}},{"id":"301","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["88"],"location":{"end":{"column":6,"line":60},"start":{"column":32,"line":58}}},{"id":"303","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["89"],"coveredBy":["89"],"location":{"end":{"column":6,"line":67},"start":{"column":27,"line":62}}},{"id":"304","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["89"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"305","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["89"],"coveredBy":["89"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"306","mutatorName":"EqualityOperator","replacement":"this.hitpoints !== 2","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["89"],"coveredBy":["89"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"307","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["89"],"coveredBy":["89"],"location":{"end":{"column":10,"line":65},"start":{"column":35,"line":63}}},{"id":"308","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected '' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["89"],"coveredBy":["89"],"location":{"end":{"column":26,"line":64},"start":{"column":20,"line":64}}}],"source":"ï»¿interface IUnit {\r\n    attack(unit: IUnit): void;\r\n    alive(): boolean;\r\n    hurt(damage: number): void;\r\n}\r\nexport class Zergling implements IUnit {\r\n    hitpoints = 1;\r\n    closeUnits: IUnit[] = [];\r\n    attack(unit: IUnit): void {\r\n        if (this.closeUnits.includes(unit)) {\r\n            unit.hurt(1);\r\n        }\r\n    }\r\n\r\n    alive(): boolean {\r\n        return this.hitpoints > 0;\r\n    }\r\n\r\n    run(unit: IUnit): void {\r\n        this.closeUnits.push(unit);\r\n    }\r\n\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n}\r\nexport class Marine implements IUnit {\r\n    hitpoints = 2;\r\n    attack(unit: IUnit): void {\r\n        this.shoot(unit);\r\n    }\r\n\r\n    alive(): boolean {\r\n        return true;\r\n    }\r\n\r\n    shoot(unit: IUnit): void {\r\n        unit.hurt(1);\r\n    }\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n}\r\nexport class Zealot implements IUnit {\r\n    hitpoints = 2;\r\n    attack(unit: IUnit): void {\r\n        this.claw(unit);\r\n    }\r\n\r\n    alive(): boolean {\r\n        return true;\r\n    }\r\n\r\n    claw(unit: IUnit): void {\r\n        unit.hurt(2);\r\n    }\r\n\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n\r\n    hitpointBar(): string {\r\n        if (this.hitpoints === 2) {\r\n            return \"full\";\r\n        }\r\n        return \"not full\";\r\n    }\r\n}"},"src/folder_1/9_kata.ts":{"language":"typescript","mutants":[{"id":"353","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":31},"start":{"column":31,"line":29}}},{"id":"359","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":48},"start":{"column":31,"line":46}}},{"id":"371","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":26,"line":66},"start":{"column":16,"line":66}}},{"id":"340","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["105","106","107"],"location":{"end":{"column":29,"line":8},"start":{"column":27,"line":8}}},{"id":"342","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":3,"killedBy":["107"],"coveredBy":["105","106","107"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"341","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["105","106","107"],"location":{"end":{"column":6,"line":13},"start":{"column":31,"line":9}}},{"id":"343","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["105","106","107"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"344","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["105","106"],"location":{"end":{"column":10,"line":12},"start":{"column":45,"line":10}}},{"id":"345","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["105"],"coveredBy":["105"],"location":{"end":{"column":6,"line":17},"start":{"column":22,"line":15}}},{"id":"346","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["105"],"coveredBy":["105"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"347","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["105"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"348","mutatorName":"EqualityOperator","replacement":"this.hitpoints >= 0","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["105"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"349","mutatorName":"EqualityOperator","replacement":"this.hitpoints <= 0","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["105"],"coveredBy":["105"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"350","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["105","106"],"location":{"end":{"column":6,"line":21},"start":{"column":28,"line":19}}},{"id":"351","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["105"],"coveredBy":["105","106"],"location":{"end":{"column":6,"line":25},"start":{"column":32,"line":23}}},{"id":"352","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["105"],"coveredBy":["105","106"],"location":{"end":{"column":33,"line":24},"start":{"column":9,"line":24}}},{"id":"354","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["105"],"coveredBy":["105"],"location":{"end":{"column":6,"line":35},"start":{"column":22,"line":33}}},{"id":"355","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected false to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["105"],"coveredBy":["105"],"location":{"end":{"column":20,"line":34},"start":{"column":16,"line":34}}},{"id":"356","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["105"],"coveredBy":["105"],"location":{"end":{"column":6,"line":39},"start":{"column":30,"line":37}}},{"id":"358","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["105"],"location":{"end":{"column":33,"line":41},"start":{"column":9,"line":41}}},{"id":"357","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["105"],"location":{"end":{"column":6,"line":42},"start":{"column":32,"line":40}}},{"id":"361","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected false to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["106"],"coveredBy":["106"],"location":{"end":{"column":20,"line":51},"start":{"column":16,"line":51}}},{"id":"360","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["106"],"coveredBy":["106"],"location":{"end":{"column":6,"line":52},"start":{"column":22,"line":50}}},{"id":"362","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["106"],"location":{"end":{"column":6,"line":56},"start":{"column":29,"line":54}}},{"id":"363","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["106"],"location":{"end":{"column":6,"line":60},"start":{"column":32,"line":58}}},{"id":"364","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["106"],"location":{"end":{"column":33,"line":59},"start":{"column":9,"line":59}}},{"id":"365","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["107"],"coveredBy":["107"],"location":{"end":{"column":6,"line":67},"start":{"column":27,"line":62}}},{"id":"366","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["107"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"367","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["107"],"coveredBy":["107"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"369","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["107"],"coveredBy":["107"],"location":{"end":{"column":10,"line":65},"start":{"column":35,"line":63}}},{"id":"368","mutatorName":"EqualityOperator","replacement":"this.hitpoints !== 2","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["107"],"coveredBy":["107"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"370","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected '' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["107"],"coveredBy":["107"],"location":{"end":{"column":26,"line":64},"start":{"column":20,"line":64}}}],"source":"ï»¿interface IUnit {\r\n    attack(unit: IUnit): void;\r\n    alive(): boolean;\r\n    hurt(damage: number): void;\r\n}\r\nexport class Zergling implements IUnit {\r\n    hitpoints = 1;\r\n    closeUnits: IUnit[] = [];\r\n    attack(unit: IUnit): void {\r\n        if (this.closeUnits.includes(unit)) {\r\n            unit.hurt(1);\r\n        }\r\n    }\r\n\r\n    alive(): boolean {\r\n        return this.hitpoints > 0;\r\n    }\r\n\r\n    run(unit: IUnit): void {\r\n        this.closeUnits.push(unit);\r\n    }\r\n\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n}\r\nexport class Marine implements IUnit {\r\n    hitpoints = 2;\r\n    attack(unit: IUnit): void {\r\n        this.shoot(unit);\r\n    }\r\n\r\n    alive(): boolean {\r\n        return true;\r\n    }\r\n\r\n    shoot(unit: IUnit): void {\r\n        unit.hurt(1);\r\n    }\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n}\r\nexport class Zealot implements IUnit {\r\n    hitpoints = 2;\r\n    attack(unit: IUnit): void {\r\n        this.claw(unit);\r\n    }\r\n\r\n    alive(): boolean {\r\n        return true;\r\n    }\r\n\r\n    claw(unit: IUnit): void {\r\n        unit.hurt(2);\r\n    }\r\n\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n\r\n    hitpointBar(): string {\r\n        if (this.hitpoints === 2) {\r\n            return \"full\";\r\n        }\r\n        return \"not full\";\r\n    }\r\n}"},"src/folder_1/10_kata.ts":{"language":"typescript","mutants":[{"id":"1","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"' World' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["4"],"coveredBy":["4","5","6","7"],"location":{"end":{"column":18,"line":2},"start":{"column":11,"line":2}}},{"id":"2","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"'Hello ' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["4"],"coveredBy":["4","6","7"],"location":{"end":{"column":18,"line":3},"start":{"column":11,"line":3}}},{"id":"3","mutatorName":"BlockStatement","replacement":"{}","statusReason":"undefined == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["4"],"coveredBy":["4"],"location":{"end":{"column":2,"line":8},"start":{"column":38,"line":6}}},{"id":"4","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"'HelloWorld' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["4"],"coveredBy":["4"],"location":{"end":{"column":54,"line":7},"start":{"column":51,"line":7}}},{"id":"0","mutatorName":"BlockStatement","replacement":"{}","statusReason":"'' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["4"],"coveredBy":["4","5","6","7"],"location":{"end":{"column":2,"line":4},"start":{"column":40,"line":1}}}],"source":"export function* helloWorldGenerator() {\n    yield 'Hello';\n    yield 'World';\n}\n\nexport default function HelloWorld() {\n    return Array.from(helloWorldGenerator()).join(' ');\n}\n"},"src/folder_1/11_kata.ts":{"language":"typescript","mutants":[{"id":"5","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["8"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"6","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"7","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"8","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"9","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"10","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["18"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"11","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["17"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"12","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["16"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"13","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["15"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"14","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"15","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"16","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"17","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"18","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"19","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"20","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"21","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["14"],"coveredBy":["14","15","16","17","18"],"location":{"end":{"column":10,"line":16},"start":{"column":34,"line":13}}},{"id":"22","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 - discount)","statusReason":"expected 1113.4020618556704 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["14"],"coveredBy":["14","15","16","17","18"],"location":{"end":{"column":51,"line":14},"start":{"column":25,"line":14}}},{"id":"23","mutatorName":"ArithmeticOperator","replacement":"1 + discount","statusReason":"expected 1112.4 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["14"],"coveredBy":["14","15","16","17","18"],"location":{"end":{"column":50,"line":14},"start":{"column":38,"line":14}}},{"id":"24","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected 4976.1 to equal 5130","status":"Killed","static":false,"testsCompleted":2,"killedBy":["15"],"coveredBy":["14","15","16","17","18"],"location":{"end":{"column":24,"line":15},"start":{"column":20,"line":15}}},{"id":"26","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["8"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"27","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"28","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"25","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"29","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}],"source":"ï»¿\r\n\r\nexport const input = (commands) => {\r\n    let totalCost = +commands[0] * +commands[1];\r\n    const volumeDiscount = [\r\n        { volume: 50000, discount: 0.15 },\r\n        { volume: 10000, discount: 0.10 },\r\n        { volume: 7000, discount: 0.07 },\r\n        { volume: 5000, discount: 0.05 },\r\n        { volume: 1000, discount: 0.03 },\r\n    ]\r\n    volumeDiscount.some(({volume, discount}, idx) => {\r\n        if (totalCost >= volume) {\r\n            totalCost = totalCost * (1 - discount)\r\n            return true;\r\n        }\r\n        return false;\r\n    })\r\n    const stateTaxes = {\r\n        UT: 6.85,\r\n        NV: 8.00,\r\n        TX: 6.25,\r\n        AL: 4.00,\r\n        CA: 8.25,\r\n    }\r\n    return totalCost * (1 + stateTaxes[commands[2]] / 100);\r\n}"},"src/folder_1/13_kata.ts":{"language":"typescript","mutants":[{"id":"62","mutatorName":"BlockStatement","replacement":"{}","statusReason":"'' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["22"],"coveredBy":["22","23","24","25"],"location":{"end":{"column":2,"line":4},"start":{"column":40,"line":1}}},{"id":"63","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"' World' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["22"],"coveredBy":["22","23","24","25"],"location":{"end":{"column":18,"line":2},"start":{"column":11,"line":2}}},{"id":"64","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"'Hello ' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["22"],"coveredBy":["22","24","25"],"location":{"end":{"column":18,"line":3},"start":{"column":11,"line":3}}},{"id":"65","mutatorName":"BlockStatement","replacement":"{}","statusReason":"undefined == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["22"],"coveredBy":["22"],"location":{"end":{"column":2,"line":8},"start":{"column":38,"line":6}}},{"id":"66","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"'HelloWorld' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["22"],"coveredBy":["22"],"location":{"end":{"column":54,"line":7},"start":{"column":51,"line":7}}}],"source":"export function* helloWorldGenerator() {\n    yield 'Hello';\n    yield 'World';\n}\n\nexport default function HelloWorld() {\n    return Array.from(helloWorldGenerator()).join(' ');\n}\n"},"src/folder_1/14_kata.ts":{"language":"typescript","mutants":[{"id":"68","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"67","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["26"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"69","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"70","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"71","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"72","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["36"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"73","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["35"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"74","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["34"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"75","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["33"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"76","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"77","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"78","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"80","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"81","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"79","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"82","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"83","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["32"],"coveredBy":["32","33","34","35","36"],"location":{"end":{"column":10,"line":16},"start":{"column":34,"line":13}}},{"id":"85","mutatorName":"ArithmeticOperator","replacement":"1 + discount","statusReason":"expected 1112.4 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["32"],"coveredBy":["32","33","34","35","36"],"location":{"end":{"column":50,"line":14},"start":{"column":38,"line":14}}},{"id":"84","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 - discount)","statusReason":"expected 1113.4020618556704 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["32"],"coveredBy":["32","33","34","35","36"],"location":{"end":{"column":51,"line":14},"start":{"column":25,"line":14}}},{"id":"86","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected 4976.1 to equal 5130","status":"Killed","static":false,"testsCompleted":2,"killedBy":["33"],"coveredBy":["32","33","34","35","36"],"location":{"end":{"column":24,"line":15},"start":{"column":20,"line":15}}},{"id":"88","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["26"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"87","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"89","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"90","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"91","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}],"source":"ï»¿\r\n\r\nexport const input = (commands) => {\r\n    let totalCost = +commands[0] * +commands[1];\r\n    const volumeDiscount = [\r\n        { volume: 50000, discount: 0.15 },\r\n        { volume: 10000, discount: 0.10 },\r\n        { volume: 7000, discount: 0.07 },\r\n        { volume: 5000, discount: 0.05 },\r\n        { volume: 1000, discount: 0.03 },\r\n    ]\r\n    volumeDiscount.some(({volume, discount}, idx) => {\r\n        if (totalCost >= volume) {\r\n            totalCost = totalCost * (1 - discount)\r\n            return true;\r\n        }\r\n        return false;\r\n    })\r\n    const stateTaxes = {\r\n        UT: 6.85,\r\n        NV: 8.00,\r\n        TX: 6.25,\r\n        AL: 4.00,\r\n        CA: 8.25,\r\n    }\r\n    return totalCost * (1 + stateTaxes[commands[2]] / 100);\r\n}"},"src/folder_1/16_kata.ts":{"language":"typescript","mutants":[{"id":"124","mutatorName":"BlockStatement","replacement":"{}","statusReason":"'' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["40"],"coveredBy":["40","41","42","43"],"location":{"end":{"column":2,"line":4},"start":{"column":40,"line":1}}},{"id":"125","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"' World' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["40"],"coveredBy":["40","41","42","43"],"location":{"end":{"column":18,"line":2},"start":{"column":11,"line":2}}},{"id":"126","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"'Hello ' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["40"],"coveredBy":["40","42","43"],"location":{"end":{"column":18,"line":3},"start":{"column":11,"line":3}}},{"id":"127","mutatorName":"BlockStatement","replacement":"{}","statusReason":"undefined == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["40"],"coveredBy":["40"],"location":{"end":{"column":2,"line":8},"start":{"column":38,"line":6}}},{"id":"128","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"'HelloWorld' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["40"],"coveredBy":["40"],"location":{"end":{"column":54,"line":7},"start":{"column":51,"line":7}}}],"source":"export function* helloWorldGenerator() {\n    yield 'Hello';\n    yield 'World';\n}\n\nexport default function HelloWorld() {\n    return Array.from(helloWorldGenerator()).join(' ');\n}\n"},"src/folder_1/17_kata.ts":{"language":"typescript","mutants":[{"id":"129","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["44"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"130","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"131","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"132","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"133","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"134","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["54"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"135","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["53"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"136","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["52"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"137","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["51"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"138","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"139","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"140","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"141","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"142","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"144","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"143","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"145","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["50"],"coveredBy":["50","51","52","53","54"],"location":{"end":{"column":10,"line":16},"start":{"column":34,"line":13}}},{"id":"146","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 - discount)","statusReason":"expected 1113.4020618556704 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["50"],"coveredBy":["50","51","52","53","54"],"location":{"end":{"column":51,"line":14},"start":{"column":25,"line":14}}},{"id":"147","mutatorName":"ArithmeticOperator","replacement":"1 + discount","statusReason":"expected 1112.4 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["50"],"coveredBy":["50","51","52","53","54"],"location":{"end":{"column":50,"line":14},"start":{"column":38,"line":14}}},{"id":"148","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected 4976.1 to equal 5130","status":"Killed","static":false,"testsCompleted":2,"killedBy":["51"],"coveredBy":["50","51","52","53","54"],"location":{"end":{"column":24,"line":15},"start":{"column":20,"line":15}}},{"id":"150","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["44"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"149","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"151","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"152","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"153","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}],"source":"ï»¿\r\n\r\nexport const input = (commands) => {\r\n    let totalCost = +commands[0] * +commands[1];\r\n    const volumeDiscount = [\r\n        { volume: 50000, discount: 0.15 },\r\n        { volume: 10000, discount: 0.10 },\r\n        { volume: 7000, discount: 0.07 },\r\n        { volume: 5000, discount: 0.05 },\r\n        { volume: 1000, discount: 0.03 },\r\n    ]\r\n    volumeDiscount.some(({volume, discount}, idx) => {\r\n        if (totalCost >= volume) {\r\n            totalCost = totalCost * (1 - discount)\r\n            return true;\r\n        }\r\n        return false;\r\n    })\r\n    const stateTaxes = {\r\n        UT: 6.85,\r\n        NV: 8.00,\r\n        TX: 6.25,\r\n        AL: 4.00,\r\n        CA: 8.25,\r\n    }\r\n    return totalCost * (1 + stateTaxes[commands[2]] / 100);\r\n}"},"src/folder_1/1_kata.ts":{"language":"typescript","mutants":[{"id":"187","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"' World' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0","1","2","3"],"location":{"end":{"column":18,"line":2},"start":{"column":11,"line":2}}},{"id":"186","mutatorName":"BlockStatement","replacement":"{}","statusReason":"'' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0","1","2","3"],"location":{"end":{"column":2,"line":4},"start":{"column":40,"line":1}}},{"id":"188","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"'Hello ' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0","2","3"],"location":{"end":{"column":18,"line":3},"start":{"column":11,"line":3}}},{"id":"189","mutatorName":"BlockStatement","replacement":"{}","statusReason":"undefined == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0"],"location":{"end":{"column":2,"line":8},"start":{"column":38,"line":6}}},{"id":"190","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"'HelloWorld' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0"],"location":{"end":{"column":54,"line":7},"start":{"column":51,"line":7}}}],"source":"export function* helloWorldGenerator() {\n    yield 'Hello';\n    yield 'World';\n}\n\nexport default function HelloWorld() {\n    return Array.from(helloWorldGenerator()).join(' ');\n}\n"},"src/folder_1/2_kata.ts":{"language":"typescript","mutants":[{"id":"191","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["58"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"192","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"193","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"194","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"195","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"196","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["68"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"197","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["67"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"198","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["66"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"199","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["65"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"200","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"202","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"201","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"203","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"204","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"205","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"206","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"207","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["64"],"coveredBy":["64","65","66","67","68"],"location":{"end":{"column":10,"line":16},"start":{"column":34,"line":13}}},{"id":"209","mutatorName":"ArithmeticOperator","replacement":"1 + discount","statusReason":"expected 1112.4 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["64"],"coveredBy":["64","65","66","67","68"],"location":{"end":{"column":50,"line":14},"start":{"column":38,"line":14}}},{"id":"208","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 - discount)","statusReason":"expected 1113.4020618556704 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["64"],"coveredBy":["64","65","66","67","68"],"location":{"end":{"column":51,"line":14},"start":{"column":25,"line":14}}},{"id":"210","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected 4976.1 to equal 5130","status":"Killed","static":false,"testsCompleted":2,"killedBy":["65"],"coveredBy":["64","65","66","67","68"],"location":{"end":{"column":24,"line":15},"start":{"column":20,"line":15}}},{"id":"212","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["58"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"211","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"213","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"214","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"215","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}],"source":"ï»¿\r\n\r\nexport const input = (commands) => {\r\n    let totalCost = +commands[0] * +commands[1];\r\n    const volumeDiscount = [\r\n        { volume: 50000, discount: 0.15 },\r\n        { volume: 10000, discount: 0.10 },\r\n        { volume: 7000, discount: 0.07 },\r\n        { volume: 5000, discount: 0.05 },\r\n        { volume: 1000, discount: 0.03 },\r\n    ]\r\n    volumeDiscount.some(({volume, discount}, idx) => {\r\n        if (totalCost >= volume) {\r\n            totalCost = totalCost * (1 - discount)\r\n            return true;\r\n        }\r\n        return false;\r\n    })\r\n    const stateTaxes = {\r\n        UT: 6.85,\r\n        NV: 8.00,\r\n        TX: 6.25,\r\n        AL: 4.00,\r\n        CA: 8.25,\r\n    }\r\n    return totalCost * (1 + stateTaxes[commands[2]] / 100);\r\n}"},"src/folder_1/4_kata.ts":{"language":"typescript","mutants":[{"id":"248","mutatorName":"BlockStatement","replacement":"{}","statusReason":"'' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["72"],"coveredBy":["72","73","74","75"],"location":{"end":{"column":2,"line":4},"start":{"column":40,"line":1}}},{"id":"250","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"'Hello ' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["72"],"coveredBy":["72","74","75"],"location":{"end":{"column":18,"line":3},"start":{"column":11,"line":3}}},{"id":"249","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"' World' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["72"],"coveredBy":["72","73","74","75"],"location":{"end":{"column":18,"line":2},"start":{"column":11,"line":2}}},{"id":"251","mutatorName":"BlockStatement","replacement":"{}","statusReason":"undefined == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["72"],"coveredBy":["72"],"location":{"end":{"column":2,"line":8},"start":{"column":38,"line":6}}},{"id":"252","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"'HelloWorld' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["72"],"coveredBy":["72"],"location":{"end":{"column":54,"line":7},"start":{"column":51,"line":7}}}],"source":"export function* helloWorldGenerator() {\n    yield 'Hello';\n    yield 'World';\n}\n\nexport default function HelloWorld() {\n    return Array.from(helloWorldGenerator()).join(' ');\n}"},"src/folder_1/5_kata.ts":{"language":"typescript","mutants":[{"id":"253","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["76"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"255","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"254","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"256","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"257","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"258","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["86"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"259","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["85"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"260","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["84"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"261","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["83"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"262","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"263","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"265","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"264","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"266","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"267","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"268","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"269","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["82"],"coveredBy":["82","83","84","85","86"],"location":{"end":{"column":10,"line":16},"start":{"column":34,"line":13}}},{"id":"270","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 - discount)","statusReason":"expected 1113.4020618556704 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["82"],"coveredBy":["82","83","84","85","86"],"location":{"end":{"column":51,"line":14},"start":{"column":25,"line":14}}},{"id":"271","mutatorName":"ArithmeticOperator","replacement":"1 + discount","statusReason":"expected 1112.4 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["82"],"coveredBy":["82","83","84","85","86"],"location":{"end":{"column":50,"line":14},"start":{"column":38,"line":14}}},{"id":"272","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected 4976.1 to equal 5130","status":"Killed","static":false,"testsCompleted":2,"killedBy":["83"],"coveredBy":["82","83","84","85","86"],"location":{"end":{"column":24,"line":15},"start":{"column":20,"line":15}}},{"id":"273","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"274","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["76"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"275","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"276","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"277","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}],"source":"ï»¿\r\n\r\nexport const input = (commands) => {\r\n    let totalCost = +commands[0] * +commands[1];\r\n    const volumeDiscount = [\r\n        { volume: 50000, discount: 0.15 },\r\n        { volume: 10000, discount: 0.10 },\r\n        { volume: 7000, discount: 0.07 },\r\n        { volume: 5000, discount: 0.05 },\r\n        { volume: 1000, discount: 0.03 },\r\n    ]\r\n    volumeDiscount.some(({volume, discount}, idx) => {\r\n        if (totalCost >= volume) {\r\n            totalCost = totalCost * (1 - discount)\r\n            return true;\r\n        }\r\n        return false;\r\n    })\r\n    const stateTaxes = {\r\n        UT: 6.85,\r\n        NV: 8.00,\r\n        TX: 6.25,\r\n        AL: 4.00,\r\n        CA: 8.25,\r\n    }\r\n    return totalCost * (1 + stateTaxes[commands[2]] / 100);\r\n}"},"src/folder_1/7_kata.ts":{"language":"typescript","mutants":[{"id":"310","mutatorName":"BlockStatement","replacement":"{}","statusReason":"'' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["90"],"coveredBy":["90","91","92","93"],"location":{"end":{"column":2,"line":4},"start":{"column":40,"line":1}}},{"id":"311","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"' World' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["90"],"coveredBy":["90","91","92","93"],"location":{"end":{"column":18,"line":2},"start":{"column":11,"line":2}}},{"id":"313","mutatorName":"BlockStatement","replacement":"{}","statusReason":"undefined == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["90"],"coveredBy":["90"],"location":{"end":{"column":2,"line":8},"start":{"column":38,"line":6}}},{"id":"312","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"'Hello ' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["90"],"coveredBy":["90","92","93"],"location":{"end":{"column":18,"line":3},"start":{"column":11,"line":3}}},{"id":"314","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"'HelloWorld' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["90"],"coveredBy":["90"],"location":{"end":{"column":54,"line":7},"start":{"column":51,"line":7}}}],"source":"export function* helloWorldGenerator() {\n    yield 'Hello';\n    yield 'World';\n}\n\nexport default function HelloWorld() {\n    return Array.from(helloWorldGenerator()).join(' ');\n}\n"},"src/folder_1/8_kata.ts":{"language":"typescript","mutants":[{"id":"315","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["94"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"316","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"317","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"318","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"319","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"320","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["104"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"321","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["103"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"322","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["102"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"324","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"323","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["101"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"326","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"325","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"327","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"328","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"329","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"330","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"331","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["100"],"coveredBy":["100","101","102","103","104"],"location":{"end":{"column":10,"line":16},"start":{"column":34,"line":13}}},{"id":"332","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 - discount)","statusReason":"expected 1113.4020618556704 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["100"],"coveredBy":["100","101","102","103","104"],"location":{"end":{"column":51,"line":14},"start":{"column":25,"line":14}}},{"id":"333","mutatorName":"ArithmeticOperator","replacement":"1 + discount","statusReason":"expected 1112.4 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["100"],"coveredBy":["100","101","102","103","104"],"location":{"end":{"column":50,"line":14},"start":{"column":38,"line":14}}},{"id":"334","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected 4976.1 to equal 5130","status":"Killed","static":false,"testsCompleted":2,"killedBy":["101"],"coveredBy":["100","101","102","103","104"],"location":{"end":{"column":24,"line":15},"start":{"column":20,"line":15}}},{"id":"335","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"336","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["94"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"337","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"338","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"339","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}],"source":"ï»¿\r\n\r\nexport const input = (commands) => {\r\n    let totalCost = +commands[0] * +commands[1];\r\n    const volumeDiscount = [\r\n        { volume: 50000, discount: 0.15 },\r\n        { volume: 10000, discount: 0.10 },\r\n        { volume: 7000, discount: 0.07 },\r\n        { volume: 5000, discount: 0.05 },\r\n        { volume: 1000, discount: 0.03 },\r\n    ]\r\n    volumeDiscount.some(({volume, discount}, idx) => {\r\n        if (totalCost >= volume) {\r\n            totalCost = totalCost * (1 - discount)\r\n            return true;\r\n        }\r\n        return false;\r\n    })\r\n    const stateTaxes = {\r\n        UT: 6.85,\r\n        NV: 8.00,\r\n        TX: 6.25,\r\n        AL: 4.00,\r\n        CA: 8.25,\r\n    }\r\n    return totalCost * (1 + stateTaxes[commands[2]] / 100);\r\n}"}},"schemaVersion":"1.0","thresholds":{"high":80,"low":60,"break":null},"testFiles":{"dist/test/folder_1/test_kata_1.spec.js":{"tests":[{"id":"0","name":"hello world kata should return hello world"},{"id":"1","name":"hello world kata should use a generator function that returns hello"},{"id":"2","name":"hello world kata should use a generator function that returns world on second call"},{"id":"3","name":"hello world kata should use a generator function that returns done after three calls"}],"source":"import assert from \"node:assert\";\nimport HelloWorld, { helloWorldGenerator } from '../../src/folder_1/1_kata.js';\ndescribe('hello world kata', function () {\n    it('should return hello world', function () {\n        assert.equal(HelloWorld(), \"Hello World\");\n    });\n    it('should use a generator function that returns hello', () => {\n        let firstCall = helloWorldGenerator().next();\n        assert.equal(firstCall.value, 'Hello');\n        assert.equal(firstCall.done, false);\n    });\n    it('should use a generator function that returns world on second call', () => {\n        let sequence = helloWorldGenerator();\n        sequence.next();\n        let secondCall = sequence.next();\n        assert.equal(secondCall.value, 'World');\n        assert.equal(secondCall.done, false);\n    });\n    it('should use a generator function that returns done after three calls', () => {\n        let sequence = helloWorldGenerator();\n        const firstCall = sequence.next();\n        const secondCall = sequence.next();\n        const thirdCall = sequence.next();\n        assert.equal(thirdCall.done, true);\n    });\n});\n"},"dist/test/folder_1/test_kata_10.spec.js":{"tests":[{"id":"4","name":"hello world kata four should return hello world"},{"id":"5","name":"hello world kata four should use a generator function that returns hello"},{"id":"6","name":"hello world kata four should use a generator function that returns world on second call"},{"id":"7","name":"hello world kata four should use a generator function that returns done after three calls"}],"source":"import assert from \"node:assert\";\nimport HelloWorld, { helloWorldGenerator } from '../../src/folder_1/10_kata.js';\ndescribe('hello world kata four', function () {\n    it('should return hello world', function () {\n        assert.equal(HelloWorld(), \"Hello World\");\n    });\n    it('should use a generator function that returns hello', () => {\n        let firstCall = helloWorldGenerator().next();\n        assert.equal(firstCall.value, 'Hello');\n        assert.equal(firstCall.done, false);\n    });\n    it('should use a generator function that returns world on second call', () => {\n        let sequence = helloWorldGenerator();\n        sequence.next();\n        let secondCall = sequence.next();\n        assert.equal(secondCall.value, 'World');\n        assert.equal(secondCall.done, false);\n    });\n    it('should use a generator function that returns done after three calls', () => {\n        let sequence = helloWorldGenerator();\n        const firstCall = sequence.next();\n        const secondCall = sequence.next();\n        const thirdCall = sequence.next();\n        assert.equal(thirdCall.done, true);\n    });\n});\n"},"dist/test/folder_1/test_kata_11.spec.js":{"tests":[{"id":"8","name":"kata two four given 0 items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"9","name":"kata two four given 1 item and a NV state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"10","name":"kata two four given 1 item and a UT state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"11","name":"kata two four given 1 item and a TX state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"12","name":"kata two four given 1 item and a AL state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"13","name":"kata two four given 1 item and a CA state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"14","name":"kata two four given 1000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"15","name":"kata two four given 5000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"16","name":"kata two four given 7000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"17","name":"kata two four given 10000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"18","name":"kata two four given 50000 of items can accept an input of how many items, cost per item, state code, and calculate total value"}],"source":"import { assert } from 'chai';\nimport { input } from \"../../src/folder_1/11_kata.js\";\ndescribe('kata two four', function () {\n    it('given 0 items can accept an input of how many items, cost per item, state code, and calculate total value', function () {\n        const commands = [\n            \"0\",\n            \"5\",\n            \"NV\"\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, 0);\n    });\n    [\n        { state: \"NV\", multiplier: 1.08 },\n        { state: \"UT\", multiplier: 1.0685 },\n        { state: \"TX\", multiplier: 1.0625 },\n        { state: \"AL\", multiplier: 1.0400 },\n        { state: \"CA\", multiplier: 1.0825 },\n    ].forEach(({ state, multiplier }) => it(`given 1 item and a ${state} state code can accept an input of how many items, cost per item, state code, ` +\n        'and calculate total value', function () {\n        const commands = [\n            \"1\",\n            \"5\",\n            state\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, 5 * multiplier);\n    }));\n    [\n        { amount: \"1000\", discount: 0.03 },\n        { amount: \"5000\", discount: 0.05 },\n        { amount: \"7000\", discount: 0.07 },\n        { amount: \"10000\", discount: 0.10 },\n        { amount: \"50000\", discount: 0.15 },\n    ].forEach(({ amount, discount }) => it(`given ${amount} of items can accept an input of how many items, cost per item, state code, and calculate total value`, function () {\n        const commands = [\n            \"1\",\n            amount,\n            \"NV\"\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, +amount * (1 - discount) * (1.08));\n    }));\n});\n"},"dist/test/folder_1/test_kata_12.spec.js":{"tests":[{"id":"19","name":"can do battle four the vile zerg zergling will battle the epic terran marine"},{"id":"20","name":"can do battle four the vile zerg zergling will battle the epic protos zealot"},{"id":"21","name":"can do battle four the vile zerg zergling cannot hit a unit it has not run at"}],"source":"import { assert } from \"chai\";\nimport { Zergling, Marine, Zealot } from '../../src/folder_1/12_kata.js';\ndescribe('can do battle four', () => {\n    it('the vile zerg zergling will battle the epic terran marine', () => {\n        const marine = new Marine();\n        const zergling = new Zergling();\n        zergling.run(marine);\n        marine.shoot(zergling);\n        zergling.attack(marine);\n        marine.shoot(zergling);\n        assert.equal(marine.alive(), true);\n        assert.equal(zergling.alive(), false);\n    });\n    it('the vile zerg zergling will battle the epic protos zealot', () => {\n        const zealot = new Zealot();\n        const zergling = new Zergling();\n        zergling.run(zealot);\n        zealot.claw(zergling);\n        zergling.attack(zealot);\n        zealot.claw(zergling);\n        assert.equal(zealot.alive(), true);\n    });\n    it('the vile zerg zergling cannot hit a unit it has not run at', () => {\n        const zealot = new Zealot();\n        const zergling = new Zergling();\n        zergling.attack(zealot);\n        assert.equal(zealot.hitpointBar(), \"full\");\n    });\n});\n"},"dist/test/folder_1/test_kata_13.spec.js":{"tests":[{"id":"22","name":"hello world kata five should return hello world"},{"id":"23","name":"hello world kata five should use a generator function that returns hello"},{"id":"24","name":"hello world kata five should use a generator function that returns world on second call"},{"id":"25","name":"hello world kata five should use a generator function that returns done after three calls"}],"source":"import assert from \"node:assert\";\nimport HelloWorld, { helloWorldGenerator } from '../../src/folder_1/13_kata.js';\ndescribe('hello world kata five', function () {\n    it('should return hello world', function () {\n        assert.equal(HelloWorld(), \"Hello World\");\n    });\n    it('should use a generator function that returns hello', () => {\n        let firstCall = helloWorldGenerator().next();\n        assert.equal(firstCall.value, 'Hello');\n        assert.equal(firstCall.done, false);\n    });\n    it('should use a generator function that returns world on second call', () => {\n        let sequence = helloWorldGenerator();\n        sequence.next();\n        let secondCall = sequence.next();\n        assert.equal(secondCall.value, 'World');\n        assert.equal(secondCall.done, false);\n    });\n    it('should use a generator function that returns done after three calls', () => {\n        let sequence = helloWorldGenerator();\n        const firstCall = sequence.next();\n        const secondCall = sequence.next();\n        const thirdCall = sequence.next();\n        assert.equal(thirdCall.done, true);\n    });\n});\n"},"dist/test/folder_1/test_kata_14.spec.js":{"tests":[{"id":"26","name":"kata two five given 0 items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"27","name":"kata two five given 1 item and a NV state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"28","name":"kata two five given 1 item and a UT state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"29","name":"kata two five given 1 item and a TX state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"30","name":"kata two five given 1 item and a AL state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"31","name":"kata two five given 1 item and a CA state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"32","name":"kata two five given 1000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"33","name":"kata two five given 5000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"34","name":"kata two five given 7000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"35","name":"kata two five given 10000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"36","name":"kata two five given 50000 of items can accept an input of how many items, cost per item, state code, and calculate total value"}],"source":"import { assert } from 'chai';\nimport { input } from \"../../src/folder_1/14_kata.js\";\ndescribe('kata two five', function () {\n    it('given 0 items can accept an input of how many items, cost per item, state code, and calculate total value', function () {\n        const commands = [\n            \"0\",\n            \"5\",\n            \"NV\"\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, 0);\n    });\n    [\n        { state: \"NV\", multiplier: 1.08 },\n        { state: \"UT\", multiplier: 1.0685 },\n        { state: \"TX\", multiplier: 1.0625 },\n        { state: \"AL\", multiplier: 1.0400 },\n        { state: \"CA\", multiplier: 1.0825 },\n    ].forEach(({ state, multiplier }) => it(`given 1 item and a ${state} state code can accept an input of how many items, cost per item, state code, ` +\n        'and calculate total value', function () {\n        const commands = [\n            \"1\",\n            \"5\",\n            state\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, 5 * multiplier);\n    }));\n    [\n        { amount: \"1000\", discount: 0.03 },\n        { amount: \"5000\", discount: 0.05 },\n        { amount: \"7000\", discount: 0.07 },\n        { amount: \"10000\", discount: 0.10 },\n        { amount: \"50000\", discount: 0.15 },\n    ].forEach(({ amount, discount }) => it(`given ${amount} of items can accept an input of how many items, cost per item, state code, and calculate total value`, function () {\n        const commands = [\n            \"1\",\n            amount,\n            \"NV\"\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, +amount * (1 - discount) * (1.08));\n    }));\n});\n"},"dist/test/folder_1/test_kata_15.spec.js":{"tests":[{"id":"37","name":"can do battle five the vile zerg zergling will battle the epic terran marine"},{"id":"38","name":"can do battle five the vile zerg zergling will battle the epic protos zealot"},{"id":"39","name":"can do battle five the vile zerg zergling cannot hit a unit it has not run at"}],"source":"import { assert } from \"chai\";\nimport { Zergling, Marine, Zealot } from '../../src/folder_1/15_kata.js';\ndescribe('can do battle five', () => {\n    it('the vile zerg zergling will battle the epic terran marine', () => {\n        const marine = new Marine();\n        const zergling = new Zergling();\n        zergling.run(marine);\n        marine.shoot(zergling);\n        zergling.attack(marine);\n        marine.shoot(zergling);\n        assert.equal(marine.alive(), true);\n        assert.equal(zergling.alive(), false);\n    });\n    it('the vile zerg zergling will battle the epic protos zealot', () => {\n        const zealot = new Zealot();\n        const zergling = new Zergling();\n        zergling.run(zealot);\n        zealot.claw(zergling);\n        zergling.attack(zealot);\n        zealot.claw(zergling);\n        assert.equal(zealot.alive(), true);\n    });\n    it('the vile zerg zergling cannot hit a unit it has not run at', () => {\n        const zealot = new Zealot();\n        const zergling = new Zergling();\n        zergling.attack(zealot);\n        assert.equal(zealot.hitpointBar(), \"full\");\n    });\n});\n"},"dist/test/folder_1/test_kata_16.spec.js":{"tests":[{"id":"40","name":"hello world kata six should return hello world"},{"id":"41","name":"hello world kata six should use a generator function that returns hello"},{"id":"42","name":"hello world kata six should use a generator function that returns world on second call"},{"id":"43","name":"hello world kata six should use a generator function that returns done after three calls"}],"source":"import assert from \"node:assert\";\nimport HelloWorld, { helloWorldGenerator } from '../../src/folder_1/16_kata.js';\ndescribe('hello world kata six', function () {\n    it('should return hello world', function () {\n        assert.equal(HelloWorld(), \"Hello World\");\n    });\n    it('should use a generator function that returns hello', () => {\n        let firstCall = helloWorldGenerator().next();\n        assert.equal(firstCall.value, 'Hello');\n        assert.equal(firstCall.done, false);\n    });\n    it('should use a generator function that returns world on second call', () => {\n        let sequence = helloWorldGenerator();\n        sequence.next();\n        let secondCall = sequence.next();\n        assert.equal(secondCall.value, 'World');\n        assert.equal(secondCall.done, false);\n    });\n    it('should use a generator function that returns done after three calls', () => {\n        let sequence = helloWorldGenerator();\n        const firstCall = sequence.next();\n        const secondCall = sequence.next();\n        const thirdCall = sequence.next();\n        assert.equal(thirdCall.done, true);\n    });\n});\n"},"dist/test/folder_1/test_kata_17.spec.js":{"tests":[{"id":"44","name":"kata two six given 0 items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"45","name":"kata two six given 1 item and a NV state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"46","name":"kata two six given 1 item and a UT state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"47","name":"kata two six given 1 item and a TX state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"48","name":"kata two six given 1 item and a AL state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"49","name":"kata two six given 1 item and a CA state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"50","name":"kata two six given 1000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"51","name":"kata two six given 5000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"52","name":"kata two six given 7000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"53","name":"kata two six given 10000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"54","name":"kata two six given 50000 of items can accept an input of how many items, cost per item, state code, and calculate total value"}],"source":"import { assert } from 'chai';\nimport { input } from \"../../src/folder_1/17_kata.js\";\ndescribe('kata two six', function () {\n    it('given 0 items can accept an input of how many items, cost per item, state code, and calculate total value', function () {\n        const commands = [\n            \"0\",\n            \"5\",\n            \"NV\"\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, 0);\n    });\n    [\n        { state: \"NV\", multiplier: 1.08 },\n        { state: \"UT\", multiplier: 1.0685 },\n        { state: \"TX\", multiplier: 1.0625 },\n        { state: \"AL\", multiplier: 1.0400 },\n        { state: \"CA\", multiplier: 1.0825 },\n    ].forEach(({ state, multiplier }) => it(`given 1 item and a ${state} state code can accept an input of how many items, cost per item, state code, ` +\n        'and calculate total value', function () {\n        const commands = [\n            \"1\",\n            \"5\",\n            state\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, 5 * multiplier);\n    }));\n    [\n        { amount: \"1000\", discount: 0.03 },\n        { amount: \"5000\", discount: 0.05 },\n        { amount: \"7000\", discount: 0.07 },\n        { amount: \"10000\", discount: 0.10 },\n        { amount: \"50000\", discount: 0.15 },\n    ].forEach(({ amount, discount }) => it(`given ${amount} of items can accept an input of how many items, cost per item, state code, and calculate total value`, function () {\n        const commands = [\n            \"1\",\n            amount,\n            \"NV\"\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, +amount * (1 - discount) * (1.08));\n    }));\n});\n"},"dist/test/folder_1/test_kata_18.spec.js":{"tests":[{"id":"55","name":"can do battle six the vile zerg zergling will battle the epic terran marine"},{"id":"56","name":"can do battle six the vile zerg zergling will battle the epic protos zealot"},{"id":"57","name":"can do battle six the vile zerg zergling cannot hit a unit it has not run at"}],"source":"import { assert } from \"chai\";\nimport { Zergling, Marine, Zealot } from '../../src/folder_1/18_kata.js';\ndescribe('can do battle six', () => {\n    it('the vile zerg zergling will battle the epic terran marine', () => {\n        const marine = new Marine();\n        const zergling = new Zergling();\n        zergling.run(marine);\n        marine.shoot(zergling);\n        zergling.attack(marine);\n        marine.shoot(zergling);\n        assert.equal(marine.alive(), true);\n        assert.equal(zergling.alive(), false);\n    });\n    it('the vile zerg zergling will battle the epic protos zealot', () => {\n        const zealot = new Zealot();\n        const zergling = new Zergling();\n        zergling.run(zealot);\n        zealot.claw(zergling);\n        zergling.attack(zealot);\n        zealot.claw(zergling);\n        assert.equal(zealot.alive(), true);\n    });\n    it('the vile zerg zergling cannot hit a unit it has not run at', () => {\n        const zealot = new Zealot();\n        const zergling = new Zergling();\n        zergling.attack(zealot);\n        assert.equal(zealot.hitpointBar(), \"full\");\n    });\n});\n"},"dist/test/folder_1/test_kata_2.spec.js":{"tests":[{"id":"58","name":"kata two given 0 items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"59","name":"kata two given 1 item and a NV state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"60","name":"kata two given 1 item and a UT state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"61","name":"kata two given 1 item and a TX state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"62","name":"kata two given 1 item and a AL state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"63","name":"kata two given 1 item and a CA state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"64","name":"kata two given 1000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"65","name":"kata two given 5000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"66","name":"kata two given 7000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"67","name":"kata two given 10000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"68","name":"kata two given 50000 of items can accept an input of how many items, cost per item, state code, and calculate total value"}],"source":"import { assert } from 'chai';\nimport { input } from \"../../src/folder_1/2_kata.js\";\ndescribe('kata two', function () {\n    it('given 0 items can accept an input of how many items, cost per item, state code, and calculate total value', function () {\n        const commands = [\n            \"0\",\n            \"5\",\n            \"NV\"\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, 0);\n    });\n    [\n        { state: \"NV\", multiplier: 1.08 },\n        { state: \"UT\", multiplier: 1.0685 },\n        { state: \"TX\", multiplier: 1.0625 },\n        { state: \"AL\", multiplier: 1.0400 },\n        { state: \"CA\", multiplier: 1.0825 },\n    ].forEach(({ state, multiplier }) => it(`given 1 item and a ${state} state code can accept an input of how many items, cost per item, state code, ` +\n        'and calculate total value', function () {\n        const commands = [\n            \"1\",\n            \"5\",\n            state\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, 5 * multiplier);\n    }));\n    [\n        { amount: \"1000\", discount: 0.03 },\n        { amount: \"5000\", discount: 0.05 },\n        { amount: \"7000\", discount: 0.07 },\n        { amount: \"10000\", discount: 0.10 },\n        { amount: \"50000\", discount: 0.15 },\n    ].forEach(({ amount, discount }) => it(`given ${amount} of items can accept an input of how many items, cost per item, state code, and calculate total value`, function () {\n        const commands = [\n            \"1\",\n            amount,\n            \"NV\"\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, +amount * (1 - discount) * (1.08));\n    }));\n});\n"},"dist/test/folder_1/test_kata_3.spec.js":{"tests":[{"id":"69","name":"can do battle the vile zerg zergling will battle the epic terran marine"},{"id":"70","name":"can do battle the vile zerg zergling will battle the epic protos zealot"},{"id":"71","name":"can do battle the vile zerg zergling cannot hit a unit it has not run at"}],"source":"import { assert } from \"chai\";\nimport { Zergling, Marine, Zealot } from '../../src/folder_1/3_kata.js';\ndescribe('can do battle', () => {\n    it('the vile zerg zergling will battle the epic terran marine', () => {\n        const marine = new Marine();\n        const zergling = new Zergling();\n        zergling.run(marine);\n        marine.shoot(zergling);\n        zergling.attack(marine);\n        marine.shoot(zergling);\n        assert.equal(marine.alive(), true);\n        assert.equal(zergling.alive(), false);\n    });\n    it('the vile zerg zergling will battle the epic protos zealot', () => {\n        const zealot = new Zealot();\n        const zergling = new Zergling();\n        zergling.run(zealot);\n        zealot.claw(zergling);\n        zergling.attack(zealot);\n        zealot.claw(zergling);\n        assert.equal(zealot.alive(), true);\n    });\n    it('the vile zerg zergling cannot hit a unit it has not run at', () => {\n        const zealot = new Zealot();\n        const zergling = new Zergling();\n        zergling.attack(zealot);\n        assert.equal(zealot.hitpointBar(), \"full\");\n    });\n});\n"},"dist/test/folder_1/test_kata_4.spec.js":{"tests":[{"id":"72","name":"hello world kata two should return hello world"},{"id":"73","name":"hello world kata two should use a generator function that returns hello"},{"id":"74","name":"hello world kata two should use a generator function that returns world on second call"},{"id":"75","name":"hello world kata two should use a generator function that returns done after three calls"}],"source":"import assert from \"node:assert\";\nimport HelloWorld, { helloWorldGenerator } from '../../src/folder_1/4_kata.js';\ndescribe('hello world kata two', function () {\n    it('should return hello world', function () {\n        assert.equal(HelloWorld(), \"Hello World\");\n    });\n    it('should use a generator function that returns hello', () => {\n        let firstCall = helloWorldGenerator().next();\n        assert.equal(firstCall.value, 'Hello');\n        assert.equal(firstCall.done, false);\n    });\n    it('should use a generator function that returns world on second call', () => {\n        let sequence = helloWorldGenerator();\n        sequence.next();\n        let secondCall = sequence.next();\n        assert.equal(secondCall.value, 'World');\n        assert.equal(secondCall.done, false);\n    });\n    it('should use a generator function that returns done after three calls', () => {\n        let sequence = helloWorldGenerator();\n        const firstCall = sequence.next();\n        const secondCall = sequence.next();\n        const thirdCall = sequence.next();\n        assert.equal(thirdCall.done, true);\n    });\n});\n"},"dist/test/folder_1/test_kata_5.spec.js":{"tests":[{"id":"76","name":"kata two two given 0 items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"77","name":"kata two two given 1 item and a NV state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"78","name":"kata two two given 1 item and a UT state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"79","name":"kata two two given 1 item and a TX state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"80","name":"kata two two given 1 item and a AL state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"81","name":"kata two two given 1 item and a CA state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"82","name":"kata two two given 1000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"83","name":"kata two two given 5000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"84","name":"kata two two given 7000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"85","name":"kata two two given 10000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"86","name":"kata two two given 50000 of items can accept an input of how many items, cost per item, state code, and calculate total value"}],"source":"import { assert } from 'chai';\nimport { input } from \"../../src/folder_1/5_kata.js\";\ndescribe('kata two two', function () {\n    it('given 0 items can accept an input of how many items, cost per item, state code, and calculate total value', function () {\n        const commands = [\n            \"0\",\n            \"5\",\n            \"NV\"\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, 0);\n    });\n    [\n        { state: \"NV\", multiplier: 1.08 },\n        { state: \"UT\", multiplier: 1.0685 },\n        { state: \"TX\", multiplier: 1.0625 },\n        { state: \"AL\", multiplier: 1.0400 },\n        { state: \"CA\", multiplier: 1.0825 },\n    ].forEach(({ state, multiplier }) => it(`given 1 item and a ${state} state code can accept an input of how many items, cost per item, state code, ` +\n        'and calculate total value', function () {\n        const commands = [\n            \"1\",\n            \"5\",\n            state\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, 5 * multiplier);\n    }));\n    [\n        { amount: \"1000\", discount: 0.03 },\n        { amount: \"5000\", discount: 0.05 },\n        { amount: \"7000\", discount: 0.07 },\n        { amount: \"10000\", discount: 0.10 },\n        { amount: \"50000\", discount: 0.15 },\n    ].forEach(({ amount, discount }) => it(`given ${amount} of items can accept an input of how many items, cost per item, state code, and calculate total value`, function () {\n        const commands = [\n            \"1\",\n            amount,\n            \"NV\"\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, +amount * (1 - discount) * (1.08));\n    }));\n});\n"},"dist/test/folder_1/test_kata_6.spec.js":{"tests":[{"id":"87","name":"can do battle two the vile zerg zergling will battle the epic terran marine"},{"id":"88","name":"can do battle two the vile zerg zergling will battle the epic protos zealot"},{"id":"89","name":"can do battle two the vile zerg zergling cannot hit a unit it has not run at"}],"source":"import { assert } from \"chai\";\nimport { Zergling, Marine, Zealot } from '../../src/folder_1/6_kata.js';\ndescribe('can do battle two', () => {\n    it('the vile zerg zergling will battle the epic terran marine', () => {\n        const marine = new Marine();\n        const zergling = new Zergling();\n        zergling.run(marine);\n        marine.shoot(zergling);\n        zergling.attack(marine);\n        marine.shoot(zergling);\n        assert.equal(marine.alive(), true);\n        assert.equal(zergling.alive(), false);\n    });\n    it('the vile zerg zergling will battle the epic protos zealot', () => {\n        const zealot = new Zealot();\n        const zergling = new Zergling();\n        zergling.run(zealot);\n        zealot.claw(zergling);\n        zergling.attack(zealot);\n        zealot.claw(zergling);\n        assert.equal(zealot.alive(), true);\n    });\n    it('the vile zerg zergling cannot hit a unit it has not run at', () => {\n        const zealot = new Zealot();\n        const zergling = new Zergling();\n        zergling.attack(zealot);\n        assert.equal(zealot.hitpointBar(), \"full\");\n    });\n});\n"},"dist/test/folder_1/test_kata_7.spec.js":{"tests":[{"id":"90","name":"hello world kata three should return hello world"},{"id":"91","name":"hello world kata three should use a generator function that returns hello"},{"id":"92","name":"hello world kata three should use a generator function that returns world on second call"},{"id":"93","name":"hello world kata three should use a generator function that returns done after three calls"}],"source":"import assert from \"node:assert\";\nimport HelloWorld, { helloWorldGenerator } from '../../src/folder_1/7_kata.js';\ndescribe('hello world kata three', function () {\n    it('should return hello world', function () {\n        assert.equal(HelloWorld(), \"Hello World\");\n    });\n    it('should use a generator function that returns hello', () => {\n        let firstCall = helloWorldGenerator().next();\n        assert.equal(firstCall.value, 'Hello');\n        assert.equal(firstCall.done, false);\n    });\n    it('should use a generator function that returns world on second call', () => {\n        let sequence = helloWorldGenerator();\n        sequence.next();\n        let secondCall = sequence.next();\n        assert.equal(secondCall.value, 'World');\n        assert.equal(secondCall.done, false);\n    });\n    it('should use a generator function that returns done after three calls', () => {\n        let sequence = helloWorldGenerator();\n        const firstCall = sequence.next();\n        const secondCall = sequence.next();\n        const thirdCall = sequence.next();\n        assert.equal(thirdCall.done, true);\n    });\n});\n"},"dist/test/folder_1/test_kata_8.spec.js":{"tests":[{"id":"94","name":"kata two three given 0 items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"95","name":"kata two three given 1 item and a NV state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"96","name":"kata two three given 1 item and a UT state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"97","name":"kata two three given 1 item and a TX state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"98","name":"kata two three given 1 item and a AL state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"99","name":"kata two three given 1 item and a CA state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"100","name":"kata two three given 1000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"101","name":"kata two three given 5000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"102","name":"kata two three given 7000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"103","name":"kata two three given 10000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"104","name":"kata two three given 50000 of items can accept an input of how many items, cost per item, state code, and calculate total value"}],"source":"import { assert } from 'chai';\nimport { input } from \"../../src/folder_1/8_kata.js\";\ndescribe('kata two three', function () {\n    it('given 0 items can accept an input of how many items, cost per item, state code, and calculate total value', function () {\n        const commands = [\n            \"0\",\n            \"5\",\n            \"NV\"\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, 0);\n    });\n    [\n        { state: \"NV\", multiplier: 1.08 },\n        { state: \"UT\", multiplier: 1.0685 },\n        { state: \"TX\", multiplier: 1.0625 },\n        { state: \"AL\", multiplier: 1.0400 },\n        { state: \"CA\", multiplier: 1.0825 },\n    ].forEach(({ state, multiplier }) => it(`given 1 item and a ${state} state code can accept an input of how many items, cost per item, state code, ` +\n        'and calculate total value', function () {\n        const commands = [\n            \"1\",\n            \"5\",\n            state\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, 5 * multiplier);\n    }));\n    [\n        { amount: \"1000\", discount: 0.03 },\n        { amount: \"5000\", discount: 0.05 },\n        { amount: \"7000\", discount: 0.07 },\n        { amount: \"10000\", discount: 0.10 },\n        { amount: \"50000\", discount: 0.15 },\n    ].forEach(({ amount, discount }) => it(`given ${amount} of items can accept an input of how many items, cost per item, state code, and calculate total value`, function () {\n        const commands = [\n            \"1\",\n            amount,\n            \"NV\"\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, +amount * (1 - discount) * (1.08));\n    }));\n});\n"},"dist/test/folder_1/test_kata_9.spec.js":{"tests":[{"id":"105","name":"can do battle three the vile zerg zergling will battle the epic terran marine"},{"id":"106","name":"can do battle three the vile zerg zergling will battle the epic protos zealot"},{"id":"107","name":"can do battle three the vile zerg zergling cannot hit a unit it has not run at"}],"source":"import { assert } from \"chai\";\nimport { Zergling, Marine, Zealot } from '../../src/folder_1/9_kata.js';\ndescribe('can do battle three', () => {\n    it('the vile zerg zergling will battle the epic terran marine', () => {\n        const marine = new Marine();\n        const zergling = new Zergling();\n        zergling.run(marine);\n        marine.shoot(zergling);\n        zergling.attack(marine);\n        marine.shoot(zergling);\n        assert.equal(marine.alive(), true);\n        assert.equal(zergling.alive(), false);\n    });\n    it('the vile zerg zergling will battle the epic protos zealot', () => {\n        const zealot = new Zealot();\n        const zergling = new Zergling();\n        zergling.run(zealot);\n        zealot.claw(zergling);\n        zergling.attack(zealot);\n        zealot.claw(zergling);\n        assert.equal(zealot.alive(), true);\n    });\n    it('the vile zerg zergling cannot hit a unit it has not run at', () => {\n        const zealot = new Zealot();\n        const zergling = new Zergling();\n        zergling.attack(zealot);\n        assert.equal(zealot.hitpointBar(), \"full\");\n    });\n});\n"}},"projectRoot":"C:\\Users\\evano\\WebstormProjects\\JavascriptKata","config":{"$schema":"./node_modules/@stryker-mutator/core/schema/stryker-schema.json","_comment":"This config was generated using 'stryker init'. Please take a look at: https://stryker-mutator.io/docs/stryker-js/configuration/ for more information.","packageManager":"npm","reporters":["html","json","clear-text","progress"],"tsconfigFile":"tsconfig.json","testRunner":"mocha","testRunner_comment":"Take a look at https://stryker-mutator.io/docs/stryker-js/mocha-runner for information about the mocha plugin.","coverageAnalysis":"perTest","buildCommand":"npm run build","mochaOptions":{"spec":["dist/**/*.spec.js"]},"allowConsoleColors":true,"checkers":[],"checkerNodeArgs":[],"commandRunner":{"command":"npm test"},"clearTextReporter":{"allowColor":true,"allowEmojis":false,"logTests":true,"maxTestsToLog":3,"reportTests":true,"reportMutants":true,"reportScoreTable":true,"skipFull":false},"dashboard":{"baseUrl":"https://dashboard.stryker-mutator.io/api/reports","reportType":"full"},"dryRunOnly":false,"eventReporter":{"baseDir":"reports/mutation/events"},"ignorePatterns":[],"ignoreStatic":false,"incremental":false,"incrementalFile":"reports/stryker-incremental.json","force":false,"fileLogLevel":"off","inPlace":false,"logLevel":"info","maxConcurrentTestRunners":9007199254740991,"maxTestRunnerReuse":0,"mutate":["{src,lib}/**/!(*.+(s|S)pec|*.+(t|T)est).+(cjs|mjs|js|ts|mts|cts|jsx|tsx|html|vue|svelte)","!{src,lib}/**/__tests__/**/*.+(cjs|mjs|js|ts|mts|cts|jsx|tsx|html|vue|svelte)"],"mutator":{"plugins":null,"excludedMutations":[]},"plugins":["@stryker-mutator/*"],"appendPlugins":[],"htmlReporter":{"fileName":"reports/mutation/mutation.html"},"jsonReporter":{"fileName":"reports/mutation/mutation.json"},"disableTypeChecks":true,"symlinkNodeModules":true,"tempDirName":".stryker-tmp","cleanTempDir":true,"testRunnerNodeArgs":[],"thresholds":{"high":80,"low":60,"break":null},"timeoutFactor":1.5,"timeoutMS":5000,"dryRunTimeoutMinutes":5,"warnings":true,"disableBail":false,"allowEmpty":false,"ignorers":[]},"framework":{"name":"StrykerJS","version":"9.0.1","branding":{"homepageUrl":"https://stryker-mutator.io","imageUrl":"data:image/svg+xml;utf8,%3Csvg viewBox='0 0 1458 1458' xmlns='http://www.w3.org/2000/svg' fill-rule='evenodd' clip-rule='evenodd' stroke-linejoin='round' stroke-miterlimit='2'%3E%3Cpath fill='none' d='M0 0h1458v1458H0z'/%3E%3CclipPath id='a'%3E%3Cpath d='M0 0h1458v1458H0z'/%3E%3C/clipPath%3E%3Cg clip-path='url(%23a)'%3E%3Cpath d='M1458 729c0 402.655-326.345 729-729 729S0 1131.655 0 729C0 326.445 326.345 0 729 0s729 326.345 729 729' fill='%23e74c3c' fill-rule='nonzero'/%3E%3Cpath d='M778.349 1456.15L576.6 1254.401l233-105 85-78.668v-64.332l-257-257-44-187-50-208 251.806-82.793L1076.6 389.401l380.14 379.15c-19.681 367.728-311.914 663.049-678.391 687.599z' fill-opacity='.3'/%3E%3Cpath d='M753.4 329.503c41.79 0 74.579 7.83 97.925 25.444 23.571 18.015 41.69 43.956 55.167 77.097l11.662 28.679 165.733-58.183-14.137-32.13c-26.688-60.655-64.896-108.61-114.191-144.011-49.329-35.423-117.458-54.302-204.859-54.302-50.78 0-95.646 7.376-134.767 21.542-40.093 14.671-74.09 34.79-102.239 60.259-28.84 26.207-50.646 57.06-65.496 92.701-14.718 35.052-22.101 72.538-22.101 112.401 0 72.536 20.667 133.294 61.165 182.704 38.624 47.255 98.346 88.037 179.861 121.291 42.257 17.475 78.715 33.125 109.227 46.994 27.193 12.361 49.294 26.124 66.157 41.751 15.309 14.186 26.497 30.584 33.63 49.258 7.721 20.214 11.16 45.69 11.16 76.402 0 28.021-4.251 51.787-13.591 71.219-8.832 18.374-20.171 33.178-34.523 44.219-14.787 11.374-31.193 19.591-49.393 24.466-19.68 5.359-39.14 7.993-58.69 7.993-29.359 0-54.387-3.407-75.182-10.747-20.112-7.013-37.144-16.144-51.259-27.486-13.618-11.009-24.971-23.766-33.744-38.279-9.64-15.8-17.272-31.924-23.032-48.408l-10.965-31.376-161.669 60.585 10.734 30.124c10.191 28.601 24.197 56.228 42.059 82.748 18.208 27.144 41.322 51.369 69.525 72.745 27.695 21.075 60.904 38.218 99.481 51.041 37.777 12.664 82.004 19.159 132.552 19.159 49.998 0 95.818-8.321 137.611-24.622 42.228-16.471 78.436-38.992 108.835-67.291 30.719-28.597 54.631-62.103 71.834-100.642 17.263-38.56 25.923-79.392 25.923-122.248 0-54.339-8.368-100.37-24.208-138.32-16.29-38.759-38.252-71.661-65.948-98.797-26.965-26.418-58.269-48.835-93.858-67.175-33.655-17.241-69.196-33.11-106.593-47.533-35.934-13.429-65.822-26.601-89.948-39.525-22.153-11.868-40.009-24.21-53.547-37.309-11.429-11.13-19.83-23.678-24.718-37.664-5.413-15.49-7.98-33.423-7.98-53.577 0-40.883 11.293-71.522 37.086-90.539 28.443-20.825 64.985-30.658 109.311-30.658z' fill='%23f1c40f' fill-rule='nonzero'/%3E%3Cpath d='M720 0h18v113h-18zM1458 738v-18h-113v18h113zM720 1345h18v113h-18zM113 738v-18H0v18h113z'/%3E%3C/g%3E%3C/svg%3E"},"dependencies":{"@stryker-mutator/mocha-runner":"9.0.1","mocha":"11.7.1","typescript":"5.8.3"}}}