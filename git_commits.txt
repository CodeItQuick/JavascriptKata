1347d28 mutation tests and coding agents
diff --git a/src/folder_1/1_kata.ts b/src/folder_1/1_kata.ts
new file mode 100644
index 0000000..27dda24
--- /dev/null
+++ b/src/folder_1/1_kata.ts
@@ -0,0 +1,8 @@
+export function* helloWorldGenerator() {
+    yield 'Hello';
+    yield 'World';
+}
+
+export default function HelloWorld() {
+    return Array.from(helloWorldGenerator()).join(' ');
+}
diff --git a/src/folder_1/2_kata.ts b/src/folder_1/2_kata.ts
new file mode 100644
index 0000000..20e26b1
--- /dev/null
+++ b/src/folder_1/2_kata.ts
@@ -0,0 +1,27 @@
+﻿
+
+export const input = (commands) => {
+    let totalCost = +commands[0] * +commands[1];
+    const volumeDiscount = [
+        { volume: 50000, discount: 0.15 },
+        { volume: 10000, discount: 0.10 },
+        { volume: 7000, discount: 0.07 },
+        { volume: 5000, discount: 0.05 },
+        { volume: 1000, discount: 0.03 },
+    ]
+    volumeDiscount.some(({volume, discount}, idx) => {
+        if (totalCost >= volume) {
+            totalCost = totalCost * (1 - discount)
+            return true;
+        }
+        return false;
+    })
+    const stateTaxes = {
+        UT: 6.85,
+        NV: 8.00,
+        TX: 6.25,
+        AL: 4.00,
+        CA: 8.25,
+    }
+    return totalCost * (1 + stateTaxes[commands[2]] / 100);
+}
\ No newline at end of file
diff --git a/src/folder_1/3_kata.ts b/src/folder_1/3_kata.ts
new file mode 100644
index 0000000..e8e83b2
--- /dev/null
+++ b/src/folder_1/3_kata.ts
@@ -0,0 +1,68 @@
+﻿interface IUnit {
+    attack(unit: IUnit): void;
+    alive(): boolean;
+    hurt(damage: number): void;
+}
+export class Zergling implements IUnit {
+    hitpoints = 1;
+    closeUnits: IUnit[] = [];
+    attack(unit: IUnit): void {
+        if (this.closeUnits.includes(unit)) {
+            unit.hurt(1);
+        }
+    }
+
+    alive(): boolean {
+        return this.hitpoints > 0;
+    }
+
+    run(unit: IUnit): void {
+        this.closeUnits.push(unit);
+    }
+
+    hurt(damage: number): void {
+        this.hitpoints -= damage;
+    }
+}
+export class Marine implements IUnit {
+    hitpoints = 2;
+    attack(unit: IUnit): void {
+        this.shoot(unit);
+    }
+
+    alive(): boolean {
+        return true;
+    }
+
+    shoot(unit: IUnit): void {
+        unit.hurt(1);
+    }
+    hurt(damage: number): void {
+        this.hitpoints -= damage;
+    }
+}
+export class Zealot implements IUnit {
+    hitpoints = 2;
+    attack(unit: IUnit): void {
+        this.claw(unit);
+    }
+
+    alive(): boolean {
+        return true;
+    }
+
+    claw(unit: IUnit): void {
+        unit.hurt(2);
+    }
+
+    hurt(damage: number): void {
+        this.hitpoints -= damage;
+    }
+
+    hitpointBar(): string {
+        if (this.hitpoints === 2) {
+            return "full";
+        }
+        return "not full";
+    }
+}
\ No newline at end of file
61b6816 mutation tests and coding agents
diff --git a/.github/copilot-instructions.md b/.github/copilot-instructions.md
new file mode 100644
index 0000000..f65982a
--- /dev/null
+++ b/.github/copilot-instructions.md
@@ -0,0 +1,20 @@
+﻿---
+mode: 'agent'
+tools: ['runCommands']
+description: 'Suggest new test names based on mutation testing results.'
+---
+
+# Copilot Instructions: Suggest new test names based on mutation testing results
+
+Do not read the mutation.json file. Instead, read a single file from the `mutations` directory, which contains mutation testing results for a specific file. 
+Make sure you perform the instructions for each file in the `src/folder_1` directory.
+
+
+1. For every file in the `src/folder_1` directory:
+    - Open the file and extract production code information.
+    - If the file is a test file, extract test information.
+    - Retrieve mutation testing results for the file.
+    - Retrieve the test cases that are currently present for this file.
+    - Paste the bug results into `test/bugs_found_folder_1` directory, creating a new file named `bugs_kata_X.md`, where `X` is the file number (1, 2, 3, or 4).
+    - Paste the test cases into `test/bugs_found_folder_1` directory, creating a new file named `test_cases_X.ts`, where `X` is the file number (1, 2, 3, or 4).
+    - for each test case, only write the `describe` and `it` blocks, without the actual test implementation.
diff --git a/.nyc_output/a178a070-6923-49a4-8743-fa366a27a34e.json b/.nyc_output/a178a070-6923-49a4-8743-fa366a27a34e.json
deleted file mode 100644
index 93d5e2a..0000000
--- a/.nyc_output/a178a070-6923-49a4-8743-fa366a27a34e.json
+++ /dev/null
@@ -1 +0,0 @@
-{"C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\test_kata_1.spec.js":{"path":"C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\test_kata_1.spec.js","statementMap":{"0":{"start":{"line":3,"column":0},"end":{"line":26,"column":3}},"1":{"start":{"line":4,"column":4},"end":{"line":6,"column":7}},"2":{"start":{"line":5,"column":8},"end":{"line":5,"column":50}},"3":{"start":{"line":7,"column":4},"end":{"line":11,"column":7}},"4":{"start":{"line":8,"column":24},"end":{"line":8,"column":52}},"5":{"start":{"line":9,"column":8},"end":{"line":9,"column":47}},"6":{"start":{"line":10,"column":8},"end":{"line":10,"column":44}},"7":{"start":{"line":12,"column":4},"end":{"line":18,"column":7}},"8":{"start":{"line":13,"column":23},"end":{"line":13,"column":44}},"9":{"start":{"line":14,"column":8},"end":{"line":14,"column":24}},"10":{"start":{"line":15,"column":25},"end":{"line":15,"column":40}},"11":{"start":{"line":16,"column":8},"end":{"line":16,"column":48}},"12":{"start":{"line":17,"column":8},"end":{"line":17,"column":45}},"13":{"start":{"line":19,"column":4},"end":{"line":25,"column":7}},"14":{"start":{"line":20,"column":23},"end":{"line":20,"column":44}},"15":{"start":{"line":21,"column":26},"end":{"line":21,"column":41}},"16":{"start":{"line":22,"column":27},"end":{"line":22,"column":42}},"17":{"start":{"line":23,"column":26},"end":{"line":23,"column":41}},"18":{"start":{"line":24,"column":8},"end":{"line":24,"column":43}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":3,"column":29},"end":{"line":3,"column":30}},"loc":{"start":{"line":3,"column":41},"end":{"line":26,"column":1}},"line":3},"1":{"name":"(anonymous_1)","decl":{"start":{"line":4,"column":36},"end":{"line":4,"column":37}},"loc":{"start":{"line":4,"column":48},"end":{"line":6,"column":5}},"line":4},"2":{"name":"(anonymous_2)","decl":{"start":{"line":7,"column":61},"end":{"line":7,"column":62}},"loc":{"start":{"line":7,"column":67},"end":{"line":11,"column":5}},"line":7},"3":{"name":"(anonymous_3)","decl":{"start":{"line":12,"column":76},"end":{"line":12,"column":77}},"loc":{"start":{"line":12,"column":82},"end":{"line":18,"column":5}},"line":12},"4":{"name":"(anonymous_4)","decl":{"start":{"line":19,"column":78},"end":{"line":19,"column":79}},"loc":{"start":{"line":19,"column":84},"end":{"line":25,"column":5}},"line":19}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1},"f":{"0":1,"1":1,"2":1,"3":1,"4":1},"b":{},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"a18f9076a661934f1e55bb8ac7292bcb833f9c19","contentHash":"5e4a47863db41fc76d7adac045256125de0e83dc3a12f7e5b547e88637bf410d"},"C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\test_kata_2.spec.js":{"path":"C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\test_kata_2.spec.js","statementMap":{"0":{"start":{"line":3,"column":0},"end":{"line":44,"column":3}},"1":{"start":{"line":4,"column":4},"end":{"line":12,"column":7}},"2":{"start":{"line":5,"column":25},"end":{"line":9,"column":9}},"3":{"start":{"line":10,"column":26},"end":{"line":10,"column":41}},"4":{"start":{"line":11,"column":8},"end":{"line":11,"column":35}},"5":{"start":{"line":13,"column":4},"end":{"line":28,"column":8}},"6":{"start":{"line":19,"column":41},"end":{"line":28,"column":6}},"7":{"start":{"line":21,"column":25},"end":{"line":25,"column":9}},"8":{"start":{"line":26,"column":26},"end":{"line":26,"column":41}},"9":{"start":{"line":27,"column":8},"end":{"line":27,"column":48}},"10":{"start":{"line":29,"column":4},"end":{"line":43,"column":8}},"11":{"start":{"line":35,"column":40},"end":{"line":43,"column":6}},"12":{"start":{"line":36,"column":25},"end":{"line":40,"column":9}},"13":{"start":{"line":41,"column":26},"end":{"line":41,"column":41}},"14":{"start":{"line":42,"column":8},"end":{"line":42,"column":67}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":3,"column":21},"end":{"line":3,"column":22}},"loc":{"start":{"line":3,"column":33},"end":{"line":44,"column":1}},"line":3},"1":{"name":"(anonymous_1)","decl":{"start":{"line":4,"column":116},"end":{"line":4,"column":117}},"loc":{"start":{"line":4,"column":128},"end":{"line":12,"column":5}},"line":4},"2":{"name":"(anonymous_2)","decl":{"start":{"line":19,"column":14},"end":{"line":19,"column":15}},"loc":{"start":{"line":19,"column":41},"end":{"line":28,"column":6}},"line":19},"3":{"name":"(anonymous_3)","decl":{"start":{"line":20,"column":37},"end":{"line":20,"column":38}},"loc":{"start":{"line":20,"column":49},"end":{"line":28,"column":5}},"line":20},"4":{"name":"(anonymous_4)","decl":{"start":{"line":35,"column":14},"end":{"line":35,"column":15}},"loc":{"start":{"line":35,"column":40},"end":{"line":43,"column":6}},"line":35},"5":{"name":"(anonymous_5)","decl":{"start":{"line":35,"column":163},"end":{"line":35,"column":164}},"loc":{"start":{"line":35,"column":175},"end":{"line":43,"column":5}},"line":35}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":5,"7":5,"8":5,"9":5,"10":1,"11":5,"12":5,"13":5,"14":5},"f":{"0":1,"1":1,"2":5,"3":5,"4":5,"5":5},"b":{},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"6fa6a6037ebf8409fa20c6b4497eb7be00031ce0","contentHash":"94b66b17559987e46f93c2ff354d7c877877a970d07202757d1a7e62dcb13823"},"C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\test_kata_3.spec.js":{"path":"C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\test_kata_3.spec.js","statementMap":{"0":{"start":{"line":3,"column":0},"end":{"line":29,"column":3}},"1":{"start":{"line":4,"column":4},"end":{"line":13,"column":7}},"2":{"start":{"line":5,"column":23},"end":{"line":5,"column":35}},"3":{"start":{"line":6,"column":25},"end":{"line":6,"column":39}},"4":{"start":{"line":7,"column":8},"end":{"line":7,"column":29}},"5":{"start":{"line":8,"column":8},"end":{"line":8,"column":31}},"6":{"start":{"line":9,"column":8},"end":{"line":9,"column":32}},"7":{"start":{"line":10,"column":8},"end":{"line":10,"column":31}},"8":{"start":{"line":11,"column":8},"end":{"line":11,"column":43}},"9":{"start":{"line":12,"column":8},"end":{"line":12,"column":46}},"10":{"start":{"line":14,"column":4},"end":{"line":22,"column":7}},"11":{"start":{"line":15,"column":23},"end":{"line":15,"column":35}},"12":{"start":{"line":16,"column":25},"end":{"line":16,"column":39}},"13":{"start":{"line":17,"column":8},"end":{"line":17,"column":29}},"14":{"start":{"line":18,"column":8},"end":{"line":18,"column":30}},"15":{"start":{"line":19,"column":8},"end":{"line":19,"column":32}},"16":{"start":{"line":20,"column":8},"end":{"line":20,"column":30}},"17":{"start":{"line":21,"column":8},"end":{"line":21,"column":43}},"18":{"start":{"line":23,"column":4},"end":{"line":28,"column":7}},"19":{"start":{"line":24,"column":23},"end":{"line":24,"column":35}},"20":{"start":{"line":25,"column":25},"end":{"line":25,"column":39}},"21":{"start":{"line":26,"column":8},"end":{"line":26,"column":32}},"22":{"start":{"line":27,"column":8},"end":{"line":27,"column":51}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":3,"column":26},"end":{"line":3,"column":27}},"loc":{"start":{"line":3,"column":32},"end":{"line":29,"column":1}},"line":3},"1":{"name":"(anonymous_1)","decl":{"start":{"line":4,"column":68},"end":{"line":4,"column":69}},"loc":{"start":{"line":4,"column":74},"end":{"line":13,"column":5}},"line":4},"2":{"name":"(anonymous_2)","decl":{"start":{"line":14,"column":68},"end":{"line":14,"column":69}},"loc":{"start":{"line":14,"column":74},"end":{"line":22,"column":5}},"line":14},"3":{"name":"(anonymous_3)","decl":{"start":{"line":23,"column":69},"end":{"line":23,"column":70}},"loc":{"start":{"line":23,"column":75},"end":{"line":28,"column":5}},"line":23}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1},"f":{"0":1,"1":1,"2":1,"3":1},"b":{},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"cc0a8397d69be7630c30ad60df2f5ac0d58f10d9","contentHash":"073e2e62892f0bd000a20edcc957999734b86d5bb07209fcfd14d4810bfd160e"}}
\ No newline at end of file
diff --git a/.nyc_output/b6e82881-edeb-44c7-a93f-77415b654ced.json b/.nyc_output/b6e82881-edeb-44c7-a93f-77415b654ced.json
new file mode 100644
index 0000000..4a94969
--- /dev/null
+++ b/.nyc_output/b6e82881-edeb-44c7-a93f-77415b654ced.json
@@ -0,0 +1 @@
+{"C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_1.spec.js":{"path":"C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_1.spec.js","statementMap":{"0":{"start":{"line":3,"column":0},"end":{"line":26,"column":3}},"1":{"start":{"line":4,"column":4},"end":{"line":6,"column":7}},"2":{"start":{"line":5,"column":8},"end":{"line":5,"column":50}},"3":{"start":{"line":7,"column":4},"end":{"line":11,"column":7}},"4":{"start":{"line":8,"column":24},"end":{"line":8,"column":52}},"5":{"start":{"line":9,"column":8},"end":{"line":9,"column":47}},"6":{"start":{"line":10,"column":8},"end":{"line":10,"column":44}},"7":{"start":{"line":12,"column":4},"end":{"line":18,"column":7}},"8":{"start":{"line":13,"column":23},"end":{"line":13,"column":44}},"9":{"start":{"line":14,"column":8},"end":{"line":14,"column":24}},"10":{"start":{"line":15,"column":25},"end":{"line":15,"column":40}},"11":{"start":{"line":16,"column":8},"end":{"line":16,"column":48}},"12":{"start":{"line":17,"column":8},"end":{"line":17,"column":45}},"13":{"start":{"line":19,"column":4},"end":{"line":25,"column":7}},"14":{"start":{"line":20,"column":23},"end":{"line":20,"column":44}},"15":{"start":{"line":21,"column":26},"end":{"line":21,"column":41}},"16":{"start":{"line":22,"column":27},"end":{"line":22,"column":42}},"17":{"start":{"line":23,"column":26},"end":{"line":23,"column":41}},"18":{"start":{"line":24,"column":8},"end":{"line":24,"column":43}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":3,"column":29},"end":{"line":3,"column":30}},"loc":{"start":{"line":3,"column":41},"end":{"line":26,"column":1}},"line":3},"1":{"name":"(anonymous_1)","decl":{"start":{"line":4,"column":36},"end":{"line":4,"column":37}},"loc":{"start":{"line":4,"column":48},"end":{"line":6,"column":5}},"line":4},"2":{"name":"(anonymous_2)","decl":{"start":{"line":7,"column":61},"end":{"line":7,"column":62}},"loc":{"start":{"line":7,"column":67},"end":{"line":11,"column":5}},"line":7},"3":{"name":"(anonymous_3)","decl":{"start":{"line":12,"column":76},"end":{"line":12,"column":77}},"loc":{"start":{"line":12,"column":82},"end":{"line":18,"column":5}},"line":12},"4":{"name":"(anonymous_4)","decl":{"start":{"line":19,"column":78},"end":{"line":19,"column":79}},"loc":{"start":{"line":19,"column":84},"end":{"line":25,"column":5}},"line":19}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1},"f":{"0":1,"1":1,"2":1,"3":1,"4":1},"b":{},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"bba829822d97ac5368991c5cde3660c4e0816bd4","contentHash":"e7f226868a8ab81e77d1ff80496738022742cc91d5f1c2e603750e262f4998b7"},"C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_10.spec.js":{"path":"C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_10.spec.js","statementMap":{"0":{"start":{"line":3,"column":0},"end":{"line":26,"column":3}},"1":{"start":{"line":4,"column":4},"end":{"line":6,"column":7}},"2":{"start":{"line":5,"column":8},"end":{"line":5,"column":50}},"3":{"start":{"line":7,"column":4},"end":{"line":11,"column":7}},"4":{"start":{"line":8,"column":24},"end":{"line":8,"column":52}},"5":{"start":{"line":9,"column":8},"end":{"line":9,"column":47}},"6":{"start":{"line":10,"column":8},"end":{"line":10,"column":44}},"7":{"start":{"line":12,"column":4},"end":{"line":18,"column":7}},"8":{"start":{"line":13,"column":23},"end":{"line":13,"column":44}},"9":{"start":{"line":14,"column":8},"end":{"line":14,"column":24}},"10":{"start":{"line":15,"column":25},"end":{"line":15,"column":40}},"11":{"start":{"line":16,"column":8},"end":{"line":16,"column":48}},"12":{"start":{"line":17,"column":8},"end":{"line":17,"column":45}},"13":{"start":{"line":19,"column":4},"end":{"line":25,"column":7}},"14":{"start":{"line":20,"column":23},"end":{"line":20,"column":44}},"15":{"start":{"line":21,"column":26},"end":{"line":21,"column":41}},"16":{"start":{"line":22,"column":27},"end":{"line":22,"column":42}},"17":{"start":{"line":23,"column":26},"end":{"line":23,"column":41}},"18":{"start":{"line":24,"column":8},"end":{"line":24,"column":43}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":3,"column":34},"end":{"line":3,"column":35}},"loc":{"start":{"line":3,"column":46},"end":{"line":26,"column":1}},"line":3},"1":{"name":"(anonymous_1)","decl":{"start":{"line":4,"column":36},"end":{"line":4,"column":37}},"loc":{"start":{"line":4,"column":48},"end":{"line":6,"column":5}},"line":4},"2":{"name":"(anonymous_2)","decl":{"start":{"line":7,"column":61},"end":{"line":7,"column":62}},"loc":{"start":{"line":7,"column":67},"end":{"line":11,"column":5}},"line":7},"3":{"name":"(anonymous_3)","decl":{"start":{"line":12,"column":76},"end":{"line":12,"column":77}},"loc":{"start":{"line":12,"column":82},"end":{"line":18,"column":5}},"line":12},"4":{"name":"(anonymous_4)","decl":{"start":{"line":19,"column":78},"end":{"line":19,"column":79}},"loc":{"start":{"line":19,"column":84},"end":{"line":25,"column":5}},"line":19}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1},"f":{"0":1,"1":1,"2":1,"3":1,"4":1},"b":{},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"663e516dea8467528005c895013987c2a0cce82e","contentHash":"d53a5761b62bd285da9472d0c119fd55dad0e381b6f78f57588427a2932e8f08"},"C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_11.spec.js":{"path":"C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_11.spec.js","statementMap":{"0":{"start":{"line":3,"column":0},"end":{"line":44,"column":3}},"1":{"start":{"line":4,"column":4},"end":{"line":12,"column":7}},"2":{"start":{"line":5,"column":25},"end":{"line":9,"column":9}},"3":{"start":{"line":10,"column":26},"end":{"line":10,"column":41}},"4":{"start":{"line":11,"column":8},"end":{"line":11,"column":35}},"5":{"start":{"line":13,"column":4},"end":{"line":28,"column":8}},"6":{"start":{"line":19,"column":41},"end":{"line":28,"column":6}},"7":{"start":{"line":21,"column":25},"end":{"line":25,"column":9}},"8":{"start":{"line":26,"column":26},"end":{"line":26,"column":41}},"9":{"start":{"line":27,"column":8},"end":{"line":27,"column":48}},"10":{"start":{"line":29,"column":4},"end":{"line":43,"column":8}},"11":{"start":{"line":35,"column":40},"end":{"line":43,"column":6}},"12":{"start":{"line":36,"column":25},"end":{"line":40,"column":9}},"13":{"start":{"line":41,"column":26},"end":{"line":41,"column":41}},"14":{"start":{"line":42,"column":8},"end":{"line":42,"column":67}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":3,"column":26},"end":{"line":3,"column":27}},"loc":{"start":{"line":3,"column":38},"end":{"line":44,"column":1}},"line":3},"1":{"name":"(anonymous_1)","decl":{"start":{"line":4,"column":116},"end":{"line":4,"column":117}},"loc":{"start":{"line":4,"column":128},"end":{"line":12,"column":5}},"line":4},"2":{"name":"(anonymous_2)","decl":{"start":{"line":19,"column":14},"end":{"line":19,"column":15}},"loc":{"start":{"line":19,"column":41},"end":{"line":28,"column":6}},"line":19},"3":{"name":"(anonymous_3)","decl":{"start":{"line":20,"column":37},"end":{"line":20,"column":38}},"loc":{"start":{"line":20,"column":49},"end":{"line":28,"column":5}},"line":20},"4":{"name":"(anonymous_4)","decl":{"start":{"line":35,"column":14},"end":{"line":35,"column":15}},"loc":{"start":{"line":35,"column":40},"end":{"line":43,"column":6}},"line":35},"5":{"name":"(anonymous_5)","decl":{"start":{"line":35,"column":163},"end":{"line":35,"column":164}},"loc":{"start":{"line":35,"column":175},"end":{"line":43,"column":5}},"line":35}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":5,"7":5,"8":5,"9":5,"10":1,"11":5,"12":5,"13":5,"14":5},"f":{"0":1,"1":1,"2":5,"3":5,"4":5,"5":5},"b":{},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"951530a2ee054bdae933e9dac11692cb36b2acb3","contentHash":"f7b53b6011cf792bd897d8f06c0f68667c3594a42008b037584741a9cf474902"},"C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_12.spec.js":{"path":"C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_12.spec.js","statementMap":{"0":{"start":{"line":3,"column":0},"end":{"line":29,"column":3}},"1":{"start":{"line":4,"column":4},"end":{"line":13,"column":7}},"2":{"start":{"line":5,"column":23},"end":{"line":5,"column":35}},"3":{"start":{"line":6,"column":25},"end":{"line":6,"column":39}},"4":{"start":{"line":7,"column":8},"end":{"line":7,"column":29}},"5":{"start":{"line":8,"column":8},"end":{"line":8,"column":31}},"6":{"start":{"line":9,"column":8},"end":{"line":9,"column":32}},"7":{"start":{"line":10,"column":8},"end":{"line":10,"column":31}},"8":{"start":{"line":11,"column":8},"end":{"line":11,"column":43}},"9":{"start":{"line":12,"column":8},"end":{"line":12,"column":46}},"10":{"start":{"line":14,"column":4},"end":{"line":22,"column":7}},"11":{"start":{"line":15,"column":23},"end":{"line":15,"column":35}},"12":{"start":{"line":16,"column":25},"end":{"line":16,"column":39}},"13":{"start":{"line":17,"column":8},"end":{"line":17,"column":29}},"14":{"start":{"line":18,"column":8},"end":{"line":18,"column":30}},"15":{"start":{"line":19,"column":8},"end":{"line":19,"column":32}},"16":{"start":{"line":20,"column":8},"end":{"line":20,"column":30}},"17":{"start":{"line":21,"column":8},"end":{"line":21,"column":43}},"18":{"start":{"line":23,"column":4},"end":{"line":28,"column":7}},"19":{"start":{"line":24,"column":23},"end":{"line":24,"column":35}},"20":{"start":{"line":25,"column":25},"end":{"line":25,"column":39}},"21":{"start":{"line":26,"column":8},"end":{"line":26,"column":32}},"22":{"start":{"line":27,"column":8},"end":{"line":27,"column":51}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":3,"column":31},"end":{"line":3,"column":32}},"loc":{"start":{"line":3,"column":37},"end":{"line":29,"column":1}},"line":3},"1":{"name":"(anonymous_1)","decl":{"start":{"line":4,"column":68},"end":{"line":4,"column":69}},"loc":{"start":{"line":4,"column":74},"end":{"line":13,"column":5}},"line":4},"2":{"name":"(anonymous_2)","decl":{"start":{"line":14,"column":68},"end":{"line":14,"column":69}},"loc":{"start":{"line":14,"column":74},"end":{"line":22,"column":5}},"line":14},"3":{"name":"(anonymous_3)","decl":{"start":{"line":23,"column":69},"end":{"line":23,"column":70}},"loc":{"start":{"line":23,"column":75},"end":{"line":28,"column":5}},"line":23}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1},"f":{"0":1,"1":1,"2":1,"3":1},"b":{},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"c905b7762920d40dad38401a3e36b44d8a6af5fa","contentHash":"558c47d1ba16157f66a21097e5e9e7f7615e11cc6b5e3b4cbb8753a0fd43cfa9"},"C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_13.spec.js":{"path":"C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_13.spec.js","statementMap":{"0":{"start":{"line":3,"column":0},"end":{"line":26,"column":3}},"1":{"start":{"line":4,"column":4},"end":{"line":6,"column":7}},"2":{"start":{"line":5,"column":8},"end":{"line":5,"column":50}},"3":{"start":{"line":7,"column":4},"end":{"line":11,"column":7}},"4":{"start":{"line":8,"column":24},"end":{"line":8,"column":52}},"5":{"start":{"line":9,"column":8},"end":{"line":9,"column":47}},"6":{"start":{"line":10,"column":8},"end":{"line":10,"column":44}},"7":{"start":{"line":12,"column":4},"end":{"line":18,"column":7}},"8":{"start":{"line":13,"column":23},"end":{"line":13,"column":44}},"9":{"start":{"line":14,"column":8},"end":{"line":14,"column":24}},"10":{"start":{"line":15,"column":25},"end":{"line":15,"column":40}},"11":{"start":{"line":16,"column":8},"end":{"line":16,"column":48}},"12":{"start":{"line":17,"column":8},"end":{"line":17,"column":45}},"13":{"start":{"line":19,"column":4},"end":{"line":25,"column":7}},"14":{"start":{"line":20,"column":23},"end":{"line":20,"column":44}},"15":{"start":{"line":21,"column":26},"end":{"line":21,"column":41}},"16":{"start":{"line":22,"column":27},"end":{"line":22,"column":42}},"17":{"start":{"line":23,"column":26},"end":{"line":23,"column":41}},"18":{"start":{"line":24,"column":8},"end":{"line":24,"column":43}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":3,"column":34},"end":{"line":3,"column":35}},"loc":{"start":{"line":3,"column":46},"end":{"line":26,"column":1}},"line":3},"1":{"name":"(anonymous_1)","decl":{"start":{"line":4,"column":36},"end":{"line":4,"column":37}},"loc":{"start":{"line":4,"column":48},"end":{"line":6,"column":5}},"line":4},"2":{"name":"(anonymous_2)","decl":{"start":{"line":7,"column":61},"end":{"line":7,"column":62}},"loc":{"start":{"line":7,"column":67},"end":{"line":11,"column":5}},"line":7},"3":{"name":"(anonymous_3)","decl":{"start":{"line":12,"column":76},"end":{"line":12,"column":77}},"loc":{"start":{"line":12,"column":82},"end":{"line":18,"column":5}},"line":12},"4":{"name":"(anonymous_4)","decl":{"start":{"line":19,"column":78},"end":{"line":19,"column":79}},"loc":{"start":{"line":19,"column":84},"end":{"line":25,"column":5}},"line":19}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1},"f":{"0":1,"1":1,"2":1,"3":1,"4":1},"b":{},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"d952d2cdd6ab4bcb49777e3286421a78aa2289c1","contentHash":"d3702bdbcc098f837446b1d3c3d2d7c8cfff8371b1dc6442bc9ff41d7498158b"},"C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_14.spec.js":{"path":"C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_14.spec.js","statementMap":{"0":{"start":{"line":3,"column":0},"end":{"line":44,"column":3}},"1":{"start":{"line":4,"column":4},"end":{"line":12,"column":7}},"2":{"start":{"line":5,"column":25},"end":{"line":9,"column":9}},"3":{"start":{"line":10,"column":26},"end":{"line":10,"column":41}},"4":{"start":{"line":11,"column":8},"end":{"line":11,"column":35}},"5":{"start":{"line":13,"column":4},"end":{"line":28,"column":8}},"6":{"start":{"line":19,"column":41},"end":{"line":28,"column":6}},"7":{"start":{"line":21,"column":25},"end":{"line":25,"column":9}},"8":{"start":{"line":26,"column":26},"end":{"line":26,"column":41}},"9":{"start":{"line":27,"column":8},"end":{"line":27,"column":48}},"10":{"start":{"line":29,"column":4},"end":{"line":43,"column":8}},"11":{"start":{"line":35,"column":40},"end":{"line":43,"column":6}},"12":{"start":{"line":36,"column":25},"end":{"line":40,"column":9}},"13":{"start":{"line":41,"column":26},"end":{"line":41,"column":41}},"14":{"start":{"line":42,"column":8},"end":{"line":42,"column":67}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":3,"column":26},"end":{"line":3,"column":27}},"loc":{"start":{"line":3,"column":38},"end":{"line":44,"column":1}},"line":3},"1":{"name":"(anonymous_1)","decl":{"start":{"line":4,"column":116},"end":{"line":4,"column":117}},"loc":{"start":{"line":4,"column":128},"end":{"line":12,"column":5}},"line":4},"2":{"name":"(anonymous_2)","decl":{"start":{"line":19,"column":14},"end":{"line":19,"column":15}},"loc":{"start":{"line":19,"column":41},"end":{"line":28,"column":6}},"line":19},"3":{"name":"(anonymous_3)","decl":{"start":{"line":20,"column":37},"end":{"line":20,"column":38}},"loc":{"start":{"line":20,"column":49},"end":{"line":28,"column":5}},"line":20},"4":{"name":"(anonymous_4)","decl":{"start":{"line":35,"column":14},"end":{"line":35,"column":15}},"loc":{"start":{"line":35,"column":40},"end":{"line":43,"column":6}},"line":35},"5":{"name":"(anonymous_5)","decl":{"start":{"line":35,"column":163},"end":{"line":35,"column":164}},"loc":{"start":{"line":35,"column":175},"end":{"line":43,"column":5}},"line":35}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":5,"7":5,"8":5,"9":5,"10":1,"11":5,"12":5,"13":5,"14":5},"f":{"0":1,"1":1,"2":5,"3":5,"4":5,"5":5},"b":{},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"d53cf0067d9afc1d7fbad0e16e6fc20d8e75dda3","contentHash":"354e5c75c5556e7a903089d7979081cb351672bed6e5733b0a04a0da89443434"},"C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_15.spec.js":{"path":"C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_15.spec.js","statementMap":{"0":{"start":{"line":3,"column":0},"end":{"line":29,"column":3}},"1":{"start":{"line":4,"column":4},"end":{"line":13,"column":7}},"2":{"start":{"line":5,"column":23},"end":{"line":5,"column":35}},"3":{"start":{"line":6,"column":25},"end":{"line":6,"column":39}},"4":{"start":{"line":7,"column":8},"end":{"line":7,"column":29}},"5":{"start":{"line":8,"column":8},"end":{"line":8,"column":31}},"6":{"start":{"line":9,"column":8},"end":{"line":9,"column":32}},"7":{"start":{"line":10,"column":8},"end":{"line":10,"column":31}},"8":{"start":{"line":11,"column":8},"end":{"line":11,"column":43}},"9":{"start":{"line":12,"column":8},"end":{"line":12,"column":46}},"10":{"start":{"line":14,"column":4},"end":{"line":22,"column":7}},"11":{"start":{"line":15,"column":23},"end":{"line":15,"column":35}},"12":{"start":{"line":16,"column":25},"end":{"line":16,"column":39}},"13":{"start":{"line":17,"column":8},"end":{"line":17,"column":29}},"14":{"start":{"line":18,"column":8},"end":{"line":18,"column":30}},"15":{"start":{"line":19,"column":8},"end":{"line":19,"column":32}},"16":{"start":{"line":20,"column":8},"end":{"line":20,"column":30}},"17":{"start":{"line":21,"column":8},"end":{"line":21,"column":43}},"18":{"start":{"line":23,"column":4},"end":{"line":28,"column":7}},"19":{"start":{"line":24,"column":23},"end":{"line":24,"column":35}},"20":{"start":{"line":25,"column":25},"end":{"line":25,"column":39}},"21":{"start":{"line":26,"column":8},"end":{"line":26,"column":32}},"22":{"start":{"line":27,"column":8},"end":{"line":27,"column":51}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":3,"column":31},"end":{"line":3,"column":32}},"loc":{"start":{"line":3,"column":37},"end":{"line":29,"column":1}},"line":3},"1":{"name":"(anonymous_1)","decl":{"start":{"line":4,"column":68},"end":{"line":4,"column":69}},"loc":{"start":{"line":4,"column":74},"end":{"line":13,"column":5}},"line":4},"2":{"name":"(anonymous_2)","decl":{"start":{"line":14,"column":68},"end":{"line":14,"column":69}},"loc":{"start":{"line":14,"column":74},"end":{"line":22,"column":5}},"line":14},"3":{"name":"(anonymous_3)","decl":{"start":{"line":23,"column":69},"end":{"line":23,"column":70}},"loc":{"start":{"line":23,"column":75},"end":{"line":28,"column":5}},"line":23}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1},"f":{"0":1,"1":1,"2":1,"3":1},"b":{},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"5a87305974ef6a31c6b791281a72aef697236a59","contentHash":"a8b4912183165cfe822ba1a2bb010985eca3efa35ead2e04de3e1b4c390ee3ec"},"C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_16.spec.js":{"path":"C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_16.spec.js","statementMap":{"0":{"start":{"line":3,"column":0},"end":{"line":26,"column":3}},"1":{"start":{"line":4,"column":4},"end":{"line":6,"column":7}},"2":{"start":{"line":5,"column":8},"end":{"line":5,"column":50}},"3":{"start":{"line":7,"column":4},"end":{"line":11,"column":7}},"4":{"start":{"line":8,"column":24},"end":{"line":8,"column":52}},"5":{"start":{"line":9,"column":8},"end":{"line":9,"column":47}},"6":{"start":{"line":10,"column":8},"end":{"line":10,"column":44}},"7":{"start":{"line":12,"column":4},"end":{"line":18,"column":7}},"8":{"start":{"line":13,"column":23},"end":{"line":13,"column":44}},"9":{"start":{"line":14,"column":8},"end":{"line":14,"column":24}},"10":{"start":{"line":15,"column":25},"end":{"line":15,"column":40}},"11":{"start":{"line":16,"column":8},"end":{"line":16,"column":48}},"12":{"start":{"line":17,"column":8},"end":{"line":17,"column":45}},"13":{"start":{"line":19,"column":4},"end":{"line":25,"column":7}},"14":{"start":{"line":20,"column":23},"end":{"line":20,"column":44}},"15":{"start":{"line":21,"column":26},"end":{"line":21,"column":41}},"16":{"start":{"line":22,"column":27},"end":{"line":22,"column":42}},"17":{"start":{"line":23,"column":26},"end":{"line":23,"column":41}},"18":{"start":{"line":24,"column":8},"end":{"line":24,"column":43}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":3,"column":33},"end":{"line":3,"column":34}},"loc":{"start":{"line":3,"column":45},"end":{"line":26,"column":1}},"line":3},"1":{"name":"(anonymous_1)","decl":{"start":{"line":4,"column":36},"end":{"line":4,"column":37}},"loc":{"start":{"line":4,"column":48},"end":{"line":6,"column":5}},"line":4},"2":{"name":"(anonymous_2)","decl":{"start":{"line":7,"column":61},"end":{"line":7,"column":62}},"loc":{"start":{"line":7,"column":67},"end":{"line":11,"column":5}},"line":7},"3":{"name":"(anonymous_3)","decl":{"start":{"line":12,"column":76},"end":{"line":12,"column":77}},"loc":{"start":{"line":12,"column":82},"end":{"line":18,"column":5}},"line":12},"4":{"name":"(anonymous_4)","decl":{"start":{"line":19,"column":78},"end":{"line":19,"column":79}},"loc":{"start":{"line":19,"column":84},"end":{"line":25,"column":5}},"line":19}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1},"f":{"0":1,"1":1,"2":1,"3":1,"4":1},"b":{},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"c0068f3a9552c82d763759e00107fb31e3ba87e5","contentHash":"890a53c84376d1491ff95394447beae30aaf057a48b48605e9e8660a6cda6362"},"C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_17.spec.js":{"path":"C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_17.spec.js","statementMap":{"0":{"start":{"line":3,"column":0},"end":{"line":44,"column":3}},"1":{"start":{"line":4,"column":4},"end":{"line":12,"column":7}},"2":{"start":{"line":5,"column":25},"end":{"line":9,"column":9}},"3":{"start":{"line":10,"column":26},"end":{"line":10,"column":41}},"4":{"start":{"line":11,"column":8},"end":{"line":11,"column":35}},"5":{"start":{"line":13,"column":4},"end":{"line":28,"column":8}},"6":{"start":{"line":19,"column":41},"end":{"line":28,"column":6}},"7":{"start":{"line":21,"column":25},"end":{"line":25,"column":9}},"8":{"start":{"line":26,"column":26},"end":{"line":26,"column":41}},"9":{"start":{"line":27,"column":8},"end":{"line":27,"column":48}},"10":{"start":{"line":29,"column":4},"end":{"line":43,"column":8}},"11":{"start":{"line":35,"column":40},"end":{"line":43,"column":6}},"12":{"start":{"line":36,"column":25},"end":{"line":40,"column":9}},"13":{"start":{"line":41,"column":26},"end":{"line":41,"column":41}},"14":{"start":{"line":42,"column":8},"end":{"line":42,"column":67}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":3,"column":25},"end":{"line":3,"column":26}},"loc":{"start":{"line":3,"column":37},"end":{"line":44,"column":1}},"line":3},"1":{"name":"(anonymous_1)","decl":{"start":{"line":4,"column":116},"end":{"line":4,"column":117}},"loc":{"start":{"line":4,"column":128},"end":{"line":12,"column":5}},"line":4},"2":{"name":"(anonymous_2)","decl":{"start":{"line":19,"column":14},"end":{"line":19,"column":15}},"loc":{"start":{"line":19,"column":41},"end":{"line":28,"column":6}},"line":19},"3":{"name":"(anonymous_3)","decl":{"start":{"line":20,"column":37},"end":{"line":20,"column":38}},"loc":{"start":{"line":20,"column":49},"end":{"line":28,"column":5}},"line":20},"4":{"name":"(anonymous_4)","decl":{"start":{"line":35,"column":14},"end":{"line":35,"column":15}},"loc":{"start":{"line":35,"column":40},"end":{"line":43,"column":6}},"line":35},"5":{"name":"(anonymous_5)","decl":{"start":{"line":35,"column":163},"end":{"line":35,"column":164}},"loc":{"start":{"line":35,"column":175},"end":{"line":43,"column":5}},"line":35}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":5,"7":5,"8":5,"9":5,"10":1,"11":5,"12":5,"13":5,"14":5},"f":{"0":1,"1":1,"2":5,"3":5,"4":5,"5":5},"b":{},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"cb5642102481fe47a9d6c60fbdb2c9af501dde23","contentHash":"d67857fcd4cb1a8fdea1beadbe5367dac794502942d1172d3ef2a9da1b863c05"},"C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_18.spec.js":{"path":"C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_18.spec.js","statementMap":{"0":{"start":{"line":3,"column":0},"end":{"line":29,"column":3}},"1":{"start":{"line":4,"column":4},"end":{"line":13,"column":7}},"2":{"start":{"line":5,"column":23},"end":{"line":5,"column":35}},"3":{"start":{"line":6,"column":25},"end":{"line":6,"column":39}},"4":{"start":{"line":7,"column":8},"end":{"line":7,"column":29}},"5":{"start":{"line":8,"column":8},"end":{"line":8,"column":31}},"6":{"start":{"line":9,"column":8},"end":{"line":9,"column":32}},"7":{"start":{"line":10,"column":8},"end":{"line":10,"column":31}},"8":{"start":{"line":11,"column":8},"end":{"line":11,"column":43}},"9":{"start":{"line":12,"column":8},"end":{"line":12,"column":46}},"10":{"start":{"line":14,"column":4},"end":{"line":22,"column":7}},"11":{"start":{"line":15,"column":23},"end":{"line":15,"column":35}},"12":{"start":{"line":16,"column":25},"end":{"line":16,"column":39}},"13":{"start":{"line":17,"column":8},"end":{"line":17,"column":29}},"14":{"start":{"line":18,"column":8},"end":{"line":18,"column":30}},"15":{"start":{"line":19,"column":8},"end":{"line":19,"column":32}},"16":{"start":{"line":20,"column":8},"end":{"line":20,"column":30}},"17":{"start":{"line":21,"column":8},"end":{"line":21,"column":43}},"18":{"start":{"line":23,"column":4},"end":{"line":28,"column":7}},"19":{"start":{"line":24,"column":23},"end":{"line":24,"column":35}},"20":{"start":{"line":25,"column":25},"end":{"line":25,"column":39}},"21":{"start":{"line":26,"column":8},"end":{"line":26,"column":32}},"22":{"start":{"line":27,"column":8},"end":{"line":27,"column":51}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":3,"column":30},"end":{"line":3,"column":31}},"loc":{"start":{"line":3,"column":36},"end":{"line":29,"column":1}},"line":3},"1":{"name":"(anonymous_1)","decl":{"start":{"line":4,"column":68},"end":{"line":4,"column":69}},"loc":{"start":{"line":4,"column":74},"end":{"line":13,"column":5}},"line":4},"2":{"name":"(anonymous_2)","decl":{"start":{"line":14,"column":68},"end":{"line":14,"column":69}},"loc":{"start":{"line":14,"column":74},"end":{"line":22,"column":5}},"line":14},"3":{"name":"(anonymous_3)","decl":{"start":{"line":23,"column":69},"end":{"line":23,"column":70}},"loc":{"start":{"line":23,"column":75},"end":{"line":28,"column":5}},"line":23}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1},"f":{"0":1,"1":1,"2":1,"3":1},"b":{},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"2c3486ce34ab73dec9173639bd5fd46f22bd8442","contentHash":"6cf5533c08903f34851dcfd248695730133554a4b0a47962f6558a882c6e603e"},"C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_2.spec.js":{"path":"C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_2.spec.js","statementMap":{"0":{"start":{"line":3,"column":0},"end":{"line":44,"column":3}},"1":{"start":{"line":4,"column":4},"end":{"line":12,"column":7}},"2":{"start":{"line":5,"column":25},"end":{"line":9,"column":9}},"3":{"start":{"line":10,"column":26},"end":{"line":10,"column":41}},"4":{"start":{"line":11,"column":8},"end":{"line":11,"column":35}},"5":{"start":{"line":13,"column":4},"end":{"line":28,"column":8}},"6":{"start":{"line":19,"column":41},"end":{"line":28,"column":6}},"7":{"start":{"line":21,"column":25},"end":{"line":25,"column":9}},"8":{"start":{"line":26,"column":26},"end":{"line":26,"column":41}},"9":{"start":{"line":27,"column":8},"end":{"line":27,"column":48}},"10":{"start":{"line":29,"column":4},"end":{"line":43,"column":8}},"11":{"start":{"line":35,"column":40},"end":{"line":43,"column":6}},"12":{"start":{"line":36,"column":25},"end":{"line":40,"column":9}},"13":{"start":{"line":41,"column":26},"end":{"line":41,"column":41}},"14":{"start":{"line":42,"column":8},"end":{"line":42,"column":67}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":3,"column":21},"end":{"line":3,"column":22}},"loc":{"start":{"line":3,"column":33},"end":{"line":44,"column":1}},"line":3},"1":{"name":"(anonymous_1)","decl":{"start":{"line":4,"column":116},"end":{"line":4,"column":117}},"loc":{"start":{"line":4,"column":128},"end":{"line":12,"column":5}},"line":4},"2":{"name":"(anonymous_2)","decl":{"start":{"line":19,"column":14},"end":{"line":19,"column":15}},"loc":{"start":{"line":19,"column":41},"end":{"line":28,"column":6}},"line":19},"3":{"name":"(anonymous_3)","decl":{"start":{"line":20,"column":37},"end":{"line":20,"column":38}},"loc":{"start":{"line":20,"column":49},"end":{"line":28,"column":5}},"line":20},"4":{"name":"(anonymous_4)","decl":{"start":{"line":35,"column":14},"end":{"line":35,"column":15}},"loc":{"start":{"line":35,"column":40},"end":{"line":43,"column":6}},"line":35},"5":{"name":"(anonymous_5)","decl":{"start":{"line":35,"column":163},"end":{"line":35,"column":164}},"loc":{"start":{"line":35,"column":175},"end":{"line":43,"column":5}},"line":35}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":5,"7":5,"8":5,"9":5,"10":1,"11":5,"12":5,"13":5,"14":5},"f":{"0":1,"1":1,"2":5,"3":5,"4":5,"5":5},"b":{},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"280eafcf6a4bf41895fbfbadeda20cae43976859","contentHash":"73e294162b845f2e342b3ee866bb1211208e34a9b88518603dc86338081311eb"},"C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_3.spec.js":{"path":"C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_3.spec.js","statementMap":{"0":{"start":{"line":3,"column":0},"end":{"line":29,"column":3}},"1":{"start":{"line":4,"column":4},"end":{"line":13,"column":7}},"2":{"start":{"line":5,"column":23},"end":{"line":5,"column":35}},"3":{"start":{"line":6,"column":25},"end":{"line":6,"column":39}},"4":{"start":{"line":7,"column":8},"end":{"line":7,"column":29}},"5":{"start":{"line":8,"column":8},"end":{"line":8,"column":31}},"6":{"start":{"line":9,"column":8},"end":{"line":9,"column":32}},"7":{"start":{"line":10,"column":8},"end":{"line":10,"column":31}},"8":{"start":{"line":11,"column":8},"end":{"line":11,"column":43}},"9":{"start":{"line":12,"column":8},"end":{"line":12,"column":46}},"10":{"start":{"line":14,"column":4},"end":{"line":22,"column":7}},"11":{"start":{"line":15,"column":23},"end":{"line":15,"column":35}},"12":{"start":{"line":16,"column":25},"end":{"line":16,"column":39}},"13":{"start":{"line":17,"column":8},"end":{"line":17,"column":29}},"14":{"start":{"line":18,"column":8},"end":{"line":18,"column":30}},"15":{"start":{"line":19,"column":8},"end":{"line":19,"column":32}},"16":{"start":{"line":20,"column":8},"end":{"line":20,"column":30}},"17":{"start":{"line":21,"column":8},"end":{"line":21,"column":43}},"18":{"start":{"line":23,"column":4},"end":{"line":28,"column":7}},"19":{"start":{"line":24,"column":23},"end":{"line":24,"column":35}},"20":{"start":{"line":25,"column":25},"end":{"line":25,"column":39}},"21":{"start":{"line":26,"column":8},"end":{"line":26,"column":32}},"22":{"start":{"line":27,"column":8},"end":{"line":27,"column":51}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":3,"column":26},"end":{"line":3,"column":27}},"loc":{"start":{"line":3,"column":32},"end":{"line":29,"column":1}},"line":3},"1":{"name":"(anonymous_1)","decl":{"start":{"line":4,"column":68},"end":{"line":4,"column":69}},"loc":{"start":{"line":4,"column":74},"end":{"line":13,"column":5}},"line":4},"2":{"name":"(anonymous_2)","decl":{"start":{"line":14,"column":68},"end":{"line":14,"column":69}},"loc":{"start":{"line":14,"column":74},"end":{"line":22,"column":5}},"line":14},"3":{"name":"(anonymous_3)","decl":{"start":{"line":23,"column":69},"end":{"line":23,"column":70}},"loc":{"start":{"line":23,"column":75},"end":{"line":28,"column":5}},"line":23}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1},"f":{"0":1,"1":1,"2":1,"3":1},"b":{},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"8b5706b7e12e7645a80da29952f140c213f12c00","contentHash":"d602c5e9115920426f077e6d9bca99003b50864a2166ee7a5b59afe2f3037933"},"C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_4.spec.js":{"path":"C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_4.spec.js","statementMap":{"0":{"start":{"line":3,"column":0},"end":{"line":26,"column":3}},"1":{"start":{"line":4,"column":4},"end":{"line":6,"column":7}},"2":{"start":{"line":5,"column":8},"end":{"line":5,"column":50}},"3":{"start":{"line":7,"column":4},"end":{"line":11,"column":7}},"4":{"start":{"line":8,"column":24},"end":{"line":8,"column":52}},"5":{"start":{"line":9,"column":8},"end":{"line":9,"column":47}},"6":{"start":{"line":10,"column":8},"end":{"line":10,"column":44}},"7":{"start":{"line":12,"column":4},"end":{"line":18,"column":7}},"8":{"start":{"line":13,"column":23},"end":{"line":13,"column":44}},"9":{"start":{"line":14,"column":8},"end":{"line":14,"column":24}},"10":{"start":{"line":15,"column":25},"end":{"line":15,"column":40}},"11":{"start":{"line":16,"column":8},"end":{"line":16,"column":48}},"12":{"start":{"line":17,"column":8},"end":{"line":17,"column":45}},"13":{"start":{"line":19,"column":4},"end":{"line":25,"column":7}},"14":{"start":{"line":20,"column":23},"end":{"line":20,"column":44}},"15":{"start":{"line":21,"column":26},"end":{"line":21,"column":41}},"16":{"start":{"line":22,"column":27},"end":{"line":22,"column":42}},"17":{"start":{"line":23,"column":26},"end":{"line":23,"column":41}},"18":{"start":{"line":24,"column":8},"end":{"line":24,"column":43}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":3,"column":33},"end":{"line":3,"column":34}},"loc":{"start":{"line":3,"column":45},"end":{"line":26,"column":1}},"line":3},"1":{"name":"(anonymous_1)","decl":{"start":{"line":4,"column":36},"end":{"line":4,"column":37}},"loc":{"start":{"line":4,"column":48},"end":{"line":6,"column":5}},"line":4},"2":{"name":"(anonymous_2)","decl":{"start":{"line":7,"column":61},"end":{"line":7,"column":62}},"loc":{"start":{"line":7,"column":67},"end":{"line":11,"column":5}},"line":7},"3":{"name":"(anonymous_3)","decl":{"start":{"line":12,"column":76},"end":{"line":12,"column":77}},"loc":{"start":{"line":12,"column":82},"end":{"line":18,"column":5}},"line":12},"4":{"name":"(anonymous_4)","decl":{"start":{"line":19,"column":78},"end":{"line":19,"column":79}},"loc":{"start":{"line":19,"column":84},"end":{"line":25,"column":5}},"line":19}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1},"f":{"0":1,"1":1,"2":1,"3":1,"4":1},"b":{},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"50a96d8517ae7b857bc7194f9ffcd63af5a28b6f","contentHash":"728f6031d32f94d0e5b38ff0cd2f9888d4bb1f060193c5c2e3882cf7614730a3"},"C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_5.spec.js":{"path":"C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_5.spec.js","statementMap":{"0":{"start":{"line":3,"column":0},"end":{"line":44,"column":3}},"1":{"start":{"line":4,"column":4},"end":{"line":12,"column":7}},"2":{"start":{"line":5,"column":25},"end":{"line":9,"column":9}},"3":{"start":{"line":10,"column":26},"end":{"line":10,"column":41}},"4":{"start":{"line":11,"column":8},"end":{"line":11,"column":35}},"5":{"start":{"line":13,"column":4},"end":{"line":28,"column":8}},"6":{"start":{"line":19,"column":41},"end":{"line":28,"column":6}},"7":{"start":{"line":21,"column":25},"end":{"line":25,"column":9}},"8":{"start":{"line":26,"column":26},"end":{"line":26,"column":41}},"9":{"start":{"line":27,"column":8},"end":{"line":27,"column":48}},"10":{"start":{"line":29,"column":4},"end":{"line":43,"column":8}},"11":{"start":{"line":35,"column":40},"end":{"line":43,"column":6}},"12":{"start":{"line":36,"column":25},"end":{"line":40,"column":9}},"13":{"start":{"line":41,"column":26},"end":{"line":41,"column":41}},"14":{"start":{"line":42,"column":8},"end":{"line":42,"column":67}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":3,"column":25},"end":{"line":3,"column":26}},"loc":{"start":{"line":3,"column":37},"end":{"line":44,"column":1}},"line":3},"1":{"name":"(anonymous_1)","decl":{"start":{"line":4,"column":116},"end":{"line":4,"column":117}},"loc":{"start":{"line":4,"column":128},"end":{"line":12,"column":5}},"line":4},"2":{"name":"(anonymous_2)","decl":{"start":{"line":19,"column":14},"end":{"line":19,"column":15}},"loc":{"start":{"line":19,"column":41},"end":{"line":28,"column":6}},"line":19},"3":{"name":"(anonymous_3)","decl":{"start":{"line":20,"column":37},"end":{"line":20,"column":38}},"loc":{"start":{"line":20,"column":49},"end":{"line":28,"column":5}},"line":20},"4":{"name":"(anonymous_4)","decl":{"start":{"line":35,"column":14},"end":{"line":35,"column":15}},"loc":{"start":{"line":35,"column":40},"end":{"line":43,"column":6}},"line":35},"5":{"name":"(anonymous_5)","decl":{"start":{"line":35,"column":163},"end":{"line":35,"column":164}},"loc":{"start":{"line":35,"column":175},"end":{"line":43,"column":5}},"line":35}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":5,"7":5,"8":5,"9":5,"10":1,"11":5,"12":5,"13":5,"14":5},"f":{"0":1,"1":1,"2":5,"3":5,"4":5,"5":5},"b":{},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"a9e3ea2b1bc7940d8b8abf44afff24686364725f","contentHash":"00954c33ba1d67339893f9f33bc78cd6275ddaf34694d879986787c7709d26f7"},"C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_6.spec.js":{"path":"C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_6.spec.js","statementMap":{"0":{"start":{"line":3,"column":0},"end":{"line":29,"column":3}},"1":{"start":{"line":4,"column":4},"end":{"line":13,"column":7}},"2":{"start":{"line":5,"column":23},"end":{"line":5,"column":35}},"3":{"start":{"line":6,"column":25},"end":{"line":6,"column":39}},"4":{"start":{"line":7,"column":8},"end":{"line":7,"column":29}},"5":{"start":{"line":8,"column":8},"end":{"line":8,"column":31}},"6":{"start":{"line":9,"column":8},"end":{"line":9,"column":32}},"7":{"start":{"line":10,"column":8},"end":{"line":10,"column":31}},"8":{"start":{"line":11,"column":8},"end":{"line":11,"column":43}},"9":{"start":{"line":12,"column":8},"end":{"line":12,"column":46}},"10":{"start":{"line":14,"column":4},"end":{"line":22,"column":7}},"11":{"start":{"line":15,"column":23},"end":{"line":15,"column":35}},"12":{"start":{"line":16,"column":25},"end":{"line":16,"column":39}},"13":{"start":{"line":17,"column":8},"end":{"line":17,"column":29}},"14":{"start":{"line":18,"column":8},"end":{"line":18,"column":30}},"15":{"start":{"line":19,"column":8},"end":{"line":19,"column":32}},"16":{"start":{"line":20,"column":8},"end":{"line":20,"column":30}},"17":{"start":{"line":21,"column":8},"end":{"line":21,"column":43}},"18":{"start":{"line":23,"column":4},"end":{"line":28,"column":7}},"19":{"start":{"line":24,"column":23},"end":{"line":24,"column":35}},"20":{"start":{"line":25,"column":25},"end":{"line":25,"column":39}},"21":{"start":{"line":26,"column":8},"end":{"line":26,"column":32}},"22":{"start":{"line":27,"column":8},"end":{"line":27,"column":51}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":3,"column":30},"end":{"line":3,"column":31}},"loc":{"start":{"line":3,"column":36},"end":{"line":29,"column":1}},"line":3},"1":{"name":"(anonymous_1)","decl":{"start":{"line":4,"column":68},"end":{"line":4,"column":69}},"loc":{"start":{"line":4,"column":74},"end":{"line":13,"column":5}},"line":4},"2":{"name":"(anonymous_2)","decl":{"start":{"line":14,"column":68},"end":{"line":14,"column":69}},"loc":{"start":{"line":14,"column":74},"end":{"line":22,"column":5}},"line":14},"3":{"name":"(anonymous_3)","decl":{"start":{"line":23,"column":69},"end":{"line":23,"column":70}},"loc":{"start":{"line":23,"column":75},"end":{"line":28,"column":5}},"line":23}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1},"f":{"0":1,"1":1,"2":1,"3":1},"b":{},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"d6449cdd9f9fcf6ffe06e72197f7a59a3aff6681","contentHash":"95aadcbaaca706652f7e5c48c8bfc5b7274a30abf971993ab6df56fd076534b3"},"C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_7.spec.js":{"path":"C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_7.spec.js","statementMap":{"0":{"start":{"line":3,"column":0},"end":{"line":26,"column":3}},"1":{"start":{"line":4,"column":4},"end":{"line":6,"column":7}},"2":{"start":{"line":5,"column":8},"end":{"line":5,"column":50}},"3":{"start":{"line":7,"column":4},"end":{"line":11,"column":7}},"4":{"start":{"line":8,"column":24},"end":{"line":8,"column":52}},"5":{"start":{"line":9,"column":8},"end":{"line":9,"column":47}},"6":{"start":{"line":10,"column":8},"end":{"line":10,"column":44}},"7":{"start":{"line":12,"column":4},"end":{"line":18,"column":7}},"8":{"start":{"line":13,"column":23},"end":{"line":13,"column":44}},"9":{"start":{"line":14,"column":8},"end":{"line":14,"column":24}},"10":{"start":{"line":15,"column":25},"end":{"line":15,"column":40}},"11":{"start":{"line":16,"column":8},"end":{"line":16,"column":48}},"12":{"start":{"line":17,"column":8},"end":{"line":17,"column":45}},"13":{"start":{"line":19,"column":4},"end":{"line":25,"column":7}},"14":{"start":{"line":20,"column":23},"end":{"line":20,"column":44}},"15":{"start":{"line":21,"column":26},"end":{"line":21,"column":41}},"16":{"start":{"line":22,"column":27},"end":{"line":22,"column":42}},"17":{"start":{"line":23,"column":26},"end":{"line":23,"column":41}},"18":{"start":{"line":24,"column":8},"end":{"line":24,"column":43}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":3,"column":35},"end":{"line":3,"column":36}},"loc":{"start":{"line":3,"column":47},"end":{"line":26,"column":1}},"line":3},"1":{"name":"(anonymous_1)","decl":{"start":{"line":4,"column":36},"end":{"line":4,"column":37}},"loc":{"start":{"line":4,"column":48},"end":{"line":6,"column":5}},"line":4},"2":{"name":"(anonymous_2)","decl":{"start":{"line":7,"column":61},"end":{"line":7,"column":62}},"loc":{"start":{"line":7,"column":67},"end":{"line":11,"column":5}},"line":7},"3":{"name":"(anonymous_3)","decl":{"start":{"line":12,"column":76},"end":{"line":12,"column":77}},"loc":{"start":{"line":12,"column":82},"end":{"line":18,"column":5}},"line":12},"4":{"name":"(anonymous_4)","decl":{"start":{"line":19,"column":78},"end":{"line":19,"column":79}},"loc":{"start":{"line":19,"column":84},"end":{"line":25,"column":5}},"line":19}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1},"f":{"0":1,"1":1,"2":1,"3":1,"4":1},"b":{},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"d8f6752942e5dafe8f6d92dff9883527b8ed03ea","contentHash":"a3273ea6b7def843dee5b75f2489a33aded4edb2b007e4bb89731a9470363994"},"C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_8.spec.js":{"path":"C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_8.spec.js","statementMap":{"0":{"start":{"line":3,"column":0},"end":{"line":44,"column":3}},"1":{"start":{"line":4,"column":4},"end":{"line":12,"column":7}},"2":{"start":{"line":5,"column":25},"end":{"line":9,"column":9}},"3":{"start":{"line":10,"column":26},"end":{"line":10,"column":41}},"4":{"start":{"line":11,"column":8},"end":{"line":11,"column":35}},"5":{"start":{"line":13,"column":4},"end":{"line":28,"column":8}},"6":{"start":{"line":19,"column":41},"end":{"line":28,"column":6}},"7":{"start":{"line":21,"column":25},"end":{"line":25,"column":9}},"8":{"start":{"line":26,"column":26},"end":{"line":26,"column":41}},"9":{"start":{"line":27,"column":8},"end":{"line":27,"column":48}},"10":{"start":{"line":29,"column":4},"end":{"line":43,"column":8}},"11":{"start":{"line":35,"column":40},"end":{"line":43,"column":6}},"12":{"start":{"line":36,"column":25},"end":{"line":40,"column":9}},"13":{"start":{"line":41,"column":26},"end":{"line":41,"column":41}},"14":{"start":{"line":42,"column":8},"end":{"line":42,"column":67}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":3,"column":27},"end":{"line":3,"column":28}},"loc":{"start":{"line":3,"column":39},"end":{"line":44,"column":1}},"line":3},"1":{"name":"(anonymous_1)","decl":{"start":{"line":4,"column":116},"end":{"line":4,"column":117}},"loc":{"start":{"line":4,"column":128},"end":{"line":12,"column":5}},"line":4},"2":{"name":"(anonymous_2)","decl":{"start":{"line":19,"column":14},"end":{"line":19,"column":15}},"loc":{"start":{"line":19,"column":41},"end":{"line":28,"column":6}},"line":19},"3":{"name":"(anonymous_3)","decl":{"start":{"line":20,"column":37},"end":{"line":20,"column":38}},"loc":{"start":{"line":20,"column":49},"end":{"line":28,"column":5}},"line":20},"4":{"name":"(anonymous_4)","decl":{"start":{"line":35,"column":14},"end":{"line":35,"column":15}},"loc":{"start":{"line":35,"column":40},"end":{"line":43,"column":6}},"line":35},"5":{"name":"(anonymous_5)","decl":{"start":{"line":35,"column":163},"end":{"line":35,"column":164}},"loc":{"start":{"line":35,"column":175},"end":{"line":43,"column":5}},"line":35}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":5,"7":5,"8":5,"9":5,"10":1,"11":5,"12":5,"13":5,"14":5},"f":{"0":1,"1":1,"2":5,"3":5,"4":5,"5":5},"b":{},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"678c3dbb1dde76faae18c13ad297151805a6a828","contentHash":"d7cfd17e7aa7a8cb9334b90f29af75b434ae8af0981f306faa68115ed47b8180"},"C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_9.spec.js":{"path":"C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_9.spec.js","statementMap":{"0":{"start":{"line":3,"column":0},"end":{"line":29,"column":3}},"1":{"start":{"line":4,"column":4},"end":{"line":13,"column":7}},"2":{"start":{"line":5,"column":23},"end":{"line":5,"column":35}},"3":{"start":{"line":6,"column":25},"end":{"line":6,"column":39}},"4":{"start":{"line":7,"column":8},"end":{"line":7,"column":29}},"5":{"start":{"line":8,"column":8},"end":{"line":8,"column":31}},"6":{"start":{"line":9,"column":8},"end":{"line":9,"column":32}},"7":{"start":{"line":10,"column":8},"end":{"line":10,"column":31}},"8":{"start":{"line":11,"column":8},"end":{"line":11,"column":43}},"9":{"start":{"line":12,"column":8},"end":{"line":12,"column":46}},"10":{"start":{"line":14,"column":4},"end":{"line":22,"column":7}},"11":{"start":{"line":15,"column":23},"end":{"line":15,"column":35}},"12":{"start":{"line":16,"column":25},"end":{"line":16,"column":39}},"13":{"start":{"line":17,"column":8},"end":{"line":17,"column":29}},"14":{"start":{"line":18,"column":8},"end":{"line":18,"column":30}},"15":{"start":{"line":19,"column":8},"end":{"line":19,"column":32}},"16":{"start":{"line":20,"column":8},"end":{"line":20,"column":30}},"17":{"start":{"line":21,"column":8},"end":{"line":21,"column":43}},"18":{"start":{"line":23,"column":4},"end":{"line":28,"column":7}},"19":{"start":{"line":24,"column":23},"end":{"line":24,"column":35}},"20":{"start":{"line":25,"column":25},"end":{"line":25,"column":39}},"21":{"start":{"line":26,"column":8},"end":{"line":26,"column":32}},"22":{"start":{"line":27,"column":8},"end":{"line":27,"column":51}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":3,"column":32},"end":{"line":3,"column":33}},"loc":{"start":{"line":3,"column":38},"end":{"line":29,"column":1}},"line":3},"1":{"name":"(anonymous_1)","decl":{"start":{"line":4,"column":68},"end":{"line":4,"column":69}},"loc":{"start":{"line":4,"column":74},"end":{"line":13,"column":5}},"line":4},"2":{"name":"(anonymous_2)","decl":{"start":{"line":14,"column":68},"end":{"line":14,"column":69}},"loc":{"start":{"line":14,"column":74},"end":{"line":22,"column":5}},"line":14},"3":{"name":"(anonymous_3)","decl":{"start":{"line":23,"column":69},"end":{"line":23,"column":70}},"loc":{"start":{"line":23,"column":75},"end":{"line":28,"column":5}},"line":23}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1},"f":{"0":1,"1":1,"2":1,"3":1},"b":{},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"bd2e1f2b4c4319edf68611f1db9662ec28cd1cc3","contentHash":"fe9dc9938963083a9f2a3729100d100a2a07894c51282b3fb4d96ac59e40ad87"}}
\ No newline at end of file
diff --git a/.nyc_output/processinfo/a178a070-6923-49a4-8743-fa366a27a34e.json b/.nyc_output/processinfo/a178a070-6923-49a4-8743-fa366a27a34e.json
deleted file mode 100644
index 9d1d75e..0000000
--- a/.nyc_output/processinfo/a178a070-6923-49a4-8743-fa366a27a34e.json
+++ /dev/null
@@ -1 +0,0 @@
-{"parent":null,"pid":8400,"argv":["C:\\nvm4w\\nodejs\\node.exe","C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\node_modules\\mocha\\bin\\mocha.js","./dist/test"],"execArgv":[],"cwd":"C:\\Users\\evano\\WebstormProjects\\JavascriptKata","time":1752249707730,"ppid":28544,"coverageFilename":"C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\.nyc_output\\a178a070-6923-49a4-8743-fa366a27a34e.json","externalId":"","uuid":"a178a070-6923-49a4-8743-fa366a27a34e","files":["C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\test_kata_1.spec.js","C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\test_kata_2.spec.js","C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\test_kata_3.spec.js"]}
\ No newline at end of file
diff --git a/.nyc_output/processinfo/b6e82881-edeb-44c7-a93f-77415b654ced.json b/.nyc_output/processinfo/b6e82881-edeb-44c7-a93f-77415b654ced.json
new file mode 100644
index 0000000..1768266
--- /dev/null
+++ b/.nyc_output/processinfo/b6e82881-edeb-44c7-a93f-77415b654ced.json
@@ -0,0 +1 @@
+{"parent":null,"pid":28956,"argv":["C:\\nvm4w\\nodejs\\node.exe","C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\node_modules\\mocha\\bin\\mocha.js","./dist/test/folder_1/"],"execArgv":[],"cwd":"C:\\Users\\evano\\WebstormProjects\\JavascriptKata","time":1752272996778,"ppid":26540,"coverageFilename":"C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\.nyc_output\\b6e82881-edeb-44c7-a93f-77415b654ced.json","externalId":"","uuid":"b6e82881-edeb-44c7-a93f-77415b654ced","files":["C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_1.spec.js","C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_10.spec.js","C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_11.spec.js","C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_12.spec.js","C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_13.spec.js","C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_14.spec.js","C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_15.spec.js","C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_16.spec.js","C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_17.spec.js","C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_18.spec.js","C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_2.spec.js","C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_3.spec.js","C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_4.spec.js","C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_5.spec.js","C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_6.spec.js","C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_7.spec.js","C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_8.spec.js","C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_9.spec.js"]}
\ No newline at end of file
diff --git a/.nyc_output/processinfo/index.json b/.nyc_output/processinfo/index.json
index 1d1b963..331797a 100644
--- a/.nyc_output/processinfo/index.json
+++ b/.nyc_output/processinfo/index.json
@@ -1 +1 @@
-{"processes":{"a178a070-6923-49a4-8743-fa366a27a34e":{"parent":null,"children":[]}},"files":{"C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\test_kata_1.spec.js":["a178a070-6923-49a4-8743-fa366a27a34e"],"C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\test_kata_2.spec.js":["a178a070-6923-49a4-8743-fa366a27a34e"],"C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\test_kata_3.spec.js":["a178a070-6923-49a4-8743-fa366a27a34e"]},"externalIds":{}}
\ No newline at end of file
+{"processes":{"b6e82881-edeb-44c7-a93f-77415b654ced":{"parent":null,"children":[]}},"files":{"C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_1.spec.js":["b6e82881-edeb-44c7-a93f-77415b654ced"],"C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_10.spec.js":["b6e82881-edeb-44c7-a93f-77415b654ced"],"C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_11.spec.js":["b6e82881-edeb-44c7-a93f-77415b654ced"],"C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_12.spec.js":["b6e82881-edeb-44c7-a93f-77415b654ced"],"C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_13.spec.js":["b6e82881-edeb-44c7-a93f-77415b654ced"],"C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_14.spec.js":["b6e82881-edeb-44c7-a93f-77415b654ced"],"C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_15.spec.js":["b6e82881-edeb-44c7-a93f-77415b654ced"],"C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_16.spec.js":["b6e82881-edeb-44c7-a93f-77415b654ced"],"C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_17.spec.js":["b6e82881-edeb-44c7-a93f-77415b654ced"],"C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_18.spec.js":["b6e82881-edeb-44c7-a93f-77415b654ced"],"C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_2.spec.js":["b6e82881-edeb-44c7-a93f-77415b654ced"],"C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_3.spec.js":["b6e82881-edeb-44c7-a93f-77415b654ced"],"C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_4.spec.js":["b6e82881-edeb-44c7-a93f-77415b654ced"],"C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_5.spec.js":["b6e82881-edeb-44c7-a93f-77415b654ced"],"C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_6.spec.js":["b6e82881-edeb-44c7-a93f-77415b654ced"],"C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_7.spec.js":["b6e82881-edeb-44c7-a93f-77415b654ced"],"C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_8.spec.js":["b6e82881-edeb-44c7-a93f-77415b654ced"],"C:\\Users\\evano\\WebstormProjects\\JavascriptKata\\dist\\test\\folder_1\\test_kata_9.spec.js":["b6e82881-edeb-44c7-a93f-77415b654ced"]},"externalIds":{}}
\ No newline at end of file
diff --git a/break_up_mutation_json.ts b/break_up_mutation_json.ts
new file mode 100644
index 0000000..2123771
--- /dev/null
+++ b/break_up_mutation_json.ts
@@ -0,0 +1,29 @@
+﻿import mutation from './reports/mutation/mutation.json' with { type: 'json'};
+import * as fs from "node:fs";
+
+let byTestNumber = {};
+
+Object.keys(mutation.files).forEach((file, idx) => {
+    // console.log(mutation.files[mut].mutants[3]?.coveredBy)
+    mutation.files[file].mutants.forEach(({coveredBy, killedBy}, idx) => {
+        const mutatedTests = new Set([...(killedBy || []), ...(coveredBy || [])]);
+        mutatedTests.forEach(testId => {
+            if (byTestNumber[file] === undefined) {
+                byTestNumber[file] = testId
+            }
+            if (byTestNumber[testId] === undefined) {
+                byTestNumber[testId] = [mutation.files[file].mutants[idx]]
+            } else {
+                byTestNumber[testId].push(mutation.files[file].mutants[idx])
+            }
+        })
+    });
+
+
+});
+Object.keys(byTestNumber).forEach((testId, idx) => {
+    console.log(byTestNumber[testId])
+    const fileParts = byTestNumber[testId].split(',');
+    console.log(fileParts)
+    fs.writeFileSync(`./mutations/${fileParts[2]}/test_${idx}.json`, JSON.stringify(byTestNumber[testId]));
+})
\ No newline at end of file
diff --git a/dist/3_kata.js b/dist/3_kata.js
deleted file mode 100644
index ebc425e..0000000
--- a/dist/3_kata.js
+++ /dev/null
@@ -1,18 +0,0 @@
-export class Zergling {
-    attack(unit) {
-    }
-    alive() {
-        return false;
-    }
-    run(unit) {
-    }
-}
-export class Marine {
-    attack(unit) {
-    }
-    alive() {
-        return false;
-    }
-    shoot(unit) {
-    }
-}
diff --git a/dist/break_up_mutation_json.js b/dist/break_up_mutation_json.js
new file mode 100644
index 0000000..ef79e11
--- /dev/null
+++ b/dist/break_up_mutation_json.js
@@ -0,0 +1,23 @@
+import mutation from './reports/mutation/mutation.json' with { type: 'json' };
+import * as fs from "node:fs";
+let byTestNumber = {};
+Object.keys(mutation.files).forEach((file, idx) => {
+    // console.log(mutation.files[mut].mutants[3]?.coveredBy)
+    mutation.files[file].mutants.forEach(({ coveredBy, killedBy }, idx) => {
+        const mutatedTests = new Set([...(killedBy || []), ...(coveredBy || [])]);
+        mutatedTests.forEach(testId => {
+            if (byTestNumber[testId] === undefined) {
+                byTestNumber[testId] = [mutation.files[file].mutants[idx]];
+            }
+            else {
+                byTestNumber[testId].push(mutation.files[file].mutants[idx]);
+            }
+        });
+    });
+});
+Object.keys(byTestNumber).forEach((testId, idx) => {
+    console.log(byTestNumber[testId]);
+    const fileParts = byTestNumber[testId].split(',');
+    console.log(fileParts);
+    fs.writeFileSync(`./mutations/${fileParts[2]}/test_${idx}.json`, JSON.stringify(byTestNumber[testId]));
+});
diff --git a/dist/index.js b/dist/index.js
deleted file mode 100644
index 5100c41..0000000
--- a/dist/index.js
+++ /dev/null
@@ -1,16 +0,0 @@
-import { PluginKind, declareValuePlugin } from '@stryker-mutator/api/plugin';
-export const strykerPlugins = [declareValuePlugin(PluginKind.Ignore, 'console.debug', {
-        shouldIgnore(path) {
-            // Define the conditions for which you want to ignore mutants
-            if (path.isExpressionStatement() &&
-                path.node.expression.type === 'CallExpression' &&
-                path.node.expression.callee.type === 'MemberExpression' &&
-                path.node.expression.callee.object.type === 'Identifier' &&
-                path.node.expression.callee.object.name === 'console' &&
-                path.node.expression.callee.property.type === 'Identifier' &&
-                path.node.expression.callee.property.name === 'debug') {
-                // Return the ignore reason
-                return "We're not interested in testing `console.debug` statements, see ADR 648.";
-            }
-        }
-    })];
diff --git a/dist/reports/mutation/mutation.json b/dist/reports/mutation/mutation.json
new file mode 100644
index 0000000..b04fe3c
--- /dev/null
+++ b/dist/reports/mutation/mutation.json
@@ -0,0 +1 @@
+{ "files": { "src/folder_1/12_kata.ts": { "language": "typescript", "mutants": [{ "id": "43", "mutatorName": "BlockStatement", "replacement": "{}", "status": "NoCoverage", "static": false, "coveredBy": [], "location": { "end": { "column": 6, "line": 31 }, "start": { "column": 31, "line": 29 } } }, { "id": "49", "mutatorName": "BlockStatement", "replacement": "{}", "status": "NoCoverage", "static": false, "coveredBy": [], "location": { "end": { "column": 6, "line": 48 }, "start": { "column": 31, "line": 46 } } }, { "id": "61", "mutatorName": "StringLiteral", "replacement": "\"\"", "status": "NoCoverage", "static": false, "coveredBy": [], "location": { "end": { "column": 26, "line": 66 }, "start": { "column": 16, "line": 66 } } }, { "id": "30", "mutatorName": "ArrayDeclaration", "replacement": "[\"Stryker was here\"]", "status": "Survived", "static": false, "testsCompleted": 3, "coveredBy": ["19", "20", "21"], "location": { "end": { "column": 29, "line": 8 }, "start": { "column": 27, "line": 8 } } }, { "id": "31", "mutatorName": "BlockStatement", "replacement": "{}", "status": "Survived", "static": false, "testsCompleted": 3, "coveredBy": ["19", "20", "21"], "location": { "end": { "column": 6, "line": 13 }, "start": { "column": 31, "line": 9 } } }, { "id": "32", "mutatorName": "ConditionalExpression", "replacement": "true", "statusReason": "expected 'not full' to equal 'full'", "status": "Killed", "static": false, "testsCompleted": 3, "killedBy": ["21"], "coveredBy": ["19", "20", "21"], "location": { "end": { "column": 43, "line": 10 }, "start": { "column": 13, "line": 10 } } }, { "id": "34", "mutatorName": "BlockStatement", "replacement": "{}", "status": "Survived", "static": false, "testsCompleted": 2, "coveredBy": ["19", "20"], "location": { "end": { "column": 10, "line": 12 }, "start": { "column": 45, "line": 10 } } }, { "id": "33", "mutatorName": "ConditionalExpression", "replacement": "false", "status": "Survived", "static": false, "testsCompleted": 3, "coveredBy": ["19", "20", "21"], "location": { "end": { "column": 43, "line": 10 }, "start": { "column": 13, "line": 10 } } }, { "id": "35", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "expected undefined to equal false", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["19"], "coveredBy": ["19"], "location": { "end": { "column": 6, "line": 17 }, "start": { "column": 22, "line": 15 } } }, { "id": "36", "mutatorName": "ConditionalExpression", "replacement": "true", "statusReason": "expected true to equal false", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["19"], "coveredBy": ["19"], "location": { "end": { "column": 34, "line": 16 }, "start": { "column": 16, "line": 16 } } }, { "id": "37", "mutatorName": "ConditionalExpression", "replacement": "false", "status": "Survived", "static": false, "testsCompleted": 1, "coveredBy": ["19"], "location": { "end": { "column": 34, "line": 16 }, "start": { "column": 16, "line": 16 } } }, { "id": "38", "mutatorName": "EqualityOperator", "replacement": "this.hitpoints >= 0", "status": "Survived", "static": false, "testsCompleted": 1, "coveredBy": ["19"], "location": { "end": { "column": 34, "line": 16 }, "start": { "column": 16, "line": 16 } } }, { "id": "39", "mutatorName": "EqualityOperator", "replacement": "this.hitpoints <= 0", "statusReason": "expected true to equal false", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["19"], "coveredBy": ["19"], "location": { "end": { "column": 34, "line": 16 }, "start": { "column": 16, "line": 16 } } }, { "id": "41", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "expected true to equal false", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["19"], "coveredBy": ["19", "20"], "location": { "end": { "column": 6, "line": 25 }, "start": { "column": 32, "line": 23 } } }, { "id": "40", "mutatorName": "BlockStatement", "replacement": "{}", "status": "Survived", "static": false, "testsCompleted": 2, "coveredBy": ["19", "20"], "location": { "end": { "column": 6, "line": 21 }, "start": { "column": 28, "line": 19 } } }, { "id": "42", "mutatorName": "AssignmentOperator", "replacement": "this.hitpoints += damage", "statusReason": "expected true to equal false", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["19"], "coveredBy": ["19", "20"], "location": { "end": { "column": 33, "line": 24 }, "start": { "column": 9, "line": 24 } } }, { "id": "44", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "expected undefined to equal true", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["19"], "coveredBy": ["19"], "location": { "end": { "column": 6, "line": 35 }, "start": { "column": 22, "line": 33 } } }, { "id": "45", "mutatorName": "BooleanLiteral", "replacement": "false", "statusReason": "expected false to equal true", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["19"], "coveredBy": ["19"], "location": { "end": { "column": 20, "line": 34 }, "start": { "column": 16, "line": 34 } } }, { "id": "47", "mutatorName": "BlockStatement", "replacement": "{}", "status": "Survived", "static": false, "testsCompleted": 1, "coveredBy": ["19"], "location": { "end": { "column": 6, "line": 42 }, "start": { "column": 32, "line": 40 } } }, { "id": "46", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "expected true to equal false", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["19"], "coveredBy": ["19"], "location": { "end": { "column": 6, "line": 39 }, "start": { "column": 30, "line": 37 } } }, { "id": "48", "mutatorName": "AssignmentOperator", "replacement": "this.hitpoints += damage", "status": "Survived", "static": false, "testsCompleted": 1, "coveredBy": ["19"], "location": { "end": { "column": 33, "line": 41 }, "start": { "column": 9, "line": 41 } } }, { "id": "51", "mutatorName": "BooleanLiteral", "replacement": "false", "statusReason": "expected false to equal true", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["20"], "coveredBy": ["20"], "location": { "end": { "column": 20, "line": 51 }, "start": { "column": 16, "line": 51 } } }, { "id": "50", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "expected undefined to equal true", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["20"], "coveredBy": ["20"], "location": { "end": { "column": 6, "line": 52 }, "start": { "column": 22, "line": 50 } } }, { "id": "52", "mutatorName": "BlockStatement", "replacement": "{}", "status": "Survived", "static": false, "testsCompleted": 1, "coveredBy": ["20"], "location": { "end": { "column": 6, "line": 56 }, "start": { "column": 29, "line": 54 } } }, { "id": "53", "mutatorName": "BlockStatement", "replacement": "{}", "status": "Survived", "static": false, "testsCompleted": 1, "coveredBy": ["20"], "location": { "end": { "column": 6, "line": 60 }, "start": { "column": 32, "line": 58 } } }, { "id": "54", "mutatorName": "AssignmentOperator", "replacement": "this.hitpoints += damage", "status": "Survived", "static": false, "testsCompleted": 1, "coveredBy": ["20"], "location": { "end": { "column": 33, "line": 59 }, "start": { "column": 9, "line": 59 } } }, { "id": "55", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "expected undefined to equal 'full'", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["21"], "coveredBy": ["21"], "location": { "end": { "column": 6, "line": 67 }, "start": { "column": 27, "line": 62 } } }, { "id": "56", "mutatorName": "ConditionalExpression", "replacement": "true", "status": "Survived", "static": false, "testsCompleted": 1, "coveredBy": ["21"], "location": { "end": { "column": 33, "line": 63 }, "start": { "column": 13, "line": 63 } } }, { "id": "57", "mutatorName": "ConditionalExpression", "replacement": "false", "statusReason": "expected 'not full' to equal 'full'", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["21"], "coveredBy": ["21"], "location": { "end": { "column": 33, "line": 63 }, "start": { "column": 13, "line": 63 } } }, { "id": "59", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "expected 'not full' to equal 'full'", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["21"], "coveredBy": ["21"], "location": { "end": { "column": 10, "line": 65 }, "start": { "column": 35, "line": 63 } } }, { "id": "58", "mutatorName": "EqualityOperator", "replacement": "this.hitpoints !== 2", "statusReason": "expected 'not full' to equal 'full'", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["21"], "coveredBy": ["21"], "location": { "end": { "column": 33, "line": 63 }, "start": { "column": 13, "line": 63 } } }, { "id": "60", "mutatorName": "StringLiteral", "replacement": "\"\"", "statusReason": "expected '' to equal 'full'", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["21"], "coveredBy": ["21"], "location": { "end": { "column": 26, "line": 64 }, "start": { "column": 20, "line": 64 } } }], "source": "﻿interface IUnit {\r\n    attack(unit: IUnit): void;\r\n    alive(): boolean;\r\n    hurt(damage: number): void;\r\n}\r\nexport class Zergling implements IUnit {\r\n    hitpoints = 1;\r\n    closeUnits: IUnit[] = [];\r\n    attack(unit: IUnit): void {\r\n        if (this.closeUnits.includes(unit)) {\r\n            unit.hurt(1);\r\n        }\r\n    }\r\n\r\n    alive(): boolean {\r\n        return this.hitpoints > 0;\r\n    }\r\n\r\n    run(unit: IUnit): void {\r\n        this.closeUnits.push(unit);\r\n    }\r\n\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n}\r\nexport class Marine implements IUnit {\r\n    hitpoints = 2;\r\n    attack(unit: IUnit): void {\r\n        this.shoot(unit);\r\n    }\r\n\r\n    alive(): boolean {\r\n        return true;\r\n    }\r\n\r\n    shoot(unit: IUnit): void {\r\n        unit.hurt(1);\r\n    }\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n}\r\nexport class Zealot implements IUnit {\r\n    hitpoints = 2;\r\n    attack(unit: IUnit): void {\r\n        this.claw(unit);\r\n    }\r\n\r\n    alive(): boolean {\r\n        return true;\r\n    }\r\n\r\n    claw(unit: IUnit): void {\r\n        unit.hurt(2);\r\n    }\r\n\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n\r\n    hitpointBar(): string {\r\n        if (this.hitpoints === 2) {\r\n            return \"full\";\r\n        }\r\n        return \"not full\";\r\n    }\r\n}" }, "src/folder_1/15_kata.ts": { "language": "typescript", "mutants": [{ "id": "105", "mutatorName": "BlockStatement", "replacement": "{}", "status": "NoCoverage", "static": false, "coveredBy": [], "location": { "end": { "column": 6, "line": 31 }, "start": { "column": 31, "line": 29 } } }, { "id": "111", "mutatorName": "BlockStatement", "replacement": "{}", "status": "NoCoverage", "static": false, "coveredBy": [], "location": { "end": { "column": 6, "line": 48 }, "start": { "column": 31, "line": 46 } } }, { "id": "123", "mutatorName": "StringLiteral", "replacement": "\"\"", "status": "NoCoverage", "static": false, "coveredBy": [], "location": { "end": { "column": 26, "line": 66 }, "start": { "column": 16, "line": 66 } } }, { "id": "92", "mutatorName": "ArrayDeclaration", "replacement": "[\"Stryker was here\"]", "status": "Survived", "static": false, "testsCompleted": 3, "coveredBy": ["37", "38", "39"], "location": { "end": { "column": 29, "line": 8 }, "start": { "column": 27, "line": 8 } } }, { "id": "93", "mutatorName": "BlockStatement", "replacement": "{}", "status": "Survived", "static": false, "testsCompleted": 3, "coveredBy": ["37", "38", "39"], "location": { "end": { "column": 6, "line": 13 }, "start": { "column": 31, "line": 9 } } }, { "id": "95", "mutatorName": "ConditionalExpression", "replacement": "false", "status": "Survived", "static": false, "testsCompleted": 3, "coveredBy": ["37", "38", "39"], "location": { "end": { "column": 43, "line": 10 }, "start": { "column": 13, "line": 10 } } }, { "id": "94", "mutatorName": "ConditionalExpression", "replacement": "true", "statusReason": "expected 'not full' to equal 'full'", "status": "Killed", "static": false, "testsCompleted": 3, "killedBy": ["39"], "coveredBy": ["37", "38", "39"], "location": { "end": { "column": 43, "line": 10 }, "start": { "column": 13, "line": 10 } } }, { "id": "96", "mutatorName": "BlockStatement", "replacement": "{}", "status": "Survived", "static": false, "testsCompleted": 2, "coveredBy": ["37", "38"], "location": { "end": { "column": 10, "line": 12 }, "start": { "column": 45, "line": 10 } } }, { "id": "97", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "expected undefined to equal false", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["37"], "coveredBy": ["37"], "location": { "end": { "column": 6, "line": 17 }, "start": { "column": 22, "line": 15 } } }, { "id": "98", "mutatorName": "ConditionalExpression", "replacement": "true", "statusReason": "expected true to equal false", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["37"], "coveredBy": ["37"], "location": { "end": { "column": 34, "line": 16 }, "start": { "column": 16, "line": 16 } } }, { "id": "99", "mutatorName": "ConditionalExpression", "replacement": "false", "status": "Survived", "static": false, "testsCompleted": 1, "coveredBy": ["37"], "location": { "end": { "column": 34, "line": 16 }, "start": { "column": 16, "line": 16 } } }, { "id": "100", "mutatorName": "EqualityOperator", "replacement": "this.hitpoints >= 0", "status": "Survived", "static": false, "testsCompleted": 1, "coveredBy": ["37"], "location": { "end": { "column": 34, "line": 16 }, "start": { "column": 16, "line": 16 } } }, { "id": "101", "mutatorName": "EqualityOperator", "replacement": "this.hitpoints <= 0", "statusReason": "expected true to equal false", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["37"], "coveredBy": ["37"], "location": { "end": { "column": 34, "line": 16 }, "start": { "column": 16, "line": 16 } } }, { "id": "102", "mutatorName": "BlockStatement", "replacement": "{}", "status": "Survived", "static": false, "testsCompleted": 2, "coveredBy": ["37", "38"], "location": { "end": { "column": 6, "line": 21 }, "start": { "column": 28, "line": 19 } } }, { "id": "103", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "expected true to equal false", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["37"], "coveredBy": ["37", "38"], "location": { "end": { "column": 6, "line": 25 }, "start": { "column": 32, "line": 23 } } }, { "id": "104", "mutatorName": "AssignmentOperator", "replacement": "this.hitpoints += damage", "statusReason": "expected true to equal false", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["37"], "coveredBy": ["37", "38"], "location": { "end": { "column": 33, "line": 24 }, "start": { "column": 9, "line": 24 } } }, { "id": "106", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "expected undefined to equal true", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["37"], "coveredBy": ["37"], "location": { "end": { "column": 6, "line": 35 }, "start": { "column": 22, "line": 33 } } }, { "id": "107", "mutatorName": "BooleanLiteral", "replacement": "false", "statusReason": "expected false to equal true", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["37"], "coveredBy": ["37"], "location": { "end": { "column": 20, "line": 34 }, "start": { "column": 16, "line": 34 } } }, { "id": "108", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "expected true to equal false", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["37"], "coveredBy": ["37"], "location": { "end": { "column": 6, "line": 39 }, "start": { "column": 30, "line": 37 } } }, { "id": "109", "mutatorName": "BlockStatement", "replacement": "{}", "status": "Survived", "static": false, "testsCompleted": 1, "coveredBy": ["37"], "location": { "end": { "column": 6, "line": 42 }, "start": { "column": 32, "line": 40 } } }, { "id": "110", "mutatorName": "AssignmentOperator", "replacement": "this.hitpoints += damage", "status": "Survived", "static": false, "testsCompleted": 1, "coveredBy": ["37"], "location": { "end": { "column": 33, "line": 41 }, "start": { "column": 9, "line": 41 } } }, { "id": "112", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "expected undefined to equal true", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["38"], "coveredBy": ["38"], "location": { "end": { "column": 6, "line": 52 }, "start": { "column": 22, "line": 50 } } }, { "id": "113", "mutatorName": "BooleanLiteral", "replacement": "false", "statusReason": "expected false to equal true", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["38"], "coveredBy": ["38"], "location": { "end": { "column": 20, "line": 51 }, "start": { "column": 16, "line": 51 } } }, { "id": "114", "mutatorName": "BlockStatement", "replacement": "{}", "status": "Survived", "static": false, "testsCompleted": 1, "coveredBy": ["38"], "location": { "end": { "column": 6, "line": 56 }, "start": { "column": 29, "line": 54 } } }, { "id": "115", "mutatorName": "BlockStatement", "replacement": "{}", "status": "Survived", "static": false, "testsCompleted": 1, "coveredBy": ["38"], "location": { "end": { "column": 6, "line": 60 }, "start": { "column": 32, "line": 58 } } }, { "id": "116", "mutatorName": "AssignmentOperator", "replacement": "this.hitpoints += damage", "status": "Survived", "static": false, "testsCompleted": 1, "coveredBy": ["38"], "location": { "end": { "column": 33, "line": 59 }, "start": { "column": 9, "line": 59 } } }, { "id": "117", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "expected undefined to equal 'full'", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["39"], "coveredBy": ["39"], "location": { "end": { "column": 6, "line": 67 }, "start": { "column": 27, "line": 62 } } }, { "id": "118", "mutatorName": "ConditionalExpression", "replacement": "true", "status": "Survived", "static": false, "testsCompleted": 1, "coveredBy": ["39"], "location": { "end": { "column": 33, "line": 63 }, "start": { "column": 13, "line": 63 } } }, { "id": "119", "mutatorName": "ConditionalExpression", "replacement": "false", "statusReason": "expected 'not full' to equal 'full'", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["39"], "coveredBy": ["39"], "location": { "end": { "column": 33, "line": 63 }, "start": { "column": 13, "line": 63 } } }, { "id": "120", "mutatorName": "EqualityOperator", "replacement": "this.hitpoints !== 2", "statusReason": "expected 'not full' to equal 'full'", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["39"], "coveredBy": ["39"], "location": { "end": { "column": 33, "line": 63 }, "start": { "column": 13, "line": 63 } } }, { "id": "121", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "expected 'not full' to equal 'full'", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["39"], "coveredBy": ["39"], "location": { "end": { "column": 10, "line": 65 }, "start": { "column": 35, "line": 63 } } }, { "id": "122", "mutatorName": "StringLiteral", "replacement": "\"\"", "statusReason": "expected '' to equal 'full'", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["39"], "coveredBy": ["39"], "location": { "end": { "column": 26, "line": 64 }, "start": { "column": 20, "line": 64 } } }], "source": "﻿interface IUnit {\r\n    attack(unit: IUnit): void;\r\n    alive(): boolean;\r\n    hurt(damage: number): void;\r\n}\r\nexport class Zergling implements IUnit {\r\n    hitpoints = 1;\r\n    closeUnits: IUnit[] = [];\r\n    attack(unit: IUnit): void {\r\n        if (this.closeUnits.includes(unit)) {\r\n            unit.hurt(1);\r\n        }\r\n    }\r\n\r\n    alive(): boolean {\r\n        return this.hitpoints > 0;\r\n    }\r\n\r\n    run(unit: IUnit): void {\r\n        this.closeUnits.push(unit);\r\n    }\r\n\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n}\r\nexport class Marine implements IUnit {\r\n    hitpoints = 2;\r\n    attack(unit: IUnit): void {\r\n        this.shoot(unit);\r\n    }\r\n\r\n    alive(): boolean {\r\n        return true;\r\n    }\r\n\r\n    shoot(unit: IUnit): void {\r\n        unit.hurt(1);\r\n    }\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n}\r\nexport class Zealot implements IUnit {\r\n    hitpoints = 2;\r\n    attack(unit: IUnit): void {\r\n        this.claw(unit);\r\n    }\r\n\r\n    alive(): boolean {\r\n        return true;\r\n    }\r\n\r\n    claw(unit: IUnit): void {\r\n        unit.hurt(2);\r\n    }\r\n\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n\r\n    hitpointBar(): string {\r\n        if (this.hitpoints === 2) {\r\n            return \"full\";\r\n        }\r\n        return \"not full\";\r\n    }\r\n}" }, "src/folder_1/18_kata.ts": { "language": "typescript", "mutants": [{ "id": "167", "mutatorName": "BlockStatement", "replacement": "{}", "status": "NoCoverage", "static": false, "coveredBy": [], "location": { "end": { "column": 6, "line": 31 }, "start": { "column": 31, "line": 29 } } }, { "id": "173", "mutatorName": "BlockStatement", "replacement": "{}", "status": "NoCoverage", "static": false, "coveredBy": [], "location": { "end": { "column": 6, "line": 48 }, "start": { "column": 31, "line": 46 } } }, { "id": "185", "mutatorName": "StringLiteral", "replacement": "\"\"", "status": "NoCoverage", "static": false, "coveredBy": [], "location": { "end": { "column": 26, "line": 66 }, "start": { "column": 16, "line": 66 } } }, { "id": "154", "mutatorName": "ArrayDeclaration", "replacement": "[\"Stryker was here\"]", "status": "Survived", "static": false, "testsCompleted": 3, "coveredBy": ["55", "56", "57"], "location": { "end": { "column": 29, "line": 8 }, "start": { "column": 27, "line": 8 } } }, { "id": "155", "mutatorName": "BlockStatement", "replacement": "{}", "status": "Survived", "static": false, "testsCompleted": 3, "coveredBy": ["55", "56", "57"], "location": { "end": { "column": 6, "line": 13 }, "start": { "column": 31, "line": 9 } } }, { "id": "156", "mutatorName": "ConditionalExpression", "replacement": "true", "statusReason": "expected 'not full' to equal 'full'", "status": "Killed", "static": false, "testsCompleted": 3, "killedBy": ["57"], "coveredBy": ["55", "56", "57"], "location": { "end": { "column": 43, "line": 10 }, "start": { "column": 13, "line": 10 } } }, { "id": "157", "mutatorName": "ConditionalExpression", "replacement": "false", "status": "Survived", "static": false, "testsCompleted": 3, "coveredBy": ["55", "56", "57"], "location": { "end": { "column": 43, "line": 10 }, "start": { "column": 13, "line": 10 } } }, { "id": "158", "mutatorName": "BlockStatement", "replacement": "{}", "status": "Survived", "static": false, "testsCompleted": 2, "coveredBy": ["55", "56"], "location": { "end": { "column": 10, "line": 12 }, "start": { "column": 45, "line": 10 } } }, { "id": "159", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "expected undefined to equal false", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["55"], "coveredBy": ["55"], "location": { "end": { "column": 6, "line": 17 }, "start": { "column": 22, "line": 15 } } }, { "id": "160", "mutatorName": "ConditionalExpression", "replacement": "true", "statusReason": "expected true to equal false", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["55"], "coveredBy": ["55"], "location": { "end": { "column": 34, "line": 16 }, "start": { "column": 16, "line": 16 } } }, { "id": "161", "mutatorName": "ConditionalExpression", "replacement": "false", "status": "Survived", "static": false, "testsCompleted": 1, "coveredBy": ["55"], "location": { "end": { "column": 34, "line": 16 }, "start": { "column": 16, "line": 16 } } }, { "id": "162", "mutatorName": "EqualityOperator", "replacement": "this.hitpoints >= 0", "status": "Survived", "static": false, "testsCompleted": 1, "coveredBy": ["55"], "location": { "end": { "column": 34, "line": 16 }, "start": { "column": 16, "line": 16 } } }, { "id": "164", "mutatorName": "BlockStatement", "replacement": "{}", "status": "Survived", "static": false, "testsCompleted": 2, "coveredBy": ["55", "56"], "location": { "end": { "column": 6, "line": 21 }, "start": { "column": 28, "line": 19 } } }, { "id": "163", "mutatorName": "EqualityOperator", "replacement": "this.hitpoints <= 0", "statusReason": "expected true to equal false", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["55"], "coveredBy": ["55"], "location": { "end": { "column": 34, "line": 16 }, "start": { "column": 16, "line": 16 } } }, { "id": "165", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "expected true to equal false", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["55"], "coveredBy": ["55", "56"], "location": { "end": { "column": 6, "line": 25 }, "start": { "column": 32, "line": 23 } } }, { "id": "166", "mutatorName": "AssignmentOperator", "replacement": "this.hitpoints += damage", "statusReason": "expected true to equal false", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["55"], "coveredBy": ["55", "56"], "location": { "end": { "column": 33, "line": 24 }, "start": { "column": 9, "line": 24 } } }, { "id": "168", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "expected undefined to equal true", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["55"], "coveredBy": ["55"], "location": { "end": { "column": 6, "line": 35 }, "start": { "column": 22, "line": 33 } } }, { "id": "169", "mutatorName": "BooleanLiteral", "replacement": "false", "statusReason": "expected false to equal true", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["55"], "coveredBy": ["55"], "location": { "end": { "column": 20, "line": 34 }, "start": { "column": 16, "line": 34 } } }, { "id": "170", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "expected true to equal false", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["55"], "coveredBy": ["55"], "location": { "end": { "column": 6, "line": 39 }, "start": { "column": 30, "line": 37 } } }, { "id": "171", "mutatorName": "BlockStatement", "replacement": "{}", "status": "Survived", "static": false, "testsCompleted": 1, "coveredBy": ["55"], "location": { "end": { "column": 6, "line": 42 }, "start": { "column": 32, "line": 40 } } }, { "id": "172", "mutatorName": "AssignmentOperator", "replacement": "this.hitpoints += damage", "status": "Survived", "static": false, "testsCompleted": 1, "coveredBy": ["55"], "location": { "end": { "column": 33, "line": 41 }, "start": { "column": 9, "line": 41 } } }, { "id": "174", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "expected undefined to equal true", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["56"], "coveredBy": ["56"], "location": { "end": { "column": 6, "line": 52 }, "start": { "column": 22, "line": 50 } } }, { "id": "175", "mutatorName": "BooleanLiteral", "replacement": "false", "statusReason": "expected false to equal true", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["56"], "coveredBy": ["56"], "location": { "end": { "column": 20, "line": 51 }, "start": { "column": 16, "line": 51 } } }, { "id": "176", "mutatorName": "BlockStatement", "replacement": "{}", "status": "Survived", "static": false, "testsCompleted": 1, "coveredBy": ["56"], "location": { "end": { "column": 6, "line": 56 }, "start": { "column": 29, "line": 54 } } }, { "id": "177", "mutatorName": "BlockStatement", "replacement": "{}", "status": "Survived", "static": false, "testsCompleted": 1, "coveredBy": ["56"], "location": { "end": { "column": 6, "line": 60 }, "start": { "column": 32, "line": 58 } } }, { "id": "178", "mutatorName": "AssignmentOperator", "replacement": "this.hitpoints += damage", "status": "Survived", "static": false, "testsCompleted": 1, "coveredBy": ["56"], "location": { "end": { "column": 33, "line": 59 }, "start": { "column": 9, "line": 59 } } }, { "id": "179", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "expected undefined to equal 'full'", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["57"], "coveredBy": ["57"], "location": { "end": { "column": 6, "line": 67 }, "start": { "column": 27, "line": 62 } } }, { "id": "180", "mutatorName": "ConditionalExpression", "replacement": "true", "status": "Survived", "static": false, "testsCompleted": 1, "coveredBy": ["57"], "location": { "end": { "column": 33, "line": 63 }, "start": { "column": 13, "line": 63 } } }, { "id": "181", "mutatorName": "ConditionalExpression", "replacement": "false", "statusReason": "expected 'not full' to equal 'full'", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["57"], "coveredBy": ["57"], "location": { "end": { "column": 33, "line": 63 }, "start": { "column": 13, "line": 63 } } }, { "id": "182", "mutatorName": "EqualityOperator", "replacement": "this.hitpoints !== 2", "statusReason": "expected 'not full' to equal 'full'", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["57"], "coveredBy": ["57"], "location": { "end": { "column": 33, "line": 63 }, "start": { "column": 13, "line": 63 } } }, { "id": "183", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "expected 'not full' to equal 'full'", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["57"], "coveredBy": ["57"], "location": { "end": { "column": 10, "line": 65 }, "start": { "column": 35, "line": 63 } } }, { "id": "184", "mutatorName": "StringLiteral", "replacement": "\"\"", "statusReason": "expected '' to equal 'full'", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["57"], "coveredBy": ["57"], "location": { "end": { "column": 26, "line": 64 }, "start": { "column": 20, "line": 64 } } }], "source": "﻿interface IUnit {\r\n    attack(unit: IUnit): void;\r\n    alive(): boolean;\r\n    hurt(damage: number): void;\r\n}\r\nexport class Zergling implements IUnit {\r\n    hitpoints = 1;\r\n    closeUnits: IUnit[] = [];\r\n    attack(unit: IUnit): void {\r\n        if (this.closeUnits.includes(unit)) {\r\n            unit.hurt(1);\r\n        }\r\n    }\r\n\r\n    alive(): boolean {\r\n        return this.hitpoints > 0;\r\n    }\r\n\r\n    run(unit: IUnit): void {\r\n        this.closeUnits.push(unit);\r\n    }\r\n\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n}\r\nexport class Marine implements IUnit {\r\n    hitpoints = 2;\r\n    attack(unit: IUnit): void {\r\n        this.shoot(unit);\r\n    }\r\n\r\n    alive(): boolean {\r\n        return true;\r\n    }\r\n\r\n    shoot(unit: IUnit): void {\r\n        unit.hurt(1);\r\n    }\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n}\r\nexport class Zealot implements IUnit {\r\n    hitpoints = 2;\r\n    attack(unit: IUnit): void {\r\n        this.claw(unit);\r\n    }\r\n\r\n    alive(): boolean {\r\n        return true;\r\n    }\r\n\r\n    claw(unit: IUnit): void {\r\n        unit.hurt(2);\r\n    }\r\n\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n\r\n    hitpointBar(): string {\r\n        if (this.hitpoints === 2) {\r\n            return \"full\";\r\n        }\r\n        return \"not full\";\r\n    }\r\n}" }, "src/folder_1/3_kata.ts": { "language": "typescript", "mutants": [{ "id": "229", "mutatorName": "BlockStatement", "replacement": "{}", "status": "NoCoverage", "static": false, "coveredBy": [], "location": { "end": { "column": 6, "line": 31 }, "start": { "column": 31, "line": 29 } } }, { "id": "235", "mutatorName": "BlockStatement", "replacement": "{}", "status": "NoCoverage", "static": false, "coveredBy": [], "location": { "end": { "column": 6, "line": 48 }, "start": { "column": 31, "line": 46 } } }, { "id": "247", "mutatorName": "StringLiteral", "replacement": "\"\"", "status": "NoCoverage", "static": false, "coveredBy": [], "location": { "end": { "column": 26, "line": 66 }, "start": { "column": 16, "line": 66 } } }, { "id": "217", "mutatorName": "BlockStatement", "replacement": "{}", "status": "Survived", "static": false, "testsCompleted": 3, "coveredBy": ["69", "70", "71"], "location": { "end": { "column": 6, "line": 13 }, "start": { "column": 31, "line": 9 } } }, { "id": "216", "mutatorName": "ArrayDeclaration", "replacement": "[\"Stryker was here\"]", "status": "Survived", "static": false, "testsCompleted": 3, "coveredBy": ["69", "70", "71"], "location": { "end": { "column": 29, "line": 8 }, "start": { "column": 27, "line": 8 } } }, { "id": "218", "mutatorName": "ConditionalExpression", "replacement": "true", "statusReason": "expected 'not full' to equal 'full'", "status": "Killed", "static": false, "testsCompleted": 3, "killedBy": ["71"], "coveredBy": ["69", "70", "71"], "location": { "end": { "column": 43, "line": 10 }, "start": { "column": 13, "line": 10 } } }, { "id": "219", "mutatorName": "ConditionalExpression", "replacement": "false", "status": "Survived", "static": false, "testsCompleted": 3, "coveredBy": ["69", "70", "71"], "location": { "end": { "column": 43, "line": 10 }, "start": { "column": 13, "line": 10 } } }, { "id": "220", "mutatorName": "BlockStatement", "replacement": "{}", "status": "Survived", "static": false, "testsCompleted": 2, "coveredBy": ["69", "70"], "location": { "end": { "column": 10, "line": 12 }, "start": { "column": 45, "line": 10 } } }, { "id": "221", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "expected undefined to equal false", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["69"], "coveredBy": ["69"], "location": { "end": { "column": 6, "line": 17 }, "start": { "column": 22, "line": 15 } } }, { "id": "222", "mutatorName": "ConditionalExpression", "replacement": "true", "statusReason": "expected true to equal false", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["69"], "coveredBy": ["69"], "location": { "end": { "column": 34, "line": 16 }, "start": { "column": 16, "line": 16 } } }, { "id": "223", "mutatorName": "ConditionalExpression", "replacement": "false", "status": "Survived", "static": false, "testsCompleted": 1, "coveredBy": ["69"], "location": { "end": { "column": 34, "line": 16 }, "start": { "column": 16, "line": 16 } } }, { "id": "224", "mutatorName": "EqualityOperator", "replacement": "this.hitpoints >= 0", "status": "Survived", "static": false, "testsCompleted": 1, "coveredBy": ["69"], "location": { "end": { "column": 34, "line": 16 }, "start": { "column": 16, "line": 16 } } }, { "id": "225", "mutatorName": "EqualityOperator", "replacement": "this.hitpoints <= 0", "statusReason": "expected true to equal false", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["69"], "coveredBy": ["69"], "location": { "end": { "column": 34, "line": 16 }, "start": { "column": 16, "line": 16 } } }, { "id": "226", "mutatorName": "BlockStatement", "replacement": "{}", "status": "Survived", "static": false, "testsCompleted": 2, "coveredBy": ["69", "70"], "location": { "end": { "column": 6, "line": 21 }, "start": { "column": 28, "line": 19 } } }, { "id": "228", "mutatorName": "AssignmentOperator", "replacement": "this.hitpoints += damage", "statusReason": "expected true to equal false", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["69"], "coveredBy": ["69", "70"], "location": { "end": { "column": 33, "line": 24 }, "start": { "column": 9, "line": 24 } } }, { "id": "227", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "expected true to equal false", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["69"], "coveredBy": ["69", "70"], "location": { "end": { "column": 6, "line": 25 }, "start": { "column": 32, "line": 23 } } }, { "id": "230", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "expected undefined to equal true", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["69"], "coveredBy": ["69"], "location": { "end": { "column": 6, "line": 35 }, "start": { "column": 22, "line": 33 } } }, { "id": "231", "mutatorName": "BooleanLiteral", "replacement": "false", "statusReason": "expected false to equal true", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["69"], "coveredBy": ["69"], "location": { "end": { "column": 20, "line": 34 }, "start": { "column": 16, "line": 34 } } }, { "id": "232", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "expected true to equal false", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["69"], "coveredBy": ["69"], "location": { "end": { "column": 6, "line": 39 }, "start": { "column": 30, "line": 37 } } }, { "id": "233", "mutatorName": "BlockStatement", "replacement": "{}", "status": "Survived", "static": false, "testsCompleted": 1, "coveredBy": ["69"], "location": { "end": { "column": 6, "line": 42 }, "start": { "column": 32, "line": 40 } } }, { "id": "236", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "expected undefined to equal true", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["70"], "coveredBy": ["70"], "location": { "end": { "column": 6, "line": 52 }, "start": { "column": 22, "line": 50 } } }, { "id": "234", "mutatorName": "AssignmentOperator", "replacement": "this.hitpoints += damage", "status": "Survived", "static": false, "testsCompleted": 1, "coveredBy": ["69"], "location": { "end": { "column": 33, "line": 41 }, "start": { "column": 9, "line": 41 } } }, { "id": "237", "mutatorName": "BooleanLiteral", "replacement": "false", "statusReason": "expected false to equal true", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["70"], "coveredBy": ["70"], "location": { "end": { "column": 20, "line": 51 }, "start": { "column": 16, "line": 51 } } }, { "id": "238", "mutatorName": "BlockStatement", "replacement": "{}", "status": "Survived", "static": false, "testsCompleted": 1, "coveredBy": ["70"], "location": { "end": { "column": 6, "line": 56 }, "start": { "column": 29, "line": 54 } } }, { "id": "239", "mutatorName": "BlockStatement", "replacement": "{}", "status": "Survived", "static": false, "testsCompleted": 1, "coveredBy": ["70"], "location": { "end": { "column": 6, "line": 60 }, "start": { "column": 32, "line": 58 } } }, { "id": "240", "mutatorName": "AssignmentOperator", "replacement": "this.hitpoints += damage", "status": "Survived", "static": false, "testsCompleted": 1, "coveredBy": ["70"], "location": { "end": { "column": 33, "line": 59 }, "start": { "column": 9, "line": 59 } } }, { "id": "241", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "expected undefined to equal 'full'", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["71"], "coveredBy": ["71"], "location": { "end": { "column": 6, "line": 67 }, "start": { "column": 27, "line": 62 } } }, { "id": "242", "mutatorName": "ConditionalExpression", "replacement": "true", "status": "Survived", "static": false, "testsCompleted": 1, "coveredBy": ["71"], "location": { "end": { "column": 33, "line": 63 }, "start": { "column": 13, "line": 63 } } }, { "id": "243", "mutatorName": "ConditionalExpression", "replacement": "false", "statusReason": "expected 'not full' to equal 'full'", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["71"], "coveredBy": ["71"], "location": { "end": { "column": 33, "line": 63 }, "start": { "column": 13, "line": 63 } } }, { "id": "244", "mutatorName": "EqualityOperator", "replacement": "this.hitpoints !== 2", "statusReason": "expected 'not full' to equal 'full'", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["71"], "coveredBy": ["71"], "location": { "end": { "column": 33, "line": 63 }, "start": { "column": 13, "line": 63 } } }, { "id": "245", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "expected 'not full' to equal 'full'", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["71"], "coveredBy": ["71"], "location": { "end": { "column": 10, "line": 65 }, "start": { "column": 35, "line": 63 } } }, { "id": "246", "mutatorName": "StringLiteral", "replacement": "\"\"", "statusReason": "expected '' to equal 'full'", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["71"], "coveredBy": ["71"], "location": { "end": { "column": 26, "line": 64 }, "start": { "column": 20, "line": 64 } } }], "source": "﻿interface IUnit {\r\n    attack(unit: IUnit): void;\r\n    alive(): boolean;\r\n    hurt(damage: number): void;\r\n}\r\nexport class Zergling implements IUnit {\r\n    hitpoints = 1;\r\n    closeUnits: IUnit[] = [];\r\n    attack(unit: IUnit): void {\r\n        if (this.closeUnits.includes(unit)) {\r\n            unit.hurt(1);\r\n        }\r\n    }\r\n\r\n    alive(): boolean {\r\n        return this.hitpoints > 0;\r\n    }\r\n\r\n    run(unit: IUnit): void {\r\n        this.closeUnits.push(unit);\r\n    }\r\n\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n}\r\nexport class Marine implements IUnit {\r\n    hitpoints = 2;\r\n    attack(unit: IUnit): void {\r\n        this.shoot(unit);\r\n    }\r\n\r\n    alive(): boolean {\r\n        return true;\r\n    }\r\n\r\n    shoot(unit: IUnit): void {\r\n        unit.hurt(1);\r\n    }\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n}\r\nexport class Zealot implements IUnit {\r\n    hitpoints = 2;\r\n    attack(unit: IUnit): void {\r\n        this.claw(unit);\r\n    }\r\n\r\n    alive(): boolean {\r\n        return true;\r\n    }\r\n\r\n    claw(unit: IUnit): void {\r\n        unit.hurt(2);\r\n    }\r\n\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n\r\n    hitpointBar(): string {\r\n        if (this.hitpoints === 2) {\r\n            return \"full\";\r\n        }\r\n        return \"not full\";\r\n    }\r\n}" }, "src/folder_1/6_kata.ts": { "language": "typescript", "mutants": [{ "id": "291", "mutatorName": "BlockStatement", "replacement": "{}", "status": "NoCoverage", "static": false, "coveredBy": [], "location": { "end": { "column": 6, "line": 31 }, "start": { "column": 31, "line": 29 } } }, { "id": "297", "mutatorName": "BlockStatement", "replacement": "{}", "status": "NoCoverage", "static": false, "coveredBy": [], "location": { "end": { "column": 6, "line": 48 }, "start": { "column": 31, "line": 46 } } }, { "id": "309", "mutatorName": "StringLiteral", "replacement": "\"\"", "status": "NoCoverage", "static": false, "coveredBy": [], "location": { "end": { "column": 26, "line": 66 }, "start": { "column": 16, "line": 66 } } }, { "id": "279", "mutatorName": "BlockStatement", "replacement": "{}", "status": "Survived", "static": false, "testsCompleted": 3, "coveredBy": ["87", "88", "89"], "location": { "end": { "column": 6, "line": 13 }, "start": { "column": 31, "line": 9 } } }, { "id": "278", "mutatorName": "ArrayDeclaration", "replacement": "[\"Stryker was here\"]", "status": "Survived", "static": false, "testsCompleted": 3, "coveredBy": ["87", "88", "89"], "location": { "end": { "column": 29, "line": 8 }, "start": { "column": 27, "line": 8 } } }, { "id": "280", "mutatorName": "ConditionalExpression", "replacement": "true", "statusReason": "expected 'not full' to equal 'full'", "status": "Killed", "static": false, "testsCompleted": 3, "killedBy": ["89"], "coveredBy": ["87", "88", "89"], "location": { "end": { "column": 43, "line": 10 }, "start": { "column": 13, "line": 10 } } }, { "id": "281", "mutatorName": "ConditionalExpression", "replacement": "false", "status": "Survived", "static": false, "testsCompleted": 3, "coveredBy": ["87", "88", "89"], "location": { "end": { "column": 43, "line": 10 }, "start": { "column": 13, "line": 10 } } }, { "id": "282", "mutatorName": "BlockStatement", "replacement": "{}", "status": "Survived", "static": false, "testsCompleted": 2, "coveredBy": ["87", "88"], "location": { "end": { "column": 10, "line": 12 }, "start": { "column": 45, "line": 10 } } }, { "id": "283", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "expected undefined to equal false", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["87"], "coveredBy": ["87"], "location": { "end": { "column": 6, "line": 17 }, "start": { "column": 22, "line": 15 } } }, { "id": "284", "mutatorName": "ConditionalExpression", "replacement": "true", "statusReason": "expected true to equal false", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["87"], "coveredBy": ["87"], "location": { "end": { "column": 34, "line": 16 }, "start": { "column": 16, "line": 16 } } }, { "id": "285", "mutatorName": "ConditionalExpression", "replacement": "false", "status": "Survived", "static": false, "testsCompleted": 1, "coveredBy": ["87"], "location": { "end": { "column": 34, "line": 16 }, "start": { "column": 16, "line": 16 } } }, { "id": "286", "mutatorName": "EqualityOperator", "replacement": "this.hitpoints >= 0", "status": "Survived", "static": false, "testsCompleted": 1, "coveredBy": ["87"], "location": { "end": { "column": 34, "line": 16 }, "start": { "column": 16, "line": 16 } } }, { "id": "287", "mutatorName": "EqualityOperator", "replacement": "this.hitpoints <= 0", "statusReason": "expected true to equal false", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["87"], "coveredBy": ["87"], "location": { "end": { "column": 34, "line": 16 }, "start": { "column": 16, "line": 16 } } }, { "id": "288", "mutatorName": "BlockStatement", "replacement": "{}", "status": "Survived", "static": false, "testsCompleted": 2, "coveredBy": ["87", "88"], "location": { "end": { "column": 6, "line": 21 }, "start": { "column": 28, "line": 19 } } }, { "id": "289", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "expected true to equal false", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["87"], "coveredBy": ["87", "88"], "location": { "end": { "column": 6, "line": 25 }, "start": { "column": 32, "line": 23 } } }, { "id": "290", "mutatorName": "AssignmentOperator", "replacement": "this.hitpoints += damage", "statusReason": "expected true to equal false", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["87"], "coveredBy": ["87", "88"], "location": { "end": { "column": 33, "line": 24 }, "start": { "column": 9, "line": 24 } } }, { "id": "292", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "expected undefined to equal true", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["87"], "coveredBy": ["87"], "location": { "end": { "column": 6, "line": 35 }, "start": { "column": 22, "line": 33 } } }, { "id": "293", "mutatorName": "BooleanLiteral", "replacement": "false", "statusReason": "expected false to equal true", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["87"], "coveredBy": ["87"], "location": { "end": { "column": 20, "line": 34 }, "start": { "column": 16, "line": 34 } } }, { "id": "294", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "expected true to equal false", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["87"], "coveredBy": ["87"], "location": { "end": { "column": 6, "line": 39 }, "start": { "column": 30, "line": 37 } } }, { "id": "295", "mutatorName": "BlockStatement", "replacement": "{}", "status": "Survived", "static": false, "testsCompleted": 1, "coveredBy": ["87"], "location": { "end": { "column": 6, "line": 42 }, "start": { "column": 32, "line": 40 } } }, { "id": "296", "mutatorName": "AssignmentOperator", "replacement": "this.hitpoints += damage", "status": "Survived", "static": false, "testsCompleted": 1, "coveredBy": ["87"], "location": { "end": { "column": 33, "line": 41 }, "start": { "column": 9, "line": 41 } } }, { "id": "298", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "expected undefined to equal true", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["88"], "coveredBy": ["88"], "location": { "end": { "column": 6, "line": 52 }, "start": { "column": 22, "line": 50 } } }, { "id": "299", "mutatorName": "BooleanLiteral", "replacement": "false", "statusReason": "expected false to equal true", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["88"], "coveredBy": ["88"], "location": { "end": { "column": 20, "line": 51 }, "start": { "column": 16, "line": 51 } } }, { "id": "300", "mutatorName": "BlockStatement", "replacement": "{}", "status": "Survived", "static": false, "testsCompleted": 1, "coveredBy": ["88"], "location": { "end": { "column": 6, "line": 56 }, "start": { "column": 29, "line": 54 } } }, { "id": "301", "mutatorName": "BlockStatement", "replacement": "{}", "status": "Survived", "static": false, "testsCompleted": 1, "coveredBy": ["88"], "location": { "end": { "column": 6, "line": 60 }, "start": { "column": 32, "line": 58 } } }, { "id": "302", "mutatorName": "AssignmentOperator", "replacement": "this.hitpoints += damage", "status": "Survived", "static": false, "testsCompleted": 1, "coveredBy": ["88"], "location": { "end": { "column": 33, "line": 59 }, "start": { "column": 9, "line": 59 } } }, { "id": "304", "mutatorName": "ConditionalExpression", "replacement": "true", "status": "Survived", "static": false, "testsCompleted": 1, "coveredBy": ["89"], "location": { "end": { "column": 33, "line": 63 }, "start": { "column": 13, "line": 63 } } }, { "id": "303", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "expected undefined to equal 'full'", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["89"], "coveredBy": ["89"], "location": { "end": { "column": 6, "line": 67 }, "start": { "column": 27, "line": 62 } } }, { "id": "305", "mutatorName": "ConditionalExpression", "replacement": "false", "statusReason": "expected 'not full' to equal 'full'", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["89"], "coveredBy": ["89"], "location": { "end": { "column": 33, "line": 63 }, "start": { "column": 13, "line": 63 } } }, { "id": "306", "mutatorName": "EqualityOperator", "replacement": "this.hitpoints !== 2", "statusReason": "expected 'not full' to equal 'full'", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["89"], "coveredBy": ["89"], "location": { "end": { "column": 33, "line": 63 }, "start": { "column": 13, "line": 63 } } }, { "id": "307", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "expected 'not full' to equal 'full'", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["89"], "coveredBy": ["89"], "location": { "end": { "column": 10, "line": 65 }, "start": { "column": 35, "line": 63 } } }, { "id": "308", "mutatorName": "StringLiteral", "replacement": "\"\"", "statusReason": "expected '' to equal 'full'", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["89"], "coveredBy": ["89"], "location": { "end": { "column": 26, "line": 64 }, "start": { "column": 20, "line": 64 } } }], "source": "﻿interface IUnit {\r\n    attack(unit: IUnit): void;\r\n    alive(): boolean;\r\n    hurt(damage: number): void;\r\n}\r\nexport class Zergling implements IUnit {\r\n    hitpoints = 1;\r\n    closeUnits: IUnit[] = [];\r\n    attack(unit: IUnit): void {\r\n        if (this.closeUnits.includes(unit)) {\r\n            unit.hurt(1);\r\n        }\r\n    }\r\n\r\n    alive(): boolean {\r\n        return this.hitpoints > 0;\r\n    }\r\n\r\n    run(unit: IUnit): void {\r\n        this.closeUnits.push(unit);\r\n    }\r\n\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n}\r\nexport class Marine implements IUnit {\r\n    hitpoints = 2;\r\n    attack(unit: IUnit): void {\r\n        this.shoot(unit);\r\n    }\r\n\r\n    alive(): boolean {\r\n        return true;\r\n    }\r\n\r\n    shoot(unit: IUnit): void {\r\n        unit.hurt(1);\r\n    }\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n}\r\nexport class Zealot implements IUnit {\r\n    hitpoints = 2;\r\n    attack(unit: IUnit): void {\r\n        this.claw(unit);\r\n    }\r\n\r\n    alive(): boolean {\r\n        return true;\r\n    }\r\n\r\n    claw(unit: IUnit): void {\r\n        unit.hurt(2);\r\n    }\r\n\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n\r\n    hitpointBar(): string {\r\n        if (this.hitpoints === 2) {\r\n            return \"full\";\r\n        }\r\n        return \"not full\";\r\n    }\r\n}" }, "src/folder_1/9_kata.ts": { "language": "typescript", "mutants": [{ "id": "353", "mutatorName": "BlockStatement", "replacement": "{}", "status": "NoCoverage", "static": false, "coveredBy": [], "location": { "end": { "column": 6, "line": 31 }, "start": { "column": 31, "line": 29 } } }, { "id": "359", "mutatorName": "BlockStatement", "replacement": "{}", "status": "NoCoverage", "static": false, "coveredBy": [], "location": { "end": { "column": 6, "line": 48 }, "start": { "column": 31, "line": 46 } } }, { "id": "371", "mutatorName": "StringLiteral", "replacement": "\"\"", "status": "NoCoverage", "static": false, "coveredBy": [], "location": { "end": { "column": 26, "line": 66 }, "start": { "column": 16, "line": 66 } } }, { "id": "340", "mutatorName": "ArrayDeclaration", "replacement": "[\"Stryker was here\"]", "status": "Survived", "static": false, "testsCompleted": 3, "coveredBy": ["105", "106", "107"], "location": { "end": { "column": 29, "line": 8 }, "start": { "column": 27, "line": 8 } } }, { "id": "341", "mutatorName": "BlockStatement", "replacement": "{}", "status": "Survived", "static": false, "testsCompleted": 3, "coveredBy": ["105", "106", "107"], "location": { "end": { "column": 6, "line": 13 }, "start": { "column": 31, "line": 9 } } }, { "id": "342", "mutatorName": "ConditionalExpression", "replacement": "true", "statusReason": "expected 'not full' to equal 'full'", "status": "Killed", "static": false, "testsCompleted": 3, "killedBy": ["107"], "coveredBy": ["105", "106", "107"], "location": { "end": { "column": 43, "line": 10 }, "start": { "column": 13, "line": 10 } } }, { "id": "343", "mutatorName": "ConditionalExpression", "replacement": "false", "status": "Survived", "static": false, "testsCompleted": 3, "coveredBy": ["105", "106", "107"], "location": { "end": { "column": 43, "line": 10 }, "start": { "column": 13, "line": 10 } } }, { "id": "344", "mutatorName": "BlockStatement", "replacement": "{}", "status": "Survived", "static": false, "testsCompleted": 2, "coveredBy": ["105", "106"], "location": { "end": { "column": 10, "line": 12 }, "start": { "column": 45, "line": 10 } } }, { "id": "345", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "expected undefined to equal false", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["105"], "coveredBy": ["105"], "location": { "end": { "column": 6, "line": 17 }, "start": { "column": 22, "line": 15 } } }, { "id": "346", "mutatorName": "ConditionalExpression", "replacement": "true", "statusReason": "expected true to equal false", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["105"], "coveredBy": ["105"], "location": { "end": { "column": 34, "line": 16 }, "start": { "column": 16, "line": 16 } } }, { "id": "348", "mutatorName": "EqualityOperator", "replacement": "this.hitpoints >= 0", "status": "Survived", "static": false, "testsCompleted": 1, "coveredBy": ["105"], "location": { "end": { "column": 34, "line": 16 }, "start": { "column": 16, "line": 16 } } }, { "id": "347", "mutatorName": "ConditionalExpression", "replacement": "false", "status": "Survived", "static": false, "testsCompleted": 1, "coveredBy": ["105"], "location": { "end": { "column": 34, "line": 16 }, "start": { "column": 16, "line": 16 } } }, { "id": "349", "mutatorName": "EqualityOperator", "replacement": "this.hitpoints <= 0", "statusReason": "expected true to equal false", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["105"], "coveredBy": ["105"], "location": { "end": { "column": 34, "line": 16 }, "start": { "column": 16, "line": 16 } } }, { "id": "350", "mutatorName": "BlockStatement", "replacement": "{}", "status": "Survived", "static": false, "testsCompleted": 2, "coveredBy": ["105", "106"], "location": { "end": { "column": 6, "line": 21 }, "start": { "column": 28, "line": 19 } } }, { "id": "351", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "expected true to equal false", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["105"], "coveredBy": ["105", "106"], "location": { "end": { "column": 6, "line": 25 }, "start": { "column": 32, "line": 23 } } }, { "id": "352", "mutatorName": "AssignmentOperator", "replacement": "this.hitpoints += damage", "statusReason": "expected true to equal false", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["105"], "coveredBy": ["105", "106"], "location": { "end": { "column": 33, "line": 24 }, "start": { "column": 9, "line": 24 } } }, { "id": "354", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "expected undefined to equal true", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["105"], "coveredBy": ["105"], "location": { "end": { "column": 6, "line": 35 }, "start": { "column": 22, "line": 33 } } }, { "id": "355", "mutatorName": "BooleanLiteral", "replacement": "false", "statusReason": "expected false to equal true", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["105"], "coveredBy": ["105"], "location": { "end": { "column": 20, "line": 34 }, "start": { "column": 16, "line": 34 } } }, { "id": "356", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "expected true to equal false", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["105"], "coveredBy": ["105"], "location": { "end": { "column": 6, "line": 39 }, "start": { "column": 30, "line": 37 } } }, { "id": "357", "mutatorName": "BlockStatement", "replacement": "{}", "status": "Survived", "static": false, "testsCompleted": 1, "coveredBy": ["105"], "location": { "end": { "column": 6, "line": 42 }, "start": { "column": 32, "line": 40 } } }, { "id": "358", "mutatorName": "AssignmentOperator", "replacement": "this.hitpoints += damage", "status": "Survived", "static": false, "testsCompleted": 1, "coveredBy": ["105"], "location": { "end": { "column": 33, "line": 41 }, "start": { "column": 9, "line": 41 } } }, { "id": "360", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "expected undefined to equal true", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["106"], "coveredBy": ["106"], "location": { "end": { "column": 6, "line": 52 }, "start": { "column": 22, "line": 50 } } }, { "id": "361", "mutatorName": "BooleanLiteral", "replacement": "false", "statusReason": "expected false to equal true", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["106"], "coveredBy": ["106"], "location": { "end": { "column": 20, "line": 51 }, "start": { "column": 16, "line": 51 } } }, { "id": "362", "mutatorName": "BlockStatement", "replacement": "{}", "status": "Survived", "static": false, "testsCompleted": 1, "coveredBy": ["106"], "location": { "end": { "column": 6, "line": 56 }, "start": { "column": 29, "line": 54 } } }, { "id": "363", "mutatorName": "BlockStatement", "replacement": "{}", "status": "Survived", "static": false, "testsCompleted": 1, "coveredBy": ["106"], "location": { "end": { "column": 6, "line": 60 }, "start": { "column": 32, "line": 58 } } }, { "id": "364", "mutatorName": "AssignmentOperator", "replacement": "this.hitpoints += damage", "status": "Survived", "static": false, "testsCompleted": 1, "coveredBy": ["106"], "location": { "end": { "column": 33, "line": 59 }, "start": { "column": 9, "line": 59 } } }, { "id": "365", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "expected undefined to equal 'full'", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["107"], "coveredBy": ["107"], "location": { "end": { "column": 6, "line": 67 }, "start": { "column": 27, "line": 62 } } }, { "id": "366", "mutatorName": "ConditionalExpression", "replacement": "true", "status": "Survived", "static": false, "testsCompleted": 1, "coveredBy": ["107"], "location": { "end": { "column": 33, "line": 63 }, "start": { "column": 13, "line": 63 } } }, { "id": "367", "mutatorName": "ConditionalExpression", "replacement": "false", "statusReason": "expected 'not full' to equal 'full'", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["107"], "coveredBy": ["107"], "location": { "end": { "column": 33, "line": 63 }, "start": { "column": 13, "line": 63 } } }, { "id": "368", "mutatorName": "EqualityOperator", "replacement": "this.hitpoints !== 2", "statusReason": "expected 'not full' to equal 'full'", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["107"], "coveredBy": ["107"], "location": { "end": { "column": 33, "line": 63 }, "start": { "column": 13, "line": 63 } } }, { "id": "369", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "expected 'not full' to equal 'full'", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["107"], "coveredBy": ["107"], "location": { "end": { "column": 10, "line": 65 }, "start": { "column": 35, "line": 63 } } }, { "id": "370", "mutatorName": "StringLiteral", "replacement": "\"\"", "statusReason": "expected '' to equal 'full'", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["107"], "coveredBy": ["107"], "location": { "end": { "column": 26, "line": 64 }, "start": { "column": 20, "line": 64 } } }], "source": "﻿interface IUnit {\r\n    attack(unit: IUnit): void;\r\n    alive(): boolean;\r\n    hurt(damage: number): void;\r\n}\r\nexport class Zergling implements IUnit {\r\n    hitpoints = 1;\r\n    closeUnits: IUnit[] = [];\r\n    attack(unit: IUnit): void {\r\n        if (this.closeUnits.includes(unit)) {\r\n            unit.hurt(1);\r\n        }\r\n    }\r\n\r\n    alive(): boolean {\r\n        return this.hitpoints > 0;\r\n    }\r\n\r\n    run(unit: IUnit): void {\r\n        this.closeUnits.push(unit);\r\n    }\r\n\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n}\r\nexport class Marine implements IUnit {\r\n    hitpoints = 2;\r\n    attack(unit: IUnit): void {\r\n        this.shoot(unit);\r\n    }\r\n\r\n    alive(): boolean {\r\n        return true;\r\n    }\r\n\r\n    shoot(unit: IUnit): void {\r\n        unit.hurt(1);\r\n    }\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n}\r\nexport class Zealot implements IUnit {\r\n    hitpoints = 2;\r\n    attack(unit: IUnit): void {\r\n        this.claw(unit);\r\n    }\r\n\r\n    alive(): boolean {\r\n        return true;\r\n    }\r\n\r\n    claw(unit: IUnit): void {\r\n        unit.hurt(2);\r\n    }\r\n\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n\r\n    hitpointBar(): string {\r\n        if (this.hitpoints === 2) {\r\n            return \"full\";\r\n        }\r\n        return \"not full\";\r\n    }\r\n}" }, "src/folder_1/10_kata.ts": { "language": "typescript", "mutants": [{ "id": "1", "mutatorName": "StringLiteral", "replacement": "\"\"", "statusReason": "' World' == 'Hello World'", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["4"], "coveredBy": ["4", "5", "6", "7"], "location": { "end": { "column": 18, "line": 2 }, "start": { "column": 11, "line": 2 } } }, { "id": "2", "mutatorName": "StringLiteral", "replacement": "\"\"", "statusReason": "'Hello ' == 'Hello World'", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["4"], "coveredBy": ["4", "6", "7"], "location": { "end": { "column": 18, "line": 3 }, "start": { "column": 11, "line": 3 } } }, { "id": "3", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "undefined == 'Hello World'", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["4"], "coveredBy": ["4"], "location": { "end": { "column": 2, "line": 8 }, "start": { "column": 38, "line": 6 } } }, { "id": "4", "mutatorName": "StringLiteral", "replacement": "\"\"", "statusReason": "'HelloWorld' == 'Hello World'", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["4"], "coveredBy": ["4"], "location": { "end": { "column": 54, "line": 7 }, "start": { "column": 51, "line": 7 } } }, { "id": "0", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "'' == 'Hello World'", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["4"], "coveredBy": ["4", "5", "6", "7"], "location": { "end": { "column": 2, "line": 4 }, "start": { "column": 40, "line": 1 } } }], "source": "export function* helloWorldGenerator() {\n    yield 'Hello';\n    yield 'World';\n}\n\nexport default function HelloWorld() {\n    return Array.from(helloWorldGenerator()).join(' ');\n}\n" }, "src/folder_1/11_kata.ts": { "language": "typescript", "mutants": [{ "id": "5", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "expected undefined to equal +0", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["8"], "coveredBy": ["8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18"], "location": { "end": { "column": 2, "line": 27 }, "start": { "column": 36, "line": 3 } } }, { "id": "6", "mutatorName": "ArithmeticOperator", "replacement": "+commands[0] / +commands[1]", "statusReason": "expected 0.21600000000000003 to equal 5.4", "status": "Killed", "static": false, "testsCompleted": 2, "killedBy": ["9"], "coveredBy": ["8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18"], "location": { "end": { "column": 48, "line": 4 }, "start": { "column": 21, "line": 4 } } }, { "id": "7", "mutatorName": "UnaryOperator", "replacement": "-commands[0]", "statusReason": "expected -5.4 to equal 5.4", "status": "Killed", "static": false, "testsCompleted": 2, "killedBy": ["9"], "coveredBy": ["8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18"], "location": { "end": { "column": 33, "line": 4 }, "start": { "column": 21, "line": 4 } } }, { "id": "8", "mutatorName": "UnaryOperator", "replacement": "-commands[1]", "statusReason": "expected -5.4 to equal 5.4", "status": "Killed", "static": false, "testsCompleted": 2, "killedBy": ["9"], "coveredBy": ["8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18"], "location": { "end": { "column": 48, "line": 4 }, "start": { "column": 36, "line": 4 } } }, { "id": "9", "mutatorName": "ArrayDeclaration", "replacement": "[]", "statusReason": "expected 1080 to equal 1047.6000000000001", "status": "Killed", "static": false, "testsCompleted": 7, "killedBy": ["14"], "coveredBy": ["8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18"], "location": { "end": { "column": 6, "line": 11 }, "start": { "column": 28, "line": 5 } } }, { "id": "10", "mutatorName": "ObjectLiteral", "replacement": "{}", "statusReason": "expected 48600 to equal 45900", "status": "Killed", "static": false, "testsCompleted": 11, "killedBy": ["18"], "coveredBy": ["8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18"], "location": { "end": { "column": 42, "line": 6 }, "start": { "column": 9, "line": 6 } } }, { "id": "11", "mutatorName": "ObjectLiteral", "replacement": "{}", "statusReason": "expected 10044 to equal 9720", "status": "Killed", "static": false, "testsCompleted": 10, "killedBy": ["17"], "coveredBy": ["8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18"], "location": { "end": { "column": 42, "line": 7 }, "start": { "column": 9, "line": 7 } } }, { "id": "12", "mutatorName": "ObjectLiteral", "replacement": "{}", "statusReason": "expected 7182.000000000001 to equal 7030.8", "status": "Killed", "static": false, "testsCompleted": 9, "killedBy": ["16"], "coveredBy": ["8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18"], "location": { "end": { "column": 41, "line": 8 }, "start": { "column": 9, "line": 8 } } }, { "id": "13", "mutatorName": "ObjectLiteral", "replacement": "{}", "statusReason": "expected 5238 to equal 5130", "status": "Killed", "static": false, "testsCompleted": 8, "killedBy": ["15"], "coveredBy": ["8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18"], "location": { "end": { "column": 41, "line": 9 }, "start": { "column": 9, "line": 9 } } }, { "id": "14", "mutatorName": "ObjectLiteral", "replacement": "{}", "statusReason": "expected 1080 to equal 1047.6000000000001", "status": "Killed", "static": false, "testsCompleted": 7, "killedBy": ["14"], "coveredBy": ["8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18"], "location": { "end": { "column": 41, "line": 10 }, "start": { "column": 9, "line": 10 } } }, { "id": "15", "mutatorName": "MethodExpression", "replacement": "volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})", "statusReason": "expected 1080 to equal 1047.6000000000001", "status": "Killed", "static": false, "testsCompleted": 7, "killedBy": ["14"], "coveredBy": ["8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18"], "location": { "end": { "column": 7, "line": 18 }, "start": { "column": 5, "line": 12 } } }, { "id": "16", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "expected 1080 to equal 1047.6000000000001", "status": "Killed", "static": false, "testsCompleted": 7, "killedBy": ["14"], "coveredBy": ["8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18"], "location": { "end": { "column": 6, "line": 18 }, "start": { "column": 54, "line": 12 } } }, { "id": "17", "mutatorName": "ConditionalExpression", "replacement": "true", "statusReason": "expected 4.59 to equal 5.4", "status": "Killed", "static": false, "testsCompleted": 2, "killedBy": ["9"], "coveredBy": ["8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18"], "location": { "end": { "column": 32, "line": 13 }, "start": { "column": 13, "line": 13 } } }, { "id": "18", "mutatorName": "ConditionalExpression", "replacement": "false", "statusReason": "expected 1080 to equal 1047.6000000000001", "status": "Killed", "static": false, "testsCompleted": 7, "killedBy": ["14"], "coveredBy": ["8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18"], "location": { "end": { "column": 32, "line": 13 }, "start": { "column": 13, "line": 13 } } }, { "id": "19", "mutatorName": "EqualityOperator", "replacement": "totalCost > volume", "statusReason": "expected 1080 to equal 1047.6000000000001", "status": "Killed", "static": false, "testsCompleted": 7, "killedBy": ["14"], "coveredBy": ["8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18"], "location": { "end": { "column": 32, "line": 13 }, "start": { "column": 13, "line": 13 } } }, { "id": "20", "mutatorName": "EqualityOperator", "replacement": "totalCost < volume", "statusReason": "expected 4.59 to equal 5.4", "status": "Killed", "static": false, "testsCompleted": 2, "killedBy": ["9"], "coveredBy": ["8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18"], "location": { "end": { "column": 32, "line": 13 }, "start": { "column": 13, "line": 13 } } }, { "id": "21", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "expected 1080 to equal 1047.6000000000001", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["14"], "coveredBy": ["14", "15", "16", "17", "18"], "location": { "end": { "column": 10, "line": 16 }, "start": { "column": 34, "line": 13 } } }, { "id": "23", "mutatorName": "ArithmeticOperator", "replacement": "1 + discount", "statusReason": "expected 1112.4 to equal 1047.6000000000001", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["14"], "coveredBy": ["14", "15", "16", "17", "18"], "location": { "end": { "column": 50, "line": 14 }, "start": { "column": 38, "line": 14 } } }, { "id": "24", "mutatorName": "BooleanLiteral", "replacement": "false", "statusReason": "expected 4976.1 to equal 5130", "status": "Killed", "static": false, "testsCompleted": 2, "killedBy": ["15"], "coveredBy": ["14", "15", "16", "17", "18"], "location": { "end": { "column": 24, "line": 15 }, "start": { "column": 20, "line": 15 } } }, { "id": "22", "mutatorName": "ArithmeticOperator", "replacement": "totalCost / (1 - discount)", "statusReason": "expected 1113.4020618556704 to equal 1047.6000000000001", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["14"], "coveredBy": ["14", "15", "16", "17", "18"], "location": { "end": { "column": 51, "line": 14 }, "start": { "column": 25, "line": 14 } } }, { "id": "25", "mutatorName": "BooleanLiteral", "replacement": "true", "statusReason": "expected 1080 to equal 1047.6000000000001", "status": "Killed", "static": false, "testsCompleted": 7, "killedBy": ["14"], "coveredBy": ["8", "9", "10", "11", "12", "13", "14", "15", "16", "17"], "location": { "end": { "column": 21, "line": 17 }, "start": { "column": 16, "line": 17 } } }, { "id": "26", "mutatorName": "ObjectLiteral", "replacement": "{}", "statusReason": "expected NaN to equal +0", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["8"], "coveredBy": ["8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18"], "location": { "end": { "column": 6, "line": 25 }, "start": { "column": 24, "line": 19 } } }, { "id": "27", "mutatorName": "ArithmeticOperator", "replacement": "totalCost / (1 + stateTaxes[commands[2]] / 100)", "statusReason": "expected 4.62962962962963 to equal 5.4", "status": "Killed", "static": false, "testsCompleted": 2, "killedBy": ["9"], "coveredBy": ["8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18"], "location": { "end": { "column": 59, "line": 26 }, "start": { "column": 12, "line": 26 } } }, { "id": "29", "mutatorName": "ArithmeticOperator", "replacement": "stateTaxes[commands[2]] * 100", "statusReason": "expected 4005 to equal 5.4", "status": "Killed", "static": false, "testsCompleted": 2, "killedBy": ["9"], "coveredBy": ["8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18"], "location": { "end": { "column": 58, "line": 26 }, "start": { "column": 29, "line": 26 } } }, { "id": "28", "mutatorName": "ArithmeticOperator", "replacement": "1 - stateTaxes[commands[2]] / 100", "statusReason": "expected 4.6000000000000005 to equal 5.4", "status": "Killed", "static": false, "testsCompleted": 2, "killedBy": ["9"], "coveredBy": ["8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18"], "location": { "end": { "column": 58, "line": 26 }, "start": { "column": 25, "line": 26 } } }], "source": "﻿\r\n\r\nexport const input = (commands) => {\r\n    let totalCost = +commands[0] * +commands[1];\r\n    const volumeDiscount = [\r\n        { volume: 50000, discount: 0.15 },\r\n        { volume: 10000, discount: 0.10 },\r\n        { volume: 7000, discount: 0.07 },\r\n        { volume: 5000, discount: 0.05 },\r\n        { volume: 1000, discount: 0.03 },\r\n    ]\r\n    volumeDiscount.some(({volume, discount}, idx) => {\r\n        if (totalCost >= volume) {\r\n            totalCost = totalCost * (1 - discount)\r\n            return true;\r\n        }\r\n        return false;\r\n    })\r\n    const stateTaxes = {\r\n        UT: 6.85,\r\n        NV: 8.00,\r\n        TX: 6.25,\r\n        AL: 4.00,\r\n        CA: 8.25,\r\n    }\r\n    return totalCost * (1 + stateTaxes[commands[2]] / 100);\r\n}" }, "src/folder_1/13_kata.ts": { "language": "typescript", "mutants": [{ "id": "62", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "'' == 'Hello World'", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["22"], "coveredBy": ["22", "23", "24", "25"], "location": { "end": { "column": 2, "line": 4 }, "start": { "column": 40, "line": 1 } } }, { "id": "63", "mutatorName": "StringLiteral", "replacement": "\"\"", "statusReason": "' World' == 'Hello World'", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["22"], "coveredBy": ["22", "23", "24", "25"], "location": { "end": { "column": 18, "line": 2 }, "start": { "column": 11, "line": 2 } } }, { "id": "64", "mutatorName": "StringLiteral", "replacement": "\"\"", "statusReason": "'Hello ' == 'Hello World'", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["22"], "coveredBy": ["22", "24", "25"], "location": { "end": { "column": 18, "line": 3 }, "start": { "column": 11, "line": 3 } } }, { "id": "65", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "undefined == 'Hello World'", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["22"], "coveredBy": ["22"], "location": { "end": { "column": 2, "line": 8 }, "start": { "column": 38, "line": 6 } } }, { "id": "66", "mutatorName": "StringLiteral", "replacement": "\"\"", "statusReason": "'HelloWorld' == 'Hello World'", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["22"], "coveredBy": ["22"], "location": { "end": { "column": 54, "line": 7 }, "start": { "column": 51, "line": 7 } } }], "source": "export function* helloWorldGenerator() {\n    yield 'Hello';\n    yield 'World';\n}\n\nexport default function HelloWorld() {\n    return Array.from(helloWorldGenerator()).join(' ');\n}\n" }, "src/folder_1/14_kata.ts": { "language": "typescript", "mutants": [{ "id": "67", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "expected undefined to equal +0", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["26"], "coveredBy": ["26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36"], "location": { "end": { "column": 2, "line": 27 }, "start": { "column": 36, "line": 3 } } }, { "id": "68", "mutatorName": "ArithmeticOperator", "replacement": "+commands[0] / +commands[1]", "statusReason": "expected 0.21600000000000003 to equal 5.4", "status": "Killed", "static": false, "testsCompleted": 2, "killedBy": ["27"], "coveredBy": ["26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36"], "location": { "end": { "column": 48, "line": 4 }, "start": { "column": 21, "line": 4 } } }, { "id": "69", "mutatorName": "UnaryOperator", "replacement": "-commands[0]", "statusReason": "expected -5.4 to equal 5.4", "status": "Killed", "static": false, "testsCompleted": 2, "killedBy": ["27"], "coveredBy": ["26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36"], "location": { "end": { "column": 33, "line": 4 }, "start": { "column": 21, "line": 4 } } }, { "id": "70", "mutatorName": "UnaryOperator", "replacement": "-commands[1]", "statusReason": "expected -5.4 to equal 5.4", "status": "Killed", "static": false, "testsCompleted": 2, "killedBy": ["27"], "coveredBy": ["26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36"], "location": { "end": { "column": 48, "line": 4 }, "start": { "column": 36, "line": 4 } } }, { "id": "71", "mutatorName": "ArrayDeclaration", "replacement": "[]", "statusReason": "expected 1080 to equal 1047.6000000000001", "status": "Killed", "static": false, "testsCompleted": 7, "killedBy": ["32"], "coveredBy": ["26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36"], "location": { "end": { "column": 6, "line": 11 }, "start": { "column": 28, "line": 5 } } }, { "id": "72", "mutatorName": "ObjectLiteral", "replacement": "{}", "statusReason": "expected 48600 to equal 45900", "status": "Killed", "static": false, "testsCompleted": 11, "killedBy": ["36"], "coveredBy": ["26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36"], "location": { "end": { "column": 42, "line": 6 }, "start": { "column": 9, "line": 6 } } }, { "id": "73", "mutatorName": "ObjectLiteral", "replacement": "{}", "statusReason": "expected 10044 to equal 9720", "status": "Killed", "static": false, "testsCompleted": 10, "killedBy": ["35"], "coveredBy": ["26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36"], "location": { "end": { "column": 42, "line": 7 }, "start": { "column": 9, "line": 7 } } }, { "id": "74", "mutatorName": "ObjectLiteral", "replacement": "{}", "statusReason": "expected 7182.000000000001 to equal 7030.8", "status": "Killed", "static": false, "testsCompleted": 9, "killedBy": ["34"], "coveredBy": ["26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36"], "location": { "end": { "column": 41, "line": 8 }, "start": { "column": 9, "line": 8 } } }, { "id": "75", "mutatorName": "ObjectLiteral", "replacement": "{}", "statusReason": "expected 5238 to equal 5130", "status": "Killed", "static": false, "testsCompleted": 8, "killedBy": ["33"], "coveredBy": ["26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36"], "location": { "end": { "column": 41, "line": 9 }, "start": { "column": 9, "line": 9 } } }, { "id": "76", "mutatorName": "ObjectLiteral", "replacement": "{}", "statusReason": "expected 1080 to equal 1047.6000000000001", "status": "Killed", "static": false, "testsCompleted": 7, "killedBy": ["32"], "coveredBy": ["26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36"], "location": { "end": { "column": 41, "line": 10 }, "start": { "column": 9, "line": 10 } } }, { "id": "77", "mutatorName": "MethodExpression", "replacement": "volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})", "statusReason": "expected 1080 to equal 1047.6000000000001", "status": "Killed", "static": false, "testsCompleted": 7, "killedBy": ["32"], "coveredBy": ["26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36"], "location": { "end": { "column": 7, "line": 18 }, "start": { "column": 5, "line": 12 } } }, { "id": "78", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "expected 1080 to equal 1047.6000000000001", "status": "Killed", "static": false, "testsCompleted": 7, "killedBy": ["32"], "coveredBy": ["26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36"], "location": { "end": { "column": 6, "line": 18 }, "start": { "column": 54, "line": 12 } } }, { "id": "79", "mutatorName": "ConditionalExpression", "replacement": "true", "statusReason": "expected 4.59 to equal 5.4", "status": "Killed", "static": false, "testsCompleted": 2, "killedBy": ["27"], "coveredBy": ["26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36"], "location": { "end": { "column": 32, "line": 13 }, "start": { "column": 13, "line": 13 } } }, { "id": "80", "mutatorName": "ConditionalExpression", "replacement": "false", "statusReason": "expected 1080 to equal 1047.6000000000001", "status": "Killed", "static": false, "testsCompleted": 7, "killedBy": ["32"], "coveredBy": ["26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36"], "location": { "end": { "column": 32, "line": 13 }, "start": { "column": 13, "line": 13 } } }, { "id": "82", "mutatorName": "EqualityOperator", "replacement": "totalCost < volume", "statusReason": "expected 4.59 to equal 5.4", "status": "Killed", "static": false, "testsCompleted": 2, "killedBy": ["27"], "coveredBy": ["26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36"], "location": { "end": { "column": 32, "line": 13 }, "start": { "column": 13, "line": 13 } } }, { "id": "81", "mutatorName": "EqualityOperator", "replacement": "totalCost > volume", "statusReason": "expected 1080 to equal 1047.6000000000001", "status": "Killed", "static": false, "testsCompleted": 7, "killedBy": ["32"], "coveredBy": ["26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36"], "location": { "end": { "column": 32, "line": 13 }, "start": { "column": 13, "line": 13 } } }, { "id": "84", "mutatorName": "ArithmeticOperator", "replacement": "totalCost / (1 - discount)", "statusReason": "expected 1113.4020618556704 to equal 1047.6000000000001", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["32"], "coveredBy": ["32", "33", "34", "35", "36"], "location": { "end": { "column": 51, "line": 14 }, "start": { "column": 25, "line": 14 } } }, { "id": "83", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "expected 1080 to equal 1047.6000000000001", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["32"], "coveredBy": ["32", "33", "34", "35", "36"], "location": { "end": { "column": 10, "line": 16 }, "start": { "column": 34, "line": 13 } } }, { "id": "85", "mutatorName": "ArithmeticOperator", "replacement": "1 + discount", "statusReason": "expected 1112.4 to equal 1047.6000000000001", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["32"], "coveredBy": ["32", "33", "34", "35", "36"], "location": { "end": { "column": 50, "line": 14 }, "start": { "column": 38, "line": 14 } } }, { "id": "86", "mutatorName": "BooleanLiteral", "replacement": "false", "statusReason": "expected 4976.1 to equal 5130", "status": "Killed", "static": false, "testsCompleted": 2, "killedBy": ["33"], "coveredBy": ["32", "33", "34", "35", "36"], "location": { "end": { "column": 24, "line": 15 }, "start": { "column": 20, "line": 15 } } }, { "id": "87", "mutatorName": "BooleanLiteral", "replacement": "true", "statusReason": "expected 1080 to equal 1047.6000000000001", "status": "Killed", "static": false, "testsCompleted": 7, "killedBy": ["32"], "coveredBy": ["26", "27", "28", "29", "30", "31", "32", "33", "34", "35"], "location": { "end": { "column": 21, "line": 17 }, "start": { "column": 16, "line": 17 } } }, { "id": "88", "mutatorName": "ObjectLiteral", "replacement": "{}", "statusReason": "expected NaN to equal +0", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["26"], "coveredBy": ["26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36"], "location": { "end": { "column": 6, "line": 25 }, "start": { "column": 24, "line": 19 } } }, { "id": "90", "mutatorName": "ArithmeticOperator", "replacement": "1 - stateTaxes[commands[2]] / 100", "statusReason": "expected 4.6000000000000005 to equal 5.4", "status": "Killed", "static": false, "testsCompleted": 2, "killedBy": ["27"], "coveredBy": ["26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36"], "location": { "end": { "column": 58, "line": 26 }, "start": { "column": 25, "line": 26 } } }, { "id": "89", "mutatorName": "ArithmeticOperator", "replacement": "totalCost / (1 + stateTaxes[commands[2]] / 100)", "statusReason": "expected 4.62962962962963 to equal 5.4", "status": "Killed", "static": false, "testsCompleted": 2, "killedBy": ["27"], "coveredBy": ["26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36"], "location": { "end": { "column": 59, "line": 26 }, "start": { "column": 12, "line": 26 } } }, { "id": "91", "mutatorName": "ArithmeticOperator", "replacement": "stateTaxes[commands[2]] * 100", "statusReason": "expected 4005 to equal 5.4", "status": "Killed", "static": false, "testsCompleted": 2, "killedBy": ["27"], "coveredBy": ["26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36"], "location": { "end": { "column": 58, "line": 26 }, "start": { "column": 29, "line": 26 } } }], "source": "﻿\r\n\r\nexport const input = (commands) => {\r\n    let totalCost = +commands[0] * +commands[1];\r\n    const volumeDiscount = [\r\n        { volume: 50000, discount: 0.15 },\r\n        { volume: 10000, discount: 0.10 },\r\n        { volume: 7000, discount: 0.07 },\r\n        { volume: 5000, discount: 0.05 },\r\n        { volume: 1000, discount: 0.03 },\r\n    ]\r\n    volumeDiscount.some(({volume, discount}, idx) => {\r\n        if (totalCost >= volume) {\r\n            totalCost = totalCost * (1 - discount)\r\n            return true;\r\n        }\r\n        return false;\r\n    })\r\n    const stateTaxes = {\r\n        UT: 6.85,\r\n        NV: 8.00,\r\n        TX: 6.25,\r\n        AL: 4.00,\r\n        CA: 8.25,\r\n    }\r\n    return totalCost * (1 + stateTaxes[commands[2]] / 100);\r\n}" }, "src/folder_1/16_kata.ts": { "language": "typescript", "mutants": [{ "id": "125", "mutatorName": "StringLiteral", "replacement": "\"\"", "statusReason": "' World' == 'Hello World'", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["40"], "coveredBy": ["40", "41", "42", "43"], "location": { "end": { "column": 18, "line": 2 }, "start": { "column": 11, "line": 2 } } }, { "id": "124", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "'' == 'Hello World'", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["40"], "coveredBy": ["40", "41", "42", "43"], "location": { "end": { "column": 2, "line": 4 }, "start": { "column": 40, "line": 1 } } }, { "id": "127", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "undefined == 'Hello World'", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["40"], "coveredBy": ["40"], "location": { "end": { "column": 2, "line": 8 }, "start": { "column": 38, "line": 6 } } }, { "id": "126", "mutatorName": "StringLiteral", "replacement": "\"\"", "statusReason": "'Hello ' == 'Hello World'", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["40"], "coveredBy": ["40", "42", "43"], "location": { "end": { "column": 18, "line": 3 }, "start": { "column": 11, "line": 3 } } }, { "id": "128", "mutatorName": "StringLiteral", "replacement": "\"\"", "statusReason": "'HelloWorld' == 'Hello World'", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["40"], "coveredBy": ["40"], "location": { "end": { "column": 54, "line": 7 }, "start": { "column": 51, "line": 7 } } }], "source": "export function* helloWorldGenerator() {\n    yield 'Hello';\n    yield 'World';\n}\n\nexport default function HelloWorld() {\n    return Array.from(helloWorldGenerator()).join(' ');\n}\n" }, "src/folder_1/17_kata.ts": { "language": "typescript", "mutants": [{ "id": "130", "mutatorName": "ArithmeticOperator", "replacement": "+commands[0] / +commands[1]", "statusReason": "expected 0.21600000000000003 to equal 5.4", "status": "Killed", "static": false, "testsCompleted": 2, "killedBy": ["45"], "coveredBy": ["44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54"], "location": { "end": { "column": 48, "line": 4 }, "start": { "column": 21, "line": 4 } } }, { "id": "129", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "expected undefined to equal +0", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["44"], "coveredBy": ["44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54"], "location": { "end": { "column": 2, "line": 27 }, "start": { "column": 36, "line": 3 } } }, { "id": "131", "mutatorName": "UnaryOperator", "replacement": "-commands[0]", "statusReason": "expected -5.4 to equal 5.4", "status": "Killed", "static": false, "testsCompleted": 2, "killedBy": ["45"], "coveredBy": ["44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54"], "location": { "end": { "column": 33, "line": 4 }, "start": { "column": 21, "line": 4 } } }, { "id": "132", "mutatorName": "UnaryOperator", "replacement": "-commands[1]", "statusReason": "expected -5.4 to equal 5.4", "status": "Killed", "static": false, "testsCompleted": 2, "killedBy": ["45"], "coveredBy": ["44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54"], "location": { "end": { "column": 48, "line": 4 }, "start": { "column": 36, "line": 4 } } }, { "id": "133", "mutatorName": "ArrayDeclaration", "replacement": "[]", "statusReason": "expected 1080 to equal 1047.6000000000001", "status": "Killed", "static": false, "testsCompleted": 7, "killedBy": ["50"], "coveredBy": ["44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54"], "location": { "end": { "column": 6, "line": 11 }, "start": { "column": 28, "line": 5 } } }, { "id": "135", "mutatorName": "ObjectLiteral", "replacement": "{}", "statusReason": "expected 10044 to equal 9720", "status": "Killed", "static": false, "testsCompleted": 10, "killedBy": ["53"], "coveredBy": ["44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54"], "location": { "end": { "column": 42, "line": 7 }, "start": { "column": 9, "line": 7 } } }, { "id": "134", "mutatorName": "ObjectLiteral", "replacement": "{}", "statusReason": "expected 48600 to equal 45900", "status": "Killed", "static": false, "testsCompleted": 11, "killedBy": ["54"], "coveredBy": ["44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54"], "location": { "end": { "column": 42, "line": 6 }, "start": { "column": 9, "line": 6 } } }, { "id": "136", "mutatorName": "ObjectLiteral", "replacement": "{}", "statusReason": "expected 7182.000000000001 to equal 7030.8", "status": "Killed", "static": false, "testsCompleted": 9, "killedBy": ["52"], "coveredBy": ["44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54"], "location": { "end": { "column": 41, "line": 8 }, "start": { "column": 9, "line": 8 } } }, { "id": "137", "mutatorName": "ObjectLiteral", "replacement": "{}", "statusReason": "expected 5238 to equal 5130", "status": "Killed", "static": false, "testsCompleted": 8, "killedBy": ["51"], "coveredBy": ["44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54"], "location": { "end": { "column": 41, "line": 9 }, "start": { "column": 9, "line": 9 } } }, { "id": "139", "mutatorName": "MethodExpression", "replacement": "volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})", "statusReason": "expected 1080 to equal 1047.6000000000001", "status": "Killed", "static": false, "testsCompleted": 7, "killedBy": ["50"], "coveredBy": ["44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54"], "location": { "end": { "column": 7, "line": 18 }, "start": { "column": 5, "line": 12 } } }, { "id": "138", "mutatorName": "ObjectLiteral", "replacement": "{}", "statusReason": "expected 1080 to equal 1047.6000000000001", "status": "Killed", "static": false, "testsCompleted": 7, "killedBy": ["50"], "coveredBy": ["44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54"], "location": { "end": { "column": 41, "line": 10 }, "start": { "column": 9, "line": 10 } } }, { "id": "140", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "expected 1080 to equal 1047.6000000000001", "status": "Killed", "static": false, "testsCompleted": 7, "killedBy": ["50"], "coveredBy": ["44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54"], "location": { "end": { "column": 6, "line": 18 }, "start": { "column": 54, "line": 12 } } }, { "id": "141", "mutatorName": "ConditionalExpression", "replacement": "true", "statusReason": "expected 4.59 to equal 5.4", "status": "Killed", "static": false, "testsCompleted": 2, "killedBy": ["45"], "coveredBy": ["44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54"], "location": { "end": { "column": 32, "line": 13 }, "start": { "column": 13, "line": 13 } } }, { "id": "142", "mutatorName": "ConditionalExpression", "replacement": "false", "statusReason": "expected 1080 to equal 1047.6000000000001", "status": "Killed", "static": false, "testsCompleted": 7, "killedBy": ["50"], "coveredBy": ["44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54"], "location": { "end": { "column": 32, "line": 13 }, "start": { "column": 13, "line": 13 } } }, { "id": "143", "mutatorName": "EqualityOperator", "replacement": "totalCost > volume", "statusReason": "expected 1080 to equal 1047.6000000000001", "status": "Killed", "static": false, "testsCompleted": 7, "killedBy": ["50"], "coveredBy": ["44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54"], "location": { "end": { "column": 32, "line": 13 }, "start": { "column": 13, "line": 13 } } }, { "id": "144", "mutatorName": "EqualityOperator", "replacement": "totalCost < volume", "statusReason": "expected 4.59 to equal 5.4", "status": "Killed", "static": false, "testsCompleted": 2, "killedBy": ["45"], "coveredBy": ["44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54"], "location": { "end": { "column": 32, "line": 13 }, "start": { "column": 13, "line": 13 } } }, { "id": "145", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "expected 1080 to equal 1047.6000000000001", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["50"], "coveredBy": ["50", "51", "52", "53", "54"], "location": { "end": { "column": 10, "line": 16 }, "start": { "column": 34, "line": 13 } } }, { "id": "146", "mutatorName": "ArithmeticOperator", "replacement": "totalCost / (1 - discount)", "statusReason": "expected 1113.4020618556704 to equal 1047.6000000000001", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["50"], "coveredBy": ["50", "51", "52", "53", "54"], "location": { "end": { "column": 51, "line": 14 }, "start": { "column": 25, "line": 14 } } }, { "id": "147", "mutatorName": "ArithmeticOperator", "replacement": "1 + discount", "statusReason": "expected 1112.4 to equal 1047.6000000000001", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["50"], "coveredBy": ["50", "51", "52", "53", "54"], "location": { "end": { "column": 50, "line": 14 }, "start": { "column": 38, "line": 14 } } }, { "id": "148", "mutatorName": "BooleanLiteral", "replacement": "false", "statusReason": "expected 4976.1 to equal 5130", "status": "Killed", "static": false, "testsCompleted": 2, "killedBy": ["51"], "coveredBy": ["50", "51", "52", "53", "54"], "location": { "end": { "column": 24, "line": 15 }, "start": { "column": 20, "line": 15 } } }, { "id": "150", "mutatorName": "ObjectLiteral", "replacement": "{}", "statusReason": "expected NaN to equal +0", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["44"], "coveredBy": ["44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54"], "location": { "end": { "column": 6, "line": 25 }, "start": { "column": 24, "line": 19 } } }, { "id": "149", "mutatorName": "BooleanLiteral", "replacement": "true", "statusReason": "expected 1080 to equal 1047.6000000000001", "status": "Killed", "static": false, "testsCompleted": 7, "killedBy": ["50"], "coveredBy": ["44", "45", "46", "47", "48", "49", "50", "51", "52", "53"], "location": { "end": { "column": 21, "line": 17 }, "start": { "column": 16, "line": 17 } } }, { "id": "151", "mutatorName": "ArithmeticOperator", "replacement": "totalCost / (1 + stateTaxes[commands[2]] / 100)", "statusReason": "expected 4.62962962962963 to equal 5.4", "status": "Killed", "static": false, "testsCompleted": 2, "killedBy": ["45"], "coveredBy": ["44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54"], "location": { "end": { "column": 59, "line": 26 }, "start": { "column": 12, "line": 26 } } }, { "id": "153", "mutatorName": "ArithmeticOperator", "replacement": "stateTaxes[commands[2]] * 100", "statusReason": "expected 4005 to equal 5.4", "status": "Killed", "static": false, "testsCompleted": 2, "killedBy": ["45"], "coveredBy": ["44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54"], "location": { "end": { "column": 58, "line": 26 }, "start": { "column": 29, "line": 26 } } }, { "id": "152", "mutatorName": "ArithmeticOperator", "replacement": "1 - stateTaxes[commands[2]] / 100", "statusReason": "expected 4.6000000000000005 to equal 5.4", "status": "Killed", "static": false, "testsCompleted": 2, "killedBy": ["45"], "coveredBy": ["44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54"], "location": { "end": { "column": 58, "line": 26 }, "start": { "column": 25, "line": 26 } } }], "source": "﻿\r\n\r\nexport const input = (commands) => {\r\n    let totalCost = +commands[0] * +commands[1];\r\n    const volumeDiscount = [\r\n        { volume: 50000, discount: 0.15 },\r\n        { volume: 10000, discount: 0.10 },\r\n        { volume: 7000, discount: 0.07 },\r\n        { volume: 5000, discount: 0.05 },\r\n        { volume: 1000, discount: 0.03 },\r\n    ]\r\n    volumeDiscount.some(({volume, discount}, idx) => {\r\n        if (totalCost >= volume) {\r\n            totalCost = totalCost * (1 - discount)\r\n            return true;\r\n        }\r\n        return false;\r\n    })\r\n    const stateTaxes = {\r\n        UT: 6.85,\r\n        NV: 8.00,\r\n        TX: 6.25,\r\n        AL: 4.00,\r\n        CA: 8.25,\r\n    }\r\n    return totalCost * (1 + stateTaxes[commands[2]] / 100);\r\n}" }, "src/folder_1/1_kata.ts": { "language": "typescript", "mutants": [{ "id": "186", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "'' == 'Hello World'", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["0"], "coveredBy": ["0", "1", "2", "3"], "location": { "end": { "column": 2, "line": 4 }, "start": { "column": 40, "line": 1 } } }, { "id": "187", "mutatorName": "StringLiteral", "replacement": "\"\"", "statusReason": "' World' == 'Hello World'", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["0"], "coveredBy": ["0", "1", "2", "3"], "location": { "end": { "column": 18, "line": 2 }, "start": { "column": 11, "line": 2 } } }, { "id": "188", "mutatorName": "StringLiteral", "replacement": "\"\"", "statusReason": "'Hello ' == 'Hello World'", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["0"], "coveredBy": ["0", "2", "3"], "location": { "end": { "column": 18, "line": 3 }, "start": { "column": 11, "line": 3 } } }, { "id": "190", "mutatorName": "StringLiteral", "replacement": "\"\"", "statusReason": "'HelloWorld' == 'Hello World'", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["0"], "coveredBy": ["0"], "location": { "end": { "column": 54, "line": 7 }, "start": { "column": 51, "line": 7 } } }, { "id": "189", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "undefined == 'Hello World'", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["0"], "coveredBy": ["0"], "location": { "end": { "column": 2, "line": 8 }, "start": { "column": 38, "line": 6 } } }], "source": "export function* helloWorldGenerator() {\n    yield 'Hello';\n    yield 'World';\n}\n\nexport default function HelloWorld() {\n    return Array.from(helloWorldGenerator()).join(' ');\n}\n" }, "src/folder_1/2_kata.ts": { "language": "typescript", "mutants": [{ "id": "191", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "expected undefined to equal +0", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["58"], "coveredBy": ["58", "59", "60", "61", "62", "63", "64", "65", "66", "67", "68"], "location": { "end": { "column": 2, "line": 27 }, "start": { "column": 36, "line": 3 } } }, { "id": "192", "mutatorName": "ArithmeticOperator", "replacement": "+commands[0] / +commands[1]", "statusReason": "expected 0.21600000000000003 to equal 5.4", "status": "Killed", "static": false, "testsCompleted": 2, "killedBy": ["59"], "coveredBy": ["58", "59", "60", "61", "62", "63", "64", "65", "66", "67", "68"], "location": { "end": { "column": 48, "line": 4 }, "start": { "column": 21, "line": 4 } } }, { "id": "193", "mutatorName": "UnaryOperator", "replacement": "-commands[0]", "statusReason": "expected -5.4 to equal 5.4", "status": "Killed", "static": false, "testsCompleted": 2, "killedBy": ["59"], "coveredBy": ["58", "59", "60", "61", "62", "63", "64", "65", "66", "67", "68"], "location": { "end": { "column": 33, "line": 4 }, "start": { "column": 21, "line": 4 } } }, { "id": "194", "mutatorName": "UnaryOperator", "replacement": "-commands[1]", "statusReason": "expected -5.4 to equal 5.4", "status": "Killed", "static": false, "testsCompleted": 2, "killedBy": ["59"], "coveredBy": ["58", "59", "60", "61", "62", "63", "64", "65", "66", "67", "68"], "location": { "end": { "column": 48, "line": 4 }, "start": { "column": 36, "line": 4 } } }, { "id": "195", "mutatorName": "ArrayDeclaration", "replacement": "[]", "statusReason": "expected 1080 to equal 1047.6000000000001", "status": "Killed", "static": false, "testsCompleted": 7, "killedBy": ["64"], "coveredBy": ["58", "59", "60", "61", "62", "63", "64", "65", "66", "67", "68"], "location": { "end": { "column": 6, "line": 11 }, "start": { "column": 28, "line": 5 } } }, { "id": "197", "mutatorName": "ObjectLiteral", "replacement": "{}", "statusReason": "expected 10044 to equal 9720", "status": "Killed", "static": false, "testsCompleted": 10, "killedBy": ["67"], "coveredBy": ["58", "59", "60", "61", "62", "63", "64", "65", "66", "67", "68"], "location": { "end": { "column": 42, "line": 7 }, "start": { "column": 9, "line": 7 } } }, { "id": "196", "mutatorName": "ObjectLiteral", "replacement": "{}", "statusReason": "expected 48600 to equal 45900", "status": "Killed", "static": false, "testsCompleted": 11, "killedBy": ["68"], "coveredBy": ["58", "59", "60", "61", "62", "63", "64", "65", "66", "67", "68"], "location": { "end": { "column": 42, "line": 6 }, "start": { "column": 9, "line": 6 } } }, { "id": "198", "mutatorName": "ObjectLiteral", "replacement": "{}", "statusReason": "expected 7182.000000000001 to equal 7030.8", "status": "Killed", "static": false, "testsCompleted": 9, "killedBy": ["66"], "coveredBy": ["58", "59", "60", "61", "62", "63", "64", "65", "66", "67", "68"], "location": { "end": { "column": 41, "line": 8 }, "start": { "column": 9, "line": 8 } } }, { "id": "199", "mutatorName": "ObjectLiteral", "replacement": "{}", "statusReason": "expected 5238 to equal 5130", "status": "Killed", "static": false, "testsCompleted": 8, "killedBy": ["65"], "coveredBy": ["58", "59", "60", "61", "62", "63", "64", "65", "66", "67", "68"], "location": { "end": { "column": 41, "line": 9 }, "start": { "column": 9, "line": 9 } } }, { "id": "200", "mutatorName": "ObjectLiteral", "replacement": "{}", "statusReason": "expected 1080 to equal 1047.6000000000001", "status": "Killed", "static": false, "testsCompleted": 7, "killedBy": ["64"], "coveredBy": ["58", "59", "60", "61", "62", "63", "64", "65", "66", "67", "68"], "location": { "end": { "column": 41, "line": 10 }, "start": { "column": 9, "line": 10 } } }, { "id": "201", "mutatorName": "MethodExpression", "replacement": "volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})", "statusReason": "expected 1080 to equal 1047.6000000000001", "status": "Killed", "static": false, "testsCompleted": 7, "killedBy": ["64"], "coveredBy": ["58", "59", "60", "61", "62", "63", "64", "65", "66", "67", "68"], "location": { "end": { "column": 7, "line": 18 }, "start": { "column": 5, "line": 12 } } }, { "id": "202", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "expected 1080 to equal 1047.6000000000001", "status": "Killed", "static": false, "testsCompleted": 7, "killedBy": ["64"], "coveredBy": ["58", "59", "60", "61", "62", "63", "64", "65", "66", "67", "68"], "location": { "end": { "column": 6, "line": 18 }, "start": { "column": 54, "line": 12 } } }, { "id": "203", "mutatorName": "ConditionalExpression", "replacement": "true", "statusReason": "expected 4.59 to equal 5.4", "status": "Killed", "static": false, "testsCompleted": 2, "killedBy": ["59"], "coveredBy": ["58", "59", "60", "61", "62", "63", "64", "65", "66", "67", "68"], "location": { "end": { "column": 32, "line": 13 }, "start": { "column": 13, "line": 13 } } }, { "id": "204", "mutatorName": "ConditionalExpression", "replacement": "false", "statusReason": "expected 1080 to equal 1047.6000000000001", "status": "Killed", "static": false, "testsCompleted": 7, "killedBy": ["64"], "coveredBy": ["58", "59", "60", "61", "62", "63", "64", "65", "66", "67", "68"], "location": { "end": { "column": 32, "line": 13 }, "start": { "column": 13, "line": 13 } } }, { "id": "205", "mutatorName": "EqualityOperator", "replacement": "totalCost > volume", "statusReason": "expected 1080 to equal 1047.6000000000001", "status": "Killed", "static": false, "testsCompleted": 7, "killedBy": ["64"], "coveredBy": ["58", "59", "60", "61", "62", "63", "64", "65", "66", "67", "68"], "location": { "end": { "column": 32, "line": 13 }, "start": { "column": 13, "line": 13 } } }, { "id": "206", "mutatorName": "EqualityOperator", "replacement": "totalCost < volume", "statusReason": "expected 4.59 to equal 5.4", "status": "Killed", "static": false, "testsCompleted": 2, "killedBy": ["59"], "coveredBy": ["58", "59", "60", "61", "62", "63", "64", "65", "66", "67", "68"], "location": { "end": { "column": 32, "line": 13 }, "start": { "column": 13, "line": 13 } } }, { "id": "207", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "expected 1080 to equal 1047.6000000000001", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["64"], "coveredBy": ["64", "65", "66", "67", "68"], "location": { "end": { "column": 10, "line": 16 }, "start": { "column": 34, "line": 13 } } }, { "id": "208", "mutatorName": "ArithmeticOperator", "replacement": "totalCost / (1 - discount)", "statusReason": "expected 1113.4020618556704 to equal 1047.6000000000001", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["64"], "coveredBy": ["64", "65", "66", "67", "68"], "location": { "end": { "column": 51, "line": 14 }, "start": { "column": 25, "line": 14 } } }, { "id": "209", "mutatorName": "ArithmeticOperator", "replacement": "1 + discount", "statusReason": "expected 1112.4 to equal 1047.6000000000001", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["64"], "coveredBy": ["64", "65", "66", "67", "68"], "location": { "end": { "column": 50, "line": 14 }, "start": { "column": 38, "line": 14 } } }, { "id": "210", "mutatorName": "BooleanLiteral", "replacement": "false", "statusReason": "expected 4976.1 to equal 5130", "status": "Killed", "static": false, "testsCompleted": 2, "killedBy": ["65"], "coveredBy": ["64", "65", "66", "67", "68"], "location": { "end": { "column": 24, "line": 15 }, "start": { "column": 20, "line": 15 } } }, { "id": "212", "mutatorName": "ObjectLiteral", "replacement": "{}", "statusReason": "expected NaN to equal +0", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["58"], "coveredBy": ["58", "59", "60", "61", "62", "63", "64", "65", "66", "67", "68"], "location": { "end": { "column": 6, "line": 25 }, "start": { "column": 24, "line": 19 } } }, { "id": "211", "mutatorName": "BooleanLiteral", "replacement": "true", "statusReason": "expected 1080 to equal 1047.6000000000001", "status": "Killed", "static": false, "testsCompleted": 7, "killedBy": ["64"], "coveredBy": ["58", "59", "60", "61", "62", "63", "64", "65", "66", "67"], "location": { "end": { "column": 21, "line": 17 }, "start": { "column": 16, "line": 17 } } }, { "id": "213", "mutatorName": "ArithmeticOperator", "replacement": "totalCost / (1 + stateTaxes[commands[2]] / 100)", "statusReason": "expected 4.62962962962963 to equal 5.4", "status": "Killed", "static": false, "testsCompleted": 2, "killedBy": ["59"], "coveredBy": ["58", "59", "60", "61", "62", "63", "64", "65", "66", "67", "68"], "location": { "end": { "column": 59, "line": 26 }, "start": { "column": 12, "line": 26 } } }, { "id": "214", "mutatorName": "ArithmeticOperator", "replacement": "1 - stateTaxes[commands[2]] / 100", "statusReason": "expected 4.6000000000000005 to equal 5.4", "status": "Killed", "static": false, "testsCompleted": 2, "killedBy": ["59"], "coveredBy": ["58", "59", "60", "61", "62", "63", "64", "65", "66", "67", "68"], "location": { "end": { "column": 58, "line": 26 }, "start": { "column": 25, "line": 26 } } }, { "id": "215", "mutatorName": "ArithmeticOperator", "replacement": "stateTaxes[commands[2]] * 100", "statusReason": "expected 4005 to equal 5.4", "status": "Killed", "static": false, "testsCompleted": 2, "killedBy": ["59"], "coveredBy": ["58", "59", "60", "61", "62", "63", "64", "65", "66", "67", "68"], "location": { "end": { "column": 58, "line": 26 }, "start": { "column": 29, "line": 26 } } }], "source": "﻿\r\n\r\nexport const input = (commands) => {\r\n    let totalCost = +commands[0] * +commands[1];\r\n    const volumeDiscount = [\r\n        { volume: 50000, discount: 0.15 },\r\n        { volume: 10000, discount: 0.10 },\r\n        { volume: 7000, discount: 0.07 },\r\n        { volume: 5000, discount: 0.05 },\r\n        { volume: 1000, discount: 0.03 },\r\n    ]\r\n    volumeDiscount.some(({volume, discount}, idx) => {\r\n        if (totalCost >= volume) {\r\n            totalCost = totalCost * (1 - discount)\r\n            return true;\r\n        }\r\n        return false;\r\n    })\r\n    const stateTaxes = {\r\n        UT: 6.85,\r\n        NV: 8.00,\r\n        TX: 6.25,\r\n        AL: 4.00,\r\n        CA: 8.25,\r\n    }\r\n    return totalCost * (1 + stateTaxes[commands[2]] / 100);\r\n}" }, "src/folder_1/4_kata.ts": { "language": "typescript", "mutants": [{ "id": "249", "mutatorName": "StringLiteral", "replacement": "\"\"", "statusReason": "' World' == 'Hello World'", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["72"], "coveredBy": ["72", "73", "74", "75"], "location": { "end": { "column": 18, "line": 2 }, "start": { "column": 11, "line": 2 } } }, { "id": "248", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "'' == 'Hello World'", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["72"], "coveredBy": ["72", "73", "74", "75"], "location": { "end": { "column": 2, "line": 4 }, "start": { "column": 40, "line": 1 } } }, { "id": "250", "mutatorName": "StringLiteral", "replacement": "\"\"", "statusReason": "'Hello ' == 'Hello World'", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["72"], "coveredBy": ["72", "74", "75"], "location": { "end": { "column": 18, "line": 3 }, "start": { "column": 11, "line": 3 } } }, { "id": "251", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "undefined == 'Hello World'", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["72"], "coveredBy": ["72"], "location": { "end": { "column": 2, "line": 8 }, "start": { "column": 38, "line": 6 } } }, { "id": "252", "mutatorName": "StringLiteral", "replacement": "\"\"", "statusReason": "'HelloWorld' == 'Hello World'", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["72"], "coveredBy": ["72"], "location": { "end": { "column": 54, "line": 7 }, "start": { "column": 51, "line": 7 } } }], "source": "export function* helloWorldGenerator() {\n    yield 'Hello';\n    yield 'World';\n}\n\nexport default function HelloWorld() {\n    return Array.from(helloWorldGenerator()).join(' ');\n}" }, "src/folder_1/5_kata.ts": { "language": "typescript", "mutants": [{ "id": "253", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "expected undefined to equal +0", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["76"], "coveredBy": ["76", "77", "78", "79", "80", "81", "82", "83", "84", "85", "86"], "location": { "end": { "column": 2, "line": 27 }, "start": { "column": 36, "line": 3 } } }, { "id": "254", "mutatorName": "ArithmeticOperator", "replacement": "+commands[0] / +commands[1]", "statusReason": "expected 0.21600000000000003 to equal 5.4", "status": "Killed", "static": false, "testsCompleted": 2, "killedBy": ["77"], "coveredBy": ["76", "77", "78", "79", "80", "81", "82", "83", "84", "85", "86"], "location": { "end": { "column": 48, "line": 4 }, "start": { "column": 21, "line": 4 } } }, { "id": "256", "mutatorName": "UnaryOperator", "replacement": "-commands[1]", "statusReason": "expected -5.4 to equal 5.4", "status": "Killed", "static": false, "testsCompleted": 2, "killedBy": ["77"], "coveredBy": ["76", "77", "78", "79", "80", "81", "82", "83", "84", "85", "86"], "location": { "end": { "column": 48, "line": 4 }, "start": { "column": 36, "line": 4 } } }, { "id": "255", "mutatorName": "UnaryOperator", "replacement": "-commands[0]", "statusReason": "expected -5.4 to equal 5.4", "status": "Killed", "static": false, "testsCompleted": 2, "killedBy": ["77"], "coveredBy": ["76", "77", "78", "79", "80", "81", "82", "83", "84", "85", "86"], "location": { "end": { "column": 33, "line": 4 }, "start": { "column": 21, "line": 4 } } }, { "id": "257", "mutatorName": "ArrayDeclaration", "replacement": "[]", "statusReason": "expected 1080 to equal 1047.6000000000001", "status": "Killed", "static": false, "testsCompleted": 7, "killedBy": ["82"], "coveredBy": ["76", "77", "78", "79", "80", "81", "82", "83", "84", "85", "86"], "location": { "end": { "column": 6, "line": 11 }, "start": { "column": 28, "line": 5 } } }, { "id": "258", "mutatorName": "ObjectLiteral", "replacement": "{}", "statusReason": "expected 48600 to equal 45900", "status": "Killed", "static": false, "testsCompleted": 11, "killedBy": ["86"], "coveredBy": ["76", "77", "78", "79", "80", "81", "82", "83", "84", "85", "86"], "location": { "end": { "column": 42, "line": 6 }, "start": { "column": 9, "line": 6 } } }, { "id": "259", "mutatorName": "ObjectLiteral", "replacement": "{}", "statusReason": "expected 10044 to equal 9720", "status": "Killed", "static": false, "testsCompleted": 10, "killedBy": ["85"], "coveredBy": ["76", "77", "78", "79", "80", "81", "82", "83", "84", "85", "86"], "location": { "end": { "column": 42, "line": 7 }, "start": { "column": 9, "line": 7 } } }, { "id": "260", "mutatorName": "ObjectLiteral", "replacement": "{}", "statusReason": "expected 7182.000000000001 to equal 7030.8", "status": "Killed", "static": false, "testsCompleted": 9, "killedBy": ["84"], "coveredBy": ["76", "77", "78", "79", "80", "81", "82", "83", "84", "85", "86"], "location": { "end": { "column": 41, "line": 8 }, "start": { "column": 9, "line": 8 } } }, { "id": "261", "mutatorName": "ObjectLiteral", "replacement": "{}", "statusReason": "expected 5238 to equal 5130", "status": "Killed", "static": false, "testsCompleted": 8, "killedBy": ["83"], "coveredBy": ["76", "77", "78", "79", "80", "81", "82", "83", "84", "85", "86"], "location": { "end": { "column": 41, "line": 9 }, "start": { "column": 9, "line": 9 } } }, { "id": "262", "mutatorName": "ObjectLiteral", "replacement": "{}", "statusReason": "expected 1080 to equal 1047.6000000000001", "status": "Killed", "static": false, "testsCompleted": 7, "killedBy": ["82"], "coveredBy": ["76", "77", "78", "79", "80", "81", "82", "83", "84", "85", "86"], "location": { "end": { "column": 41, "line": 10 }, "start": { "column": 9, "line": 10 } } }, { "id": "264", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "expected 1080 to equal 1047.6000000000001", "status": "Killed", "static": false, "testsCompleted": 7, "killedBy": ["82"], "coveredBy": ["76", "77", "78", "79", "80", "81", "82", "83", "84", "85", "86"], "location": { "end": { "column": 6, "line": 18 }, "start": { "column": 54, "line": 12 } } }, { "id": "263", "mutatorName": "MethodExpression", "replacement": "volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})", "statusReason": "expected 1080 to equal 1047.6000000000001", "status": "Killed", "static": false, "testsCompleted": 7, "killedBy": ["82"], "coveredBy": ["76", "77", "78", "79", "80", "81", "82", "83", "84", "85", "86"], "location": { "end": { "column": 7, "line": 18 }, "start": { "column": 5, "line": 12 } } }, { "id": "265", "mutatorName": "ConditionalExpression", "replacement": "true", "statusReason": "expected 4.59 to equal 5.4", "status": "Killed", "static": false, "testsCompleted": 2, "killedBy": ["77"], "coveredBy": ["76", "77", "78", "79", "80", "81", "82", "83", "84", "85", "86"], "location": { "end": { "column": 32, "line": 13 }, "start": { "column": 13, "line": 13 } } }, { "id": "266", "mutatorName": "ConditionalExpression", "replacement": "false", "statusReason": "expected 1080 to equal 1047.6000000000001", "status": "Killed", "static": false, "testsCompleted": 7, "killedBy": ["82"], "coveredBy": ["76", "77", "78", "79", "80", "81", "82", "83", "84", "85", "86"], "location": { "end": { "column": 32, "line": 13 }, "start": { "column": 13, "line": 13 } } }, { "id": "267", "mutatorName": "EqualityOperator", "replacement": "totalCost > volume", "statusReason": "expected 1080 to equal 1047.6000000000001", "status": "Killed", "static": false, "testsCompleted": 7, "killedBy": ["82"], "coveredBy": ["76", "77", "78", "79", "80", "81", "82", "83", "84", "85", "86"], "location": { "end": { "column": 32, "line": 13 }, "start": { "column": 13, "line": 13 } } }, { "id": "268", "mutatorName": "EqualityOperator", "replacement": "totalCost < volume", "statusReason": "expected 4.59 to equal 5.4", "status": "Killed", "static": false, "testsCompleted": 2, "killedBy": ["77"], "coveredBy": ["76", "77", "78", "79", "80", "81", "82", "83", "84", "85", "86"], "location": { "end": { "column": 32, "line": 13 }, "start": { "column": 13, "line": 13 } } }, { "id": "269", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "expected 1080 to equal 1047.6000000000001", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["82"], "coveredBy": ["82", "83", "84", "85", "86"], "location": { "end": { "column": 10, "line": 16 }, "start": { "column": 34, "line": 13 } } }, { "id": "270", "mutatorName": "ArithmeticOperator", "replacement": "totalCost / (1 - discount)", "statusReason": "expected 1113.4020618556704 to equal 1047.6000000000001", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["82"], "coveredBy": ["82", "83", "84", "85", "86"], "location": { "end": { "column": 51, "line": 14 }, "start": { "column": 25, "line": 14 } } }, { "id": "271", "mutatorName": "ArithmeticOperator", "replacement": "1 + discount", "statusReason": "expected 1112.4 to equal 1047.6000000000001", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["82"], "coveredBy": ["82", "83", "84", "85", "86"], "location": { "end": { "column": 50, "line": 14 }, "start": { "column": 38, "line": 14 } } }, { "id": "272", "mutatorName": "BooleanLiteral", "replacement": "false", "statusReason": "expected 4976.1 to equal 5130", "status": "Killed", "static": false, "testsCompleted": 2, "killedBy": ["83"], "coveredBy": ["82", "83", "84", "85", "86"], "location": { "end": { "column": 24, "line": 15 }, "start": { "column": 20, "line": 15 } } }, { "id": "274", "mutatorName": "ObjectLiteral", "replacement": "{}", "statusReason": "expected NaN to equal +0", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["76"], "coveredBy": ["76", "77", "78", "79", "80", "81", "82", "83", "84", "85", "86"], "location": { "end": { "column": 6, "line": 25 }, "start": { "column": 24, "line": 19 } } }, { "id": "273", "mutatorName": "BooleanLiteral", "replacement": "true", "statusReason": "expected 1080 to equal 1047.6000000000001", "status": "Killed", "static": false, "testsCompleted": 7, "killedBy": ["82"], "coveredBy": ["76", "77", "78", "79", "80", "81", "82", "83", "84", "85"], "location": { "end": { "column": 21, "line": 17 }, "start": { "column": 16, "line": 17 } } }, { "id": "275", "mutatorName": "ArithmeticOperator", "replacement": "totalCost / (1 + stateTaxes[commands[2]] / 100)", "statusReason": "expected 4.62962962962963 to equal 5.4", "status": "Killed", "static": false, "testsCompleted": 2, "killedBy": ["77"], "coveredBy": ["76", "77", "78", "79", "80", "81", "82", "83", "84", "85", "86"], "location": { "end": { "column": 59, "line": 26 }, "start": { "column": 12, "line": 26 } } }, { "id": "276", "mutatorName": "ArithmeticOperator", "replacement": "1 - stateTaxes[commands[2]] / 100", "statusReason": "expected 4.6000000000000005 to equal 5.4", "status": "Killed", "static": false, "testsCompleted": 2, "killedBy": ["77"], "coveredBy": ["76", "77", "78", "79", "80", "81", "82", "83", "84", "85", "86"], "location": { "end": { "column": 58, "line": 26 }, "start": { "column": 25, "line": 26 } } }, { "id": "277", "mutatorName": "ArithmeticOperator", "replacement": "stateTaxes[commands[2]] * 100", "statusReason": "expected 4005 to equal 5.4", "status": "Killed", "static": false, "testsCompleted": 2, "killedBy": ["77"], "coveredBy": ["76", "77", "78", "79", "80", "81", "82", "83", "84", "85", "86"], "location": { "end": { "column": 58, "line": 26 }, "start": { "column": 29, "line": 26 } } }], "source": "﻿\r\n\r\nexport const input = (commands) => {\r\n    let totalCost = +commands[0] * +commands[1];\r\n    const volumeDiscount = [\r\n        { volume: 50000, discount: 0.15 },\r\n        { volume: 10000, discount: 0.10 },\r\n        { volume: 7000, discount: 0.07 },\r\n        { volume: 5000, discount: 0.05 },\r\n        { volume: 1000, discount: 0.03 },\r\n    ]\r\n    volumeDiscount.some(({volume, discount}, idx) => {\r\n        if (totalCost >= volume) {\r\n            totalCost = totalCost * (1 - discount)\r\n            return true;\r\n        }\r\n        return false;\r\n    })\r\n    const stateTaxes = {\r\n        UT: 6.85,\r\n        NV: 8.00,\r\n        TX: 6.25,\r\n        AL: 4.00,\r\n        CA: 8.25,\r\n    }\r\n    return totalCost * (1 + stateTaxes[commands[2]] / 100);\r\n}" }, "src/folder_1/7_kata.ts": { "language": "typescript", "mutants": [{ "id": "310", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "'' == 'Hello World'", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["90"], "coveredBy": ["90", "91", "92", "93"], "location": { "end": { "column": 2, "line": 4 }, "start": { "column": 40, "line": 1 } } }, { "id": "311", "mutatorName": "StringLiteral", "replacement": "\"\"", "statusReason": "' World' == 'Hello World'", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["90"], "coveredBy": ["90", "91", "92", "93"], "location": { "end": { "column": 18, "line": 2 }, "start": { "column": 11, "line": 2 } } }, { "id": "312", "mutatorName": "StringLiteral", "replacement": "\"\"", "statusReason": "'Hello ' == 'Hello World'", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["90"], "coveredBy": ["90", "92", "93"], "location": { "end": { "column": 18, "line": 3 }, "start": { "column": 11, "line": 3 } } }, { "id": "313", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "undefined == 'Hello World'", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["90"], "coveredBy": ["90"], "location": { "end": { "column": 2, "line": 8 }, "start": { "column": 38, "line": 6 } } }, { "id": "314", "mutatorName": "StringLiteral", "replacement": "\"\"", "statusReason": "'HelloWorld' == 'Hello World'", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["90"], "coveredBy": ["90"], "location": { "end": { "column": 54, "line": 7 }, "start": { "column": 51, "line": 7 } } }], "source": "export function* helloWorldGenerator() {\n    yield 'Hello';\n    yield 'World';\n}\n\nexport default function HelloWorld() {\n    return Array.from(helloWorldGenerator()).join(' ');\n}\n" }, "src/folder_1/8_kata.ts": { "language": "typescript", "mutants": [{ "id": "315", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "expected undefined to equal +0", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["94"], "coveredBy": ["94", "95", "96", "97", "98", "99", "100", "101", "102", "103", "104"], "location": { "end": { "column": 2, "line": 27 }, "start": { "column": 36, "line": 3 } } }, { "id": "316", "mutatorName": "ArithmeticOperator", "replacement": "+commands[0] / +commands[1]", "statusReason": "expected 0.21600000000000003 to equal 5.4", "status": "Killed", "static": false, "testsCompleted": 2, "killedBy": ["95"], "coveredBy": ["94", "95", "96", "97", "98", "99", "100", "101", "102", "103", "104"], "location": { "end": { "column": 48, "line": 4 }, "start": { "column": 21, "line": 4 } } }, { "id": "317", "mutatorName": "UnaryOperator", "replacement": "-commands[0]", "statusReason": "expected -5.4 to equal 5.4", "status": "Killed", "static": false, "testsCompleted": 2, "killedBy": ["95"], "coveredBy": ["94", "95", "96", "97", "98", "99", "100", "101", "102", "103", "104"], "location": { "end": { "column": 33, "line": 4 }, "start": { "column": 21, "line": 4 } } }, { "id": "318", "mutatorName": "UnaryOperator", "replacement": "-commands[1]", "statusReason": "expected -5.4 to equal 5.4", "status": "Killed", "static": false, "testsCompleted": 2, "killedBy": ["95"], "coveredBy": ["94", "95", "96", "97", "98", "99", "100", "101", "102", "103", "104"], "location": { "end": { "column": 48, "line": 4 }, "start": { "column": 36, "line": 4 } } }, { "id": "319", "mutatorName": "ArrayDeclaration", "replacement": "[]", "statusReason": "expected 1080 to equal 1047.6000000000001", "status": "Killed", "static": false, "testsCompleted": 7, "killedBy": ["100"], "coveredBy": ["94", "95", "96", "97", "98", "99", "100", "101", "102", "103", "104"], "location": { "end": { "column": 6, "line": 11 }, "start": { "column": 28, "line": 5 } } }, { "id": "320", "mutatorName": "ObjectLiteral", "replacement": "{}", "statusReason": "expected 48600 to equal 45900", "status": "Killed", "static": false, "testsCompleted": 11, "killedBy": ["104"], "coveredBy": ["94", "95", "96", "97", "98", "99", "100", "101", "102", "103", "104"], "location": { "end": { "column": 42, "line": 6 }, "start": { "column": 9, "line": 6 } } }, { "id": "322", "mutatorName": "ObjectLiteral", "replacement": "{}", "statusReason": "expected 7182.000000000001 to equal 7030.8", "status": "Killed", "static": false, "testsCompleted": 9, "killedBy": ["102"], "coveredBy": ["94", "95", "96", "97", "98", "99", "100", "101", "102", "103", "104"], "location": { "end": { "column": 41, "line": 8 }, "start": { "column": 9, "line": 8 } } }, { "id": "321", "mutatorName": "ObjectLiteral", "replacement": "{}", "statusReason": "expected 10044 to equal 9720", "status": "Killed", "static": false, "testsCompleted": 10, "killedBy": ["103"], "coveredBy": ["94", "95", "96", "97", "98", "99", "100", "101", "102", "103", "104"], "location": { "end": { "column": 42, "line": 7 }, "start": { "column": 9, "line": 7 } } }, { "id": "323", "mutatorName": "ObjectLiteral", "replacement": "{}", "statusReason": "expected 5238 to equal 5130", "status": "Killed", "static": false, "testsCompleted": 8, "killedBy": ["101"], "coveredBy": ["94", "95", "96", "97", "98", "99", "100", "101", "102", "103", "104"], "location": { "end": { "column": 41, "line": 9 }, "start": { "column": 9, "line": 9 } } }, { "id": "324", "mutatorName": "ObjectLiteral", "replacement": "{}", "statusReason": "expected 1080 to equal 1047.6000000000001", "status": "Killed", "static": false, "testsCompleted": 7, "killedBy": ["100"], "coveredBy": ["94", "95", "96", "97", "98", "99", "100", "101", "102", "103", "104"], "location": { "end": { "column": 41, "line": 10 }, "start": { "column": 9, "line": 10 } } }, { "id": "326", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "expected 1080 to equal 1047.6000000000001", "status": "Killed", "static": false, "testsCompleted": 7, "killedBy": ["100"], "coveredBy": ["94", "95", "96", "97", "98", "99", "100", "101", "102", "103", "104"], "location": { "end": { "column": 6, "line": 18 }, "start": { "column": 54, "line": 12 } } }, { "id": "325", "mutatorName": "MethodExpression", "replacement": "volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})", "statusReason": "expected 1080 to equal 1047.6000000000001", "status": "Killed", "static": false, "testsCompleted": 7, "killedBy": ["100"], "coveredBy": ["94", "95", "96", "97", "98", "99", "100", "101", "102", "103", "104"], "location": { "end": { "column": 7, "line": 18 }, "start": { "column": 5, "line": 12 } } }, { "id": "327", "mutatorName": "ConditionalExpression", "replacement": "true", "statusReason": "expected 4.59 to equal 5.4", "status": "Killed", "static": false, "testsCompleted": 2, "killedBy": ["95"], "coveredBy": ["94", "95", "96", "97", "98", "99", "100", "101", "102", "103", "104"], "location": { "end": { "column": 32, "line": 13 }, "start": { "column": 13, "line": 13 } } }, { "id": "328", "mutatorName": "ConditionalExpression", "replacement": "false", "statusReason": "expected 1080 to equal 1047.6000000000001", "status": "Killed", "static": false, "testsCompleted": 7, "killedBy": ["100"], "coveredBy": ["94", "95", "96", "97", "98", "99", "100", "101", "102", "103", "104"], "location": { "end": { "column": 32, "line": 13 }, "start": { "column": 13, "line": 13 } } }, { "id": "330", "mutatorName": "EqualityOperator", "replacement": "totalCost < volume", "statusReason": "expected 4.59 to equal 5.4", "status": "Killed", "static": false, "testsCompleted": 2, "killedBy": ["95"], "coveredBy": ["94", "95", "96", "97", "98", "99", "100", "101", "102", "103", "104"], "location": { "end": { "column": 32, "line": 13 }, "start": { "column": 13, "line": 13 } } }, { "id": "329", "mutatorName": "EqualityOperator", "replacement": "totalCost > volume", "statusReason": "expected 1080 to equal 1047.6000000000001", "status": "Killed", "static": false, "testsCompleted": 7, "killedBy": ["100"], "coveredBy": ["94", "95", "96", "97", "98", "99", "100", "101", "102", "103", "104"], "location": { "end": { "column": 32, "line": 13 }, "start": { "column": 13, "line": 13 } } }, { "id": "331", "mutatorName": "BlockStatement", "replacement": "{}", "statusReason": "expected 1080 to equal 1047.6000000000001", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["100"], "coveredBy": ["100", "101", "102", "103", "104"], "location": { "end": { "column": 10, "line": 16 }, "start": { "column": 34, "line": 13 } } }, { "id": "332", "mutatorName": "ArithmeticOperator", "replacement": "totalCost / (1 - discount)", "statusReason": "expected 1113.4020618556704 to equal 1047.6000000000001", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["100"], "coveredBy": ["100", "101", "102", "103", "104"], "location": { "end": { "column": 51, "line": 14 }, "start": { "column": 25, "line": 14 } } }, { "id": "333", "mutatorName": "ArithmeticOperator", "replacement": "1 + discount", "statusReason": "expected 1112.4 to equal 1047.6000000000001", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["100"], "coveredBy": ["100", "101", "102", "103", "104"], "location": { "end": { "column": 50, "line": 14 }, "start": { "column": 38, "line": 14 } } }, { "id": "334", "mutatorName": "BooleanLiteral", "replacement": "false", "statusReason": "expected 4976.1 to equal 5130", "status": "Killed", "static": false, "testsCompleted": 2, "killedBy": ["101"], "coveredBy": ["100", "101", "102", "103", "104"], "location": { "end": { "column": 24, "line": 15 }, "start": { "column": 20, "line": 15 } } }, { "id": "336", "mutatorName": "ObjectLiteral", "replacement": "{}", "statusReason": "expected NaN to equal +0", "status": "Killed", "static": false, "testsCompleted": 1, "killedBy": ["94"], "coveredBy": ["94", "95", "96", "97", "98", "99", "100", "101", "102", "103", "104"], "location": { "end": { "column": 6, "line": 25 }, "start": { "column": 24, "line": 19 } } }, { "id": "335", "mutatorName": "BooleanLiteral", "replacement": "true", "statusReason": "expected 1080 to equal 1047.6000000000001", "status": "Killed", "static": false, "testsCompleted": 7, "killedBy": ["100"], "coveredBy": ["94", "95", "96", "97", "98", "99", "100", "101", "102", "103"], "location": { "end": { "column": 21, "line": 17 }, "start": { "column": 16, "line": 17 } } }, { "id": "337", "mutatorName": "ArithmeticOperator", "replacement": "totalCost / (1 + stateTaxes[commands[2]] / 100)", "statusReason": "expected 4.62962962962963 to equal 5.4", "status": "Killed", "static": false, "testsCompleted": 2, "killedBy": ["95"], "coveredBy": ["94", "95", "96", "97", "98", "99", "100", "101", "102", "103", "104"], "location": { "end": { "column": 59, "line": 26 }, "start": { "column": 12, "line": 26 } } }, { "id": "338", "mutatorName": "ArithmeticOperator", "replacement": "1 - stateTaxes[commands[2]] / 100", "statusReason": "expected 4.6000000000000005 to equal 5.4", "status": "Killed", "static": false, "testsCompleted": 2, "killedBy": ["95"], "coveredBy": ["94", "95", "96", "97", "98", "99", "100", "101", "102", "103", "104"], "location": { "end": { "column": 58, "line": 26 }, "start": { "column": 25, "line": 26 } } }, { "id": "339", "mutatorName": "ArithmeticOperator", "replacement": "stateTaxes[commands[2]] * 100", "statusReason": "expected 4005 to equal 5.4", "status": "Killed", "static": false, "testsCompleted": 2, "killedBy": ["95"], "coveredBy": ["94", "95", "96", "97", "98", "99", "100", "101", "102", "103", "104"], "location": { "end": { "column": 58, "line": 26 }, "start": { "column": 29, "line": 26 } } }], "source": "﻿\r\n\r\nexport const input = (commands) => {\r\n    let totalCost = +commands[0] * +commands[1];\r\n    const volumeDiscount = [\r\n        { volume: 50000, discount: 0.15 },\r\n        { volume: 10000, discount: 0.10 },\r\n        { volume: 7000, discount: 0.07 },\r\n        { volume: 5000, discount: 0.05 },\r\n        { volume: 1000, discount: 0.03 },\r\n    ]\r\n    volumeDiscount.some(({volume, discount}, idx) => {\r\n        if (totalCost >= volume) {\r\n            totalCost = totalCost * (1 - discount)\r\n            return true;\r\n        }\r\n        return false;\r\n    })\r\n    const stateTaxes = {\r\n        UT: 6.85,\r\n        NV: 8.00,\r\n        TX: 6.25,\r\n        AL: 4.00,\r\n        CA: 8.25,\r\n    }\r\n    return totalCost * (1 + stateTaxes[commands[2]] / 100);\r\n}" } }, "schemaVersion": "1.0", "thresholds": { "high": 80, "low": 60, "break": null }, "testFiles": { "dist/test/folder_1/test_kata_1.spec.js": { "tests": [{ "id": "0", "name": "hello world kata should return hello world" }, { "id": "1", "name": "hello world kata should use a generator function that returns hello" }, { "id": "2", "name": "hello world kata should use a generator function that returns world on second call" }, { "id": "3", "name": "hello world kata should use a generator function that returns done after three calls" }], "source": "import assert from \"node:assert\";\nimport HelloWorld, { helloWorldGenerator } from '../../src/folder_1/1_kata.js';\ndescribe('hello world kata', function () {\n    it('should return hello world', function () {\n        assert.equal(HelloWorld(), \"Hello World\");\n    });\n    it('should use a generator function that returns hello', () => {\n        let firstCall = helloWorldGenerator().next();\n        assert.equal(firstCall.value, 'Hello');\n        assert.equal(firstCall.done, false);\n    });\n    it('should use a generator function that returns world on second call', () => {\n        let sequence = helloWorldGenerator();\n        sequence.next();\n        let secondCall = sequence.next();\n        assert.equal(secondCall.value, 'World');\n        assert.equal(secondCall.done, false);\n    });\n    it('should use a generator function that returns done after three calls', () => {\n        let sequence = helloWorldGenerator();\n        const firstCall = sequence.next();\n        const secondCall = sequence.next();\n        const thirdCall = sequence.next();\n        assert.equal(thirdCall.done, true);\n    });\n});\n" }, "dist/test/folder_1/test_kata_10.spec.js": { "tests": [{ "id": "4", "name": "hello world kata four should return hello world" }, { "id": "5", "name": "hello world kata four should use a generator function that returns hello" }, { "id": "6", "name": "hello world kata four should use a generator function that returns world on second call" }, { "id": "7", "name": "hello world kata four should use a generator function that returns done after three calls" }], "source": "import assert from \"node:assert\";\nimport HelloWorld, { helloWorldGenerator } from '../../src/folder_1/10_kata.js';\ndescribe('hello world kata four', function () {\n    it('should return hello world', function () {\n        assert.equal(HelloWorld(), \"Hello World\");\n    });\n    it('should use a generator function that returns hello', () => {\n        let firstCall = helloWorldGenerator().next();\n        assert.equal(firstCall.value, 'Hello');\n        assert.equal(firstCall.done, false);\n    });\n    it('should use a generator function that returns world on second call', () => {\n        let sequence = helloWorldGenerator();\n        sequence.next();\n        let secondCall = sequence.next();\n        assert.equal(secondCall.value, 'World');\n        assert.equal(secondCall.done, false);\n    });\n    it('should use a generator function that returns done after three calls', () => {\n        let sequence = helloWorldGenerator();\n        const firstCall = sequence.next();\n        const secondCall = sequence.next();\n        const thirdCall = sequence.next();\n        assert.equal(thirdCall.done, true);\n    });\n});\n" }, "dist/test/folder_1/test_kata_11.spec.js": { "tests": [{ "id": "8", "name": "kata two four given 0 items can accept an input of how many items, cost per item, state code, and calculate total value" }, { "id": "9", "name": "kata two four given 1 item and a NV state code can accept an input of how many items, cost per item, state code, and calculate total value" }, { "id": "10", "name": "kata two four given 1 item and a UT state code can accept an input of how many items, cost per item, state code, and calculate total value" }, { "id": "11", "name": "kata two four given 1 item and a TX state code can accept an input of how many items, cost per item, state code, and calculate total value" }, { "id": "12", "name": "kata two four given 1 item and a AL state code can accept an input of how many items, cost per item, state code, and calculate total value" }, { "id": "13", "name": "kata two four given 1 item and a CA state code can accept an input of how many items, cost per item, state code, and calculate total value" }, { "id": "14", "name": "kata two four given 1000 of items can accept an input of how many items, cost per item, state code, and calculate total value" }, { "id": "15", "name": "kata two four given 5000 of items can accept an input of how many items, cost per item, state code, and calculate total value" }, { "id": "16", "name": "kata two four given 7000 of items can accept an input of how many items, cost per item, state code, and calculate total value" }, { "id": "17", "name": "kata two four given 10000 of items can accept an input of how many items, cost per item, state code, and calculate total value" }, { "id": "18", "name": "kata two four given 50000 of items can accept an input of how many items, cost per item, state code, and calculate total value" }], "source": "import { assert } from 'chai';\nimport { input } from \"../../src/folder_1/11_kata.js\";\ndescribe('kata two four', function () {\n    it('given 0 items can accept an input of how many items, cost per item, state code, and calculate total value', function () {\n        const commands = [\n            \"0\",\n            \"5\",\n            \"NV\"\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, 0);\n    });\n    [\n        { state: \"NV\", multiplier: 1.08 },\n        { state: \"UT\", multiplier: 1.0685 },\n        { state: \"TX\", multiplier: 1.0625 },\n        { state: \"AL\", multiplier: 1.0400 },\n        { state: \"CA\", multiplier: 1.0825 },\n    ].forEach(({ state, multiplier }) => it(`given 1 item and a ${state} state code can accept an input of how many items, cost per item, state code, ` +\n        'and calculate total value', function () {\n        const commands = [\n            \"1\",\n            \"5\",\n            state\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, 5 * multiplier);\n    }));\n    [\n        { amount: \"1000\", discount: 0.03 },\n        { amount: \"5000\", discount: 0.05 },\n        { amount: \"7000\", discount: 0.07 },\n        { amount: \"10000\", discount: 0.10 },\n        { amount: \"50000\", discount: 0.15 },\n    ].forEach(({ amount, discount }) => it(`given ${amount} of items can accept an input of how many items, cost per item, state code, and calculate total value`, function () {\n        const commands = [\n            \"1\",\n            amount,\n            \"NV\"\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, +amount * (1 - discount) * (1.08));\n    }));\n});\n" }, "dist/test/folder_1/test_kata_12.spec.js": { "tests": [{ "id": "19", "name": "can do battle four the vile zerg zergling will battle the epic terran marine" }, { "id": "20", "name": "can do battle four the vile zerg zergling will battle the epic protos zealot" }, { "id": "21", "name": "can do battle four the vile zerg zergling cannot hit a unit it has not run at" }], "source": "import { assert } from \"chai\";\nimport { Zergling, Marine, Zealot } from '../../src/folder_1/12_kata.js';\ndescribe('can do battle four', () => {\n    it('the vile zerg zergling will battle the epic terran marine', () => {\n        const marine = new Marine();\n        const zergling = new Zergling();\n        zergling.run(marine);\n        marine.shoot(zergling);\n        zergling.attack(marine);\n        marine.shoot(zergling);\n        assert.equal(marine.alive(), true);\n        assert.equal(zergling.alive(), false);\n    });\n    it('the vile zerg zergling will battle the epic protos zealot', () => {\n        const zealot = new Zealot();\n        const zergling = new Zergling();\n        zergling.run(zealot);\n        zealot.claw(zergling);\n        zergling.attack(zealot);\n        zealot.claw(zergling);\n        assert.equal(zealot.alive(), true);\n    });\n    it('the vile zerg zergling cannot hit a unit it has not run at', () => {\n        const zealot = new Zealot();\n        const zergling = new Zergling();\n        zergling.attack(zealot);\n        assert.equal(zealot.hitpointBar(), \"full\");\n    });\n});\n" }, "dist/test/folder_1/test_kata_13.spec.js": { "tests": [{ "id": "22", "name": "hello world kata five should return hello world" }, { "id": "23", "name": "hello world kata five should use a generator function that returns hello" }, { "id": "24", "name": "hello world kata five should use a generator function that returns world on second call" }, { "id": "25", "name": "hello world kata five should use a generator function that returns done after three calls" }], "source": "import assert from \"node:assert\";\nimport HelloWorld, { helloWorldGenerator } from '../../src/folder_1/13_kata.js';\ndescribe('hello world kata five', function () {\n    it('should return hello world', function () {\n        assert.equal(HelloWorld(), \"Hello World\");\n    });\n    it('should use a generator function that returns hello', () => {\n        let firstCall = helloWorldGenerator().next();\n        assert.equal(firstCall.value, 'Hello');\n        assert.equal(firstCall.done, false);\n    });\n    it('should use a generator function that returns world on second call', () => {\n        let sequence = helloWorldGenerator();\n        sequence.next();\n        let secondCall = sequence.next();\n        assert.equal(secondCall.value, 'World');\n        assert.equal(secondCall.done, false);\n    });\n    it('should use a generator function that returns done after three calls', () => {\n        let sequence = helloWorldGenerator();\n        const firstCall = sequence.next();\n        const secondCall = sequence.next();\n        const thirdCall = sequence.next();\n        assert.equal(thirdCall.done, true);\n    });\n});\n" }, "dist/test/folder_1/test_kata_14.spec.js": { "tests": [{ "id": "26", "name": "kata two five given 0 items can accept an input of how many items, cost per item, state code, and calculate total value" }, { "id": "27", "name": "kata two five given 1 item and a NV state code can accept an input of how many items, cost per item, state code, and calculate total value" }, { "id": "28", "name": "kata two five given 1 item and a UT state code can accept an input of how many items, cost per item, state code, and calculate total value" }, { "id": "29", "name": "kata two five given 1 item and a TX state code can accept an input of how many items, cost per item, state code, and calculate total value" }, { "id": "30", "name": "kata two five given 1 item and a AL state code can accept an input of how many items, cost per item, state code, and calculate total value" }, { "id": "31", "name": "kata two five given 1 item and a CA state code can accept an input of how many items, cost per item, state code, and calculate total value" }, { "id": "32", "name": "kata two five given 1000 of items can accept an input of how many items, cost per item, state code, and calculate total value" }, { "id": "33", "name": "kata two five given 5000 of items can accept an input of how many items, cost per item, state code, and calculate total value" }, { "id": "34", "name": "kata two five given 7000 of items can accept an input of how many items, cost per item, state code, and calculate total value" }, { "id": "35", "name": "kata two five given 10000 of items can accept an input of how many items, cost per item, state code, and calculate total value" }, { "id": "36", "name": "kata two five given 50000 of items can accept an input of how many items, cost per item, state code, and calculate total value" }], "source": "import { assert } from 'chai';\nimport { input } from \"../../src/folder_1/14_kata.js\";\ndescribe('kata two five', function () {\n    it('given 0 items can accept an input of how many items, cost per item, state code, and calculate total value', function () {\n        const commands = [\n            \"0\",\n            \"5\",\n            \"NV\"\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, 0);\n    });\n    [\n        { state: \"NV\", multiplier: 1.08 },\n        { state: \"UT\", multiplier: 1.0685 },\n        { state: \"TX\", multiplier: 1.0625 },\n        { state: \"AL\", multiplier: 1.0400 },\n        { state: \"CA\", multiplier: 1.0825 },\n    ].forEach(({ state, multiplier }) => it(`given 1 item and a ${state} state code can accept an input of how many items, cost per item, state code, ` +\n        'and calculate total value', function () {\n        const commands = [\n            \"1\",\n            \"5\",\n            state\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, 5 * multiplier);\n    }));\n    [\n        { amount: \"1000\", discount: 0.03 },\n        { amount: \"5000\", discount: 0.05 },\n        { amount: \"7000\", discount: 0.07 },\n        { amount: \"10000\", discount: 0.10 },\n        { amount: \"50000\", discount: 0.15 },\n    ].forEach(({ amount, discount }) => it(`given ${amount} of items can accept an input of how many items, cost per item, state code, and calculate total value`, function () {\n        const commands = [\n            \"1\",\n            amount,\n            \"NV\"\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, +amount * (1 - discount) * (1.08));\n    }));\n});\n" }, "dist/test/folder_1/test_kata_15.spec.js": { "tests": [{ "id": "37", "name": "can do battle five the vile zerg zergling will battle the epic terran marine" }, { "id": "38", "name": "can do battle five the vile zerg zergling will battle the epic protos zealot" }, { "id": "39", "name": "can do battle five the vile zerg zergling cannot hit a unit it has not run at" }], "source": "import { assert } from \"chai\";\nimport { Zergling, Marine, Zealot } from '../../src/folder_1/15_kata.js';\ndescribe('can do battle five', () => {\n    it('the vile zerg zergling will battle the epic terran marine', () => {\n        const marine = new Marine();\n        const zergling = new Zergling();\n        zergling.run(marine);\n        marine.shoot(zergling);\n        zergling.attack(marine);\n        marine.shoot(zergling);\n        assert.equal(marine.alive(), true);\n        assert.equal(zergling.alive(), false);\n    });\n    it('the vile zerg zergling will battle the epic protos zealot', () => {\n        const zealot = new Zealot();\n        const zergling = new Zergling();\n        zergling.run(zealot);\n        zealot.claw(zergling);\n        zergling.attack(zealot);\n        zealot.claw(zergling);\n        assert.equal(zealot.alive(), true);\n    });\n    it('the vile zerg zergling cannot hit a unit it has not run at', () => {\n        const zealot = new Zealot();\n        const zergling = new Zergling();\n        zergling.attack(zealot);\n        assert.equal(zealot.hitpointBar(), \"full\");\n    });\n});\n" }, "dist/test/folder_1/test_kata_16.spec.js": { "tests": [{ "id": "40", "name": "hello world kata six should return hello world" }, { "id": "41", "name": "hello world kata six should use a generator function that returns hello" }, { "id": "42", "name": "hello world kata six should use a generator function that returns world on second call" }, { "id": "43", "name": "hello world kata six should use a generator function that returns done after three calls" }], "source": "import assert from \"node:assert\";\nimport HelloWorld, { helloWorldGenerator } from '../../src/folder_1/16_kata.js';\ndescribe('hello world kata six', function () {\n    it('should return hello world', function () {\n        assert.equal(HelloWorld(), \"Hello World\");\n    });\n    it('should use a generator function that returns hello', () => {\n        let firstCall = helloWorldGenerator().next();\n        assert.equal(firstCall.value, 'Hello');\n        assert.equal(firstCall.done, false);\n    });\n    it('should use a generator function that returns world on second call', () => {\n        let sequence = helloWorldGenerator();\n        sequence.next();\n        let secondCall = sequence.next();\n        assert.equal(secondCall.value, 'World');\n        assert.equal(secondCall.done, false);\n    });\n    it('should use a generator function that returns done after three calls', () => {\n        let sequence = helloWorldGenerator();\n        const firstCall = sequence.next();\n        const secondCall = sequence.next();\n        const thirdCall = sequence.next();\n        assert.equal(thirdCall.done, true);\n    });\n});\n" }, "dist/test/folder_1/test_kata_17.spec.js": { "tests": [{ "id": "44", "name": "kata two six given 0 items can accept an input of how many items, cost per item, state code, and calculate total value" }, { "id": "45", "name": "kata two six given 1 item and a NV state code can accept an input of how many items, cost per item, state code, and calculate total value" }, { "id": "46", "name": "kata two six given 1 item and a UT state code can accept an input of how many items, cost per item, state code, and calculate total value" }, { "id": "47", "name": "kata two six given 1 item and a TX state code can accept an input of how many items, cost per item, state code, and calculate total value" }, { "id": "48", "name": "kata two six given 1 item and a AL state code can accept an input of how many items, cost per item, state code, and calculate total value" }, { "id": "49", "name": "kata two six given 1 item and a CA state code can accept an input of how many items, cost per item, state code, and calculate total value" }, { "id": "50", "name": "kata two six given 1000 of items can accept an input of how many items, cost per item, state code, and calculate total value" }, { "id": "51", "name": "kata two six given 5000 of items can accept an input of how many items, cost per item, state code, and calculate total value" }, { "id": "52", "name": "kata two six given 7000 of items can accept an input of how many items, cost per item, state code, and calculate total value" }, { "id": "53", "name": "kata two six given 10000 of items can accept an input of how many items, cost per item, state code, and calculate total value" }, { "id": "54", "name": "kata two six given 50000 of items can accept an input of how many items, cost per item, state code, and calculate total value" }], "source": "import { assert } from 'chai';\nimport { input } from \"../../src/folder_1/17_kata.js\";\ndescribe('kata two six', function () {\n    it('given 0 items can accept an input of how many items, cost per item, state code, and calculate total value', function () {\n        const commands = [\n            \"0\",\n            \"5\",\n            \"NV\"\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, 0);\n    });\n    [\n        { state: \"NV\", multiplier: 1.08 },\n        { state: \"UT\", multiplier: 1.0685 },\n        { state: \"TX\", multiplier: 1.0625 },\n        { state: \"AL\", multiplier: 1.0400 },\n        { state: \"CA\", multiplier: 1.0825 },\n    ].forEach(({ state, multiplier }) => it(`given 1 item and a ${state} state code can accept an input of how many items, cost per item, state code, ` +\n        'and calculate total value', function () {\n        const commands = [\n            \"1\",\n            \"5\",\n            state\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, 5 * multiplier);\n    }));\n    [\n        { amount: \"1000\", discount: 0.03 },\n        { amount: \"5000\", discount: 0.05 },\n        { amount: \"7000\", discount: 0.07 },\n        { amount: \"10000\", discount: 0.10 },\n        { amount: \"50000\", discount: 0.15 },\n    ].forEach(({ amount, discount }) => it(`given ${amount} of items can accept an input of how many items, cost per item, state code, and calculate total value`, function () {\n        const commands = [\n            \"1\",\n            amount,\n            \"NV\"\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, +amount * (1 - discount) * (1.08));\n    }));\n});\n" }, "dist/test/folder_1/test_kata_18.spec.js": { "tests": [{ "id": "55", "name": "can do battle six the vile zerg zergling will battle the epic terran marine" }, { "id": "56", "name": "can do battle six the vile zerg zergling will battle the epic protos zealot" }, { "id": "57", "name": "can do battle six the vile zerg zergling cannot hit a unit it has not run at" }], "source": "import { assert } from \"chai\";\nimport { Zergling, Marine, Zealot } from '../../src/folder_1/18_kata.js';\ndescribe('can do battle six', () => {\n    it('the vile zerg zergling will battle the epic terran marine', () => {\n        const marine = new Marine();\n        const zergling = new Zergling();\n        zergling.run(marine);\n        marine.shoot(zergling);\n        zergling.attack(marine);\n        marine.shoot(zergling);\n        assert.equal(marine.alive(), true);\n        assert.equal(zergling.alive(), false);\n    });\n    it('the vile zerg zergling will battle the epic protos zealot', () => {\n        const zealot = new Zealot();\n        const zergling = new Zergling();\n        zergling.run(zealot);\n        zealot.claw(zergling);\n        zergling.attack(zealot);\n        zealot.claw(zergling);\n        assert.equal(zealot.alive(), true);\n    });\n    it('the vile zerg zergling cannot hit a unit it has not run at', () => {\n        const zealot = new Zealot();\n        const zergling = new Zergling();\n        zergling.attack(zealot);\n        assert.equal(zealot.hitpointBar(), \"full\");\n    });\n});\n" }, "dist/test/folder_1/test_kata_2.spec.js": { "tests": [{ "id": "58", "name": "kata two given 0 items can accept an input of how many items, cost per item, state code, and calculate total value" }, { "id": "59", "name": "kata two given 1 item and a NV state code can accept an input of how many items, cost per item, state code, and calculate total value" }, { "id": "60", "name": "kata two given 1 item and a UT state code can accept an input of how many items, cost per item, state code, and calculate total value" }, { "id": "61", "name": "kata two given 1 item and a TX state code can accept an input of how many items, cost per item, state code, and calculate total value" }, { "id": "62", "name": "kata two given 1 item and a AL state code can accept an input of how many items, cost per item, state code, and calculate total value" }, { "id": "63", "name": "kata two given 1 item and a CA state code can accept an input of how many items, cost per item, state code, and calculate total value" }, { "id": "64", "name": "kata two given 1000 of items can accept an input of how many items, cost per item, state code, and calculate total value" }, { "id": "65", "name": "kata two given 5000 of items can accept an input of how many items, cost per item, state code, and calculate total value" }, { "id": "66", "name": "kata two given 7000 of items can accept an input of how many items, cost per item, state code, and calculate total value" }, { "id": "67", "name": "kata two given 10000 of items can accept an input of how many items, cost per item, state code, and calculate total value" }, { "id": "68", "name": "kata two given 50000 of items can accept an input of how many items, cost per item, state code, and calculate total value" }], "source": "import { assert } from 'chai';\nimport { input } from \"../../src/folder_1/2_kata.js\";\ndescribe('kata two', function () {\n    it('given 0 items can accept an input of how many items, cost per item, state code, and calculate total value', function () {\n        const commands = [\n            \"0\",\n            \"5\",\n            \"NV\"\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, 0);\n    });\n    [\n        { state: \"NV\", multiplier: 1.08 },\n        { state: \"UT\", multiplier: 1.0685 },\n        { state: \"TX\", multiplier: 1.0625 },\n        { state: \"AL\", multiplier: 1.0400 },\n        { state: \"CA\", multiplier: 1.0825 },\n    ].forEach(({ state, multiplier }) => it(`given 1 item and a ${state} state code can accept an input of how many items, cost per item, state code, ` +\n        'and calculate total value', function () {\n        const commands = [\n            \"1\",\n            \"5\",\n            state\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, 5 * multiplier);\n    }));\n    [\n        { amount: \"1000\", discount: 0.03 },\n        { amount: \"5000\", discount: 0.05 },\n        { amount: \"7000\", discount: 0.07 },\n        { amount: \"10000\", discount: 0.10 },\n        { amount: \"50000\", discount: 0.15 },\n    ].forEach(({ amount, discount }) => it(`given ${amount} of items can accept an input of how many items, cost per item, state code, and calculate total value`, function () {\n        const commands = [\n            \"1\",\n            amount,\n            \"NV\"\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, +amount * (1 - discount) * (1.08));\n    }));\n});\n" }, "dist/test/folder_1/test_kata_3.spec.js": { "tests": [{ "id": "69", "name": "can do battle the vile zerg zergling will battle the epic terran marine" }, { "id": "70", "name": "can do battle the vile zerg zergling will battle the epic protos zealot" }, { "id": "71", "name": "can do battle the vile zerg zergling cannot hit a unit it has not run at" }], "source": "import { assert } from \"chai\";\nimport { Zergling, Marine, Zealot } from '../../src/folder_1/3_kata.js';\ndescribe('can do battle', () => {\n    it('the vile zerg zergling will battle the epic terran marine', () => {\n        const marine = new Marine();\n        const zergling = new Zergling();\n        zergling.run(marine);\n        marine.shoot(zergling);\n        zergling.attack(marine);\n        marine.shoot(zergling);\n        assert.equal(marine.alive(), true);\n        assert.equal(zergling.alive(), false);\n    });\n    it('the vile zerg zergling will battle the epic protos zealot', () => {\n        const zealot = new Zealot();\n        const zergling = new Zergling();\n        zergling.run(zealot);\n        zealot.claw(zergling);\n        zergling.attack(zealot);\n        zealot.claw(zergling);\n        assert.equal(zealot.alive(), true);\n    });\n    it('the vile zerg zergling cannot hit a unit it has not run at', () => {\n        const zealot = new Zealot();\n        const zergling = new Zergling();\n        zergling.attack(zealot);\n        assert.equal(zealot.hitpointBar(), \"full\");\n    });\n});\n" }, "dist/test/folder_1/test_kata_4.spec.js": { "tests": [{ "id": "72", "name": "hello world kata two should return hello world" }, { "id": "73", "name": "hello world kata two should use a generator function that returns hello" }, { "id": "74", "name": "hello world kata two should use a generator function that returns world on second call" }, { "id": "75", "name": "hello world kata two should use a generator function that returns done after three calls" }], "source": "import assert from \"node:assert\";\nimport HelloWorld, { helloWorldGenerator } from '../../src/folder_1/4_kata.js';\ndescribe('hello world kata two', function () {\n    it('should return hello world', function () {\n        assert.equal(HelloWorld(), \"Hello World\");\n    });\n    it('should use a generator function that returns hello', () => {\n        let firstCall = helloWorldGenerator().next();\n        assert.equal(firstCall.value, 'Hello');\n        assert.equal(firstCall.done, false);\n    });\n    it('should use a generator function that returns world on second call', () => {\n        let sequence = helloWorldGenerator();\n        sequence.next();\n        let secondCall = sequence.next();\n        assert.equal(secondCall.value, 'World');\n        assert.equal(secondCall.done, false);\n    });\n    it('should use a generator function that returns done after three calls', () => {\n        let sequence = helloWorldGenerator();\n        const firstCall = sequence.next();\n        const secondCall = sequence.next();\n        const thirdCall = sequence.next();\n        assert.equal(thirdCall.done, true);\n    });\n});\n" }, "dist/test/folder_1/test_kata_5.spec.js": { "tests": [{ "id": "76", "name": "kata two two given 0 items can accept an input of how many items, cost per item, state code, and calculate total value" }, { "id": "77", "name": "kata two two given 1 item and a NV state code can accept an input of how many items, cost per item, state code, and calculate total value" }, { "id": "78", "name": "kata two two given 1 item and a UT state code can accept an input of how many items, cost per item, state code, and calculate total value" }, { "id": "79", "name": "kata two two given 1 item and a TX state code can accept an input of how many items, cost per item, state code, and calculate total value" }, { "id": "80", "name": "kata two two given 1 item and a AL state code can accept an input of how many items, cost per item, state code, and calculate total value" }, { "id": "81", "name": "kata two two given 1 item and a CA state code can accept an input of how many items, cost per item, state code, and calculate total value" }, { "id": "82", "name": "kata two two given 1000 of items can accept an input of how many items, cost per item, state code, and calculate total value" }, { "id": "83", "name": "kata two two given 5000 of items can accept an input of how many items, cost per item, state code, and calculate total value" }, { "id": "84", "name": "kata two two given 7000 of items can accept an input of how many items, cost per item, state code, and calculate total value" }, { "id": "85", "name": "kata two two given 10000 of items can accept an input of how many items, cost per item, state code, and calculate total value" }, { "id": "86", "name": "kata two two given 50000 of items can accept an input of how many items, cost per item, state code, and calculate total value" }], "source": "import { assert } from 'chai';\nimport { input } from \"../../src/folder_1/5_kata.js\";\ndescribe('kata two two', function () {\n    it('given 0 items can accept an input of how many items, cost per item, state code, and calculate total value', function () {\n        const commands = [\n            \"0\",\n            \"5\",\n            \"NV\"\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, 0);\n    });\n    [\n        { state: \"NV\", multiplier: 1.08 },\n        { state: \"UT\", multiplier: 1.0685 },\n        { state: \"TX\", multiplier: 1.0625 },\n        { state: \"AL\", multiplier: 1.0400 },\n        { state: \"CA\", multiplier: 1.0825 },\n    ].forEach(({ state, multiplier }) => it(`given 1 item and a ${state} state code can accept an input of how many items, cost per item, state code, ` +\n        'and calculate total value', function () {\n        const commands = [\n            \"1\",\n            \"5\",\n            state\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, 5 * multiplier);\n    }));\n    [\n        { amount: \"1000\", discount: 0.03 },\n        { amount: \"5000\", discount: 0.05 },\n        { amount: \"7000\", discount: 0.07 },\n        { amount: \"10000\", discount: 0.10 },\n        { amount: \"50000\", discount: 0.15 },\n    ].forEach(({ amount, discount }) => it(`given ${amount} of items can accept an input of how many items, cost per item, state code, and calculate total value`, function () {\n        const commands = [\n            \"1\",\n            amount,\n            \"NV\"\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, +amount * (1 - discount) * (1.08));\n    }));\n});\n" }, "dist/test/folder_1/test_kata_6.spec.js": { "tests": [{ "id": "87", "name": "can do battle two the vile zerg zergling will battle the epic terran marine" }, { "id": "88", "name": "can do battle two the vile zerg zergling will battle the epic protos zealot" }, { "id": "89", "name": "can do battle two the vile zerg zergling cannot hit a unit it has not run at" }], "source": "import { assert } from \"chai\";\nimport { Zergling, Marine, Zealot } from '../../src/folder_1/6_kata.js';\ndescribe('can do battle two', () => {\n    it('the vile zerg zergling will battle the epic terran marine', () => {\n        const marine = new Marine();\n        const zergling = new Zergling();\n        zergling.run(marine);\n        marine.shoot(zergling);\n        zergling.attack(marine);\n        marine.shoot(zergling);\n        assert.equal(marine.alive(), true);\n        assert.equal(zergling.alive(), false);\n    });\n    it('the vile zerg zergling will battle the epic protos zealot', () => {\n        const zealot = new Zealot();\n        const zergling = new Zergling();\n        zergling.run(zealot);\n        zealot.claw(zergling);\n        zergling.attack(zealot);\n        zealot.claw(zergling);\n        assert.equal(zealot.alive(), true);\n    });\n    it('the vile zerg zergling cannot hit a unit it has not run at', () => {\n        const zealot = new Zealot();\n        const zergling = new Zergling();\n        zergling.attack(zealot);\n        assert.equal(zealot.hitpointBar(), \"full\");\n    });\n});\n" }, "dist/test/folder_1/test_kata_7.spec.js": { "tests": [{ "id": "90", "name": "hello world kata three should return hello world" }, { "id": "91", "name": "hello world kata three should use a generator function that returns hello" }, { "id": "92", "name": "hello world kata three should use a generator function that returns world on second call" }, { "id": "93", "name": "hello world kata three should use a generator function that returns done after three calls" }], "source": "import assert from \"node:assert\";\nimport HelloWorld, { helloWorldGenerator } from '../../src/folder_1/7_kata.js';\ndescribe('hello world kata three', function () {\n    it('should return hello world', function () {\n        assert.equal(HelloWorld(), \"Hello World\");\n    });\n    it('should use a generator function that returns hello', () => {\n        let firstCall = helloWorldGenerator().next();\n        assert.equal(firstCall.value, 'Hello');\n        assert.equal(firstCall.done, false);\n    });\n    it('should use a generator function that returns world on second call', () => {\n        let sequence = helloWorldGenerator();\n        sequence.next();\n        let secondCall = sequence.next();\n        assert.equal(secondCall.value, 'World');\n        assert.equal(secondCall.done, false);\n    });\n    it('should use a generator function that returns done after three calls', () => {\n        let sequence = helloWorldGenerator();\n        const firstCall = sequence.next();\n        const secondCall = sequence.next();\n        const thirdCall = sequence.next();\n        assert.equal(thirdCall.done, true);\n    });\n});\n" }, "dist/test/folder_1/test_kata_8.spec.js": { "tests": [{ "id": "94", "name": "kata two three given 0 items can accept an input of how many items, cost per item, state code, and calculate total value" }, { "id": "95", "name": "kata two three given 1 item and a NV state code can accept an input of how many items, cost per item, state code, and calculate total value" }, { "id": "96", "name": "kata two three given 1 item and a UT state code can accept an input of how many items, cost per item, state code, and calculate total value" }, { "id": "97", "name": "kata two three given 1 item and a TX state code can accept an input of how many items, cost per item, state code, and calculate total value" }, { "id": "98", "name": "kata two three given 1 item and a AL state code can accept an input of how many items, cost per item, state code, and calculate total value" }, { "id": "99", "name": "kata two three given 1 item and a CA state code can accept an input of how many items, cost per item, state code, and calculate total value" }, { "id": "100", "name": "kata two three given 1000 of items can accept an input of how many items, cost per item, state code, and calculate total value" }, { "id": "101", "name": "kata two three given 5000 of items can accept an input of how many items, cost per item, state code, and calculate total value" }, { "id": "102", "name": "kata two three given 7000 of items can accept an input of how many items, cost per item, state code, and calculate total value" }, { "id": "103", "name": "kata two three given 10000 of items can accept an input of how many items, cost per item, state code, and calculate total value" }, { "id": "104", "name": "kata two three given 50000 of items can accept an input of how many items, cost per item, state code, and calculate total value" }], "source": "import { assert } from 'chai';\nimport { input } from \"../../src/folder_1/8_kata.js\";\ndescribe('kata two three', function () {\n    it('given 0 items can accept an input of how many items, cost per item, state code, and calculate total value', function () {\n        const commands = [\n            \"0\",\n            \"5\",\n            \"NV\"\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, 0);\n    });\n    [\n        { state: \"NV\", multiplier: 1.08 },\n        { state: \"UT\", multiplier: 1.0685 },\n        { state: \"TX\", multiplier: 1.0625 },\n        { state: \"AL\", multiplier: 1.0400 },\n        { state: \"CA\", multiplier: 1.0825 },\n    ].forEach(({ state, multiplier }) => it(`given 1 item and a ${state} state code can accept an input of how many items, cost per item, state code, ` +\n        'and calculate total value', function () {\n        const commands = [\n            \"1\",\n            \"5\",\n            state\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, 5 * multiplier);\n    }));\n    [\n        { amount: \"1000\", discount: 0.03 },\n        { amount: \"5000\", discount: 0.05 },\n        { amount: \"7000\", discount: 0.07 },\n        { amount: \"10000\", discount: 0.10 },\n        { amount: \"50000\", discount: 0.15 },\n    ].forEach(({ amount, discount }) => it(`given ${amount} of items can accept an input of how many items, cost per item, state code, and calculate total value`, function () {\n        const commands = [\n            \"1\",\n            amount,\n            \"NV\"\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, +amount * (1 - discount) * (1.08));\n    }));\n});\n" }, "dist/test/folder_1/test_kata_9.spec.js": { "tests": [{ "id": "105", "name": "can do battle three the vile zerg zergling will battle the epic terran marine" }, { "id": "106", "name": "can do battle three the vile zerg zergling will battle the epic protos zealot" }, { "id": "107", "name": "can do battle three the vile zerg zergling cannot hit a unit it has not run at" }], "source": "import { assert } from \"chai\";\nimport { Zergling, Marine, Zealot } from '../../src/folder_1/9_kata.js';\ndescribe('can do battle three', () => {\n    it('the vile zerg zergling will battle the epic terran marine', () => {\n        const marine = new Marine();\n        const zergling = new Zergling();\n        zergling.run(marine);\n        marine.shoot(zergling);\n        zergling.attack(marine);\n        marine.shoot(zergling);\n        assert.equal(marine.alive(), true);\n        assert.equal(zergling.alive(), false);\n    });\n    it('the vile zerg zergling will battle the epic protos zealot', () => {\n        const zealot = new Zealot();\n        const zergling = new Zergling();\n        zergling.run(zealot);\n        zealot.claw(zergling);\n        zergling.attack(zealot);\n        zealot.claw(zergling);\n        assert.equal(zealot.alive(), true);\n    });\n    it('the vile zerg zergling cannot hit a unit it has not run at', () => {\n        const zealot = new Zealot();\n        const zergling = new Zergling();\n        zergling.attack(zealot);\n        assert.equal(zealot.hitpointBar(), \"full\");\n    });\n});\n" } }, "projectRoot": "C:\\Users\\evano\\WebstormProjects\\JavascriptKata", "config": { "$schema": "./node_modules/@stryker-mutator/core/schema/stryker-schema.json", "_comment": "This config was generated using 'stryker init'. Please take a look at: https://stryker-mutator.io/docs/stryker-js/configuration/ for more information.", "packageManager": "npm", "reporters": ["html", "json", "clear-text", "progress"], "tsconfigFile": "tsconfig.json", "testRunner": "mocha", "testRunner_comment": "Take a look at https://stryker-mutator.io/docs/stryker-js/mocha-runner for information about the mocha plugin.", "coverageAnalysis": "perTest", "buildCommand": "npm run build", "mochaOptions": { "spec": ["dist/**/*.spec.js"] }, "allowConsoleColors": true, "checkers": [], "checkerNodeArgs": [], "commandRunner": { "command": "npm test" }, "clearTextReporter": { "allowColor": true, "allowEmojis": false, "logTests": true, "maxTestsToLog": 3, "reportTests": true, "reportMutants": true, "reportScoreTable": true, "skipFull": false }, "dashboard": { "baseUrl": "https://dashboard.stryker-mutator.io/api/reports", "reportType": "full" }, "dryRunOnly": false, "eventReporter": { "baseDir": "reports/mutation/events" }, "ignorePatterns": [], "ignoreStatic": false, "incremental": false, "incrementalFile": "reports/stryker-incremental.json", "force": false, "fileLogLevel": "off", "inPlace": false, "logLevel": "info", "maxConcurrentTestRunners": 9007199254740991, "maxTestRunnerReuse": 0, "mutate": ["{src,lib}/**/!(*.+(s|S)pec|*.+(t|T)est).+(cjs|mjs|js|ts|mts|cts|jsx|tsx|html|vue|svelte)", "!{src,lib}/**/__tests__/**/*.+(cjs|mjs|js|ts|mts|cts|jsx|tsx|html|vue|svelte)"], "mutator": { "plugins": null, "excludedMutations": [] }, "plugins": ["@stryker-mutator/*"], "appendPlugins": [], "htmlReporter": { "fileName": "reports/mutation/mutation.html" }, "jsonReporter": { "fileName": "reports/mutation/mutation.json" }, "disableTypeChecks": true, "symlinkNodeModules": true, "tempDirName": ".stryker-tmp", "cleanTempDir": true, "testRunnerNodeArgs": [], "thresholds": { "high": 80, "low": 60, "break": null }, "timeoutFactor": 1.5, "timeoutMS": 5000, "dryRunTimeoutMinutes": 5, "warnings": true, "disableBail": false, "allowEmpty": false, "ignorers": [] }, "framework": { "name": "StrykerJS", "version": "9.0.1", "branding": { "homepageUrl": "https://stryker-mutator.io", "imageUrl": "data:image/svg+xml;utf8,%3Csvg viewBox='0 0 1458 1458' xmlns='http://www.w3.org/2000/svg' fill-rule='evenodd' clip-rule='evenodd' stroke-linejoin='round' stroke-miterlimit='2'%3E%3Cpath fill='none' d='M0 0h1458v1458H0z'/%3E%3CclipPath id='a'%3E%3Cpath d='M0 0h1458v1458H0z'/%3E%3C/clipPath%3E%3Cg clip-path='url(%23a)'%3E%3Cpath d='M1458 729c0 402.655-326.345 729-729 729S0 1131.655 0 729C0 326.445 326.345 0 729 0s729 326.345 729 729' fill='%23e74c3c' fill-rule='nonzero'/%3E%3Cpath d='M778.349 1456.15L576.6 1254.401l233-105 85-78.668v-64.332l-257-257-44-187-50-208 251.806-82.793L1076.6 389.401l380.14 379.15c-19.681 367.728-311.914 663.049-678.391 687.599z' fill-opacity='.3'/%3E%3Cpath d='M753.4 329.503c41.79 0 74.579 7.83 97.925 25.444 23.571 18.015 41.69 43.956 55.167 77.097l11.662 28.679 165.733-58.183-14.137-32.13c-26.688-60.655-64.896-108.61-114.191-144.011-49.329-35.423-117.458-54.302-204.859-54.302-50.78 0-95.646 7.376-134.767 21.542-40.093 14.671-74.09 34.79-102.239 60.259-28.84 26.207-50.646 57.06-65.496 92.701-14.718 35.052-22.101 72.538-22.101 112.401 0 72.536 20.667 133.294 61.165 182.704 38.624 47.255 98.346 88.037 179.861 121.291 42.257 17.475 78.715 33.125 109.227 46.994 27.193 12.361 49.294 26.124 66.157 41.751 15.309 14.186 26.497 30.584 33.63 49.258 7.721 20.214 11.16 45.69 11.16 76.402 0 28.021-4.251 51.787-13.591 71.219-8.832 18.374-20.171 33.178-34.523 44.219-14.787 11.374-31.193 19.591-49.393 24.466-19.68 5.359-39.14 7.993-58.69 7.993-29.359 0-54.387-3.407-75.182-10.747-20.112-7.013-37.144-16.144-51.259-27.486-13.618-11.009-24.971-23.766-33.744-38.279-9.64-15.8-17.272-31.924-23.032-48.408l-10.965-31.376-161.669 60.585 10.734 30.124c10.191 28.601 24.197 56.228 42.059 82.748 18.208 27.144 41.322 51.369 69.525 72.745 27.695 21.075 60.904 38.218 99.481 51.041 37.777 12.664 82.004 19.159 132.552 19.159 49.998 0 95.818-8.321 137.611-24.622 42.228-16.471 78.436-38.992 108.835-67.291 30.719-28.597 54.631-62.103 71.834-100.642 17.263-38.56 25.923-79.392 25.923-122.248 0-54.339-8.368-100.37-24.208-138.32-16.29-38.759-38.252-71.661-65.948-98.797-26.965-26.418-58.269-48.835-93.858-67.175-33.655-17.241-69.196-33.11-106.593-47.533-35.934-13.429-65.822-26.601-89.948-39.525-22.153-11.868-40.009-24.21-53.547-37.309-11.429-11.13-19.83-23.678-24.718-37.664-5.413-15.49-7.98-33.423-7.98-53.577 0-40.883 11.293-71.522 37.086-90.539 28.443-20.825 64.985-30.658 109.311-30.658z' fill='%23f1c40f' fill-rule='nonzero'/%3E%3Cpath d='M720 0h18v113h-18zM1458 738v-18h-113v18h113zM720 1345h18v113h-18zM113 738v-18H0v18h113z'/%3E%3C/g%3E%3C/svg%3E" }, "dependencies": { "@stryker-mutator/mocha-runner": "9.0.1", "mocha": "11.7.1", "typescript": "5.8.3" } } }
diff --git a/dist/1_kata.js b/dist/src/folder_1/10_kata.js
similarity index 100%
rename from dist/1_kata.js
rename to dist/src/folder_1/10_kata.js
diff --git a/dist/2_kata.js b/dist/src/folder_1/11_kata.js
similarity index 100%
rename from dist/2_kata.js
rename to dist/src/folder_1/11_kata.js
diff --git a/dist/src/3_kata.js b/dist/src/folder_1/12_kata.js
similarity index 100%
rename from dist/src/3_kata.js
rename to dist/src/folder_1/12_kata.js
diff --git a/dist/src/1_kata.js b/dist/src/folder_1/13_kata.js
similarity index 100%
rename from dist/src/1_kata.js
rename to dist/src/folder_1/13_kata.js
diff --git a/dist/src/2_kata.js b/dist/src/folder_1/14_kata.js
similarity index 100%
rename from dist/src/2_kata.js
rename to dist/src/folder_1/14_kata.js
diff --git a/dist/src/folder_1/15_kata.js b/dist/src/folder_1/15_kata.js
new file mode 100644
index 0000000..9bebb08
--- /dev/null
+++ b/dist/src/folder_1/15_kata.js
@@ -0,0 +1,54 @@
+export class Zergling {
+    hitpoints = 1;
+    closeUnits = [];
+    attack(unit) {
+        if (this.closeUnits.includes(unit)) {
+            unit.hurt(1);
+        }
+    }
+    alive() {
+        return this.hitpoints > 0;
+    }
+    run(unit) {
+        this.closeUnits.push(unit);
+    }
+    hurt(damage) {
+        this.hitpoints -= damage;
+    }
+}
+export class Marine {
+    hitpoints = 2;
+    attack(unit) {
+        this.shoot(unit);
+    }
+    alive() {
+        return true;
+    }
+    shoot(unit) {
+        unit.hurt(1);
+    }
+    hurt(damage) {
+        this.hitpoints -= damage;
+    }
+}
+export class Zealot {
+    hitpoints = 2;
+    attack(unit) {
+        this.claw(unit);
+    }
+    alive() {
+        return true;
+    }
+    claw(unit) {
+        unit.hurt(2);
+    }
+    hurt(damage) {
+        this.hitpoints -= damage;
+    }
+    hitpointBar() {
+        if (this.hitpoints === 2) {
+            return "full";
+        }
+        return "not full";
+    }
+}
diff --git a/dist/src/folder_1/16_kata.js b/dist/src/folder_1/16_kata.js
new file mode 100644
index 0000000..e41229f
--- /dev/null
+++ b/dist/src/folder_1/16_kata.js
@@ -0,0 +1,7 @@
+export function* helloWorldGenerator() {
+    yield 'Hello';
+    yield 'World';
+}
+export default function HelloWorld() {
+    return Array.from(helloWorldGenerator()).join(' ');
+}
diff --git a/dist/src/folder_1/17_kata.js b/dist/src/folder_1/17_kata.js
new file mode 100644
index 0000000..a8fad85
--- /dev/null
+++ b/dist/src/folder_1/17_kata.js
@@ -0,0 +1,25 @@
+export const input = (commands) => {
+    let totalCost = +commands[0] * +commands[1];
+    const volumeDiscount = [
+        { volume: 50000, discount: 0.15 },
+        { volume: 10000, discount: 0.10 },
+        { volume: 7000, discount: 0.07 },
+        { volume: 5000, discount: 0.05 },
+        { volume: 1000, discount: 0.03 },
+    ];
+    volumeDiscount.some(({ volume, discount }, idx) => {
+        if (totalCost >= volume) {
+            totalCost = totalCost * (1 - discount);
+            return true;
+        }
+        return false;
+    });
+    const stateTaxes = {
+        UT: 6.85,
+        NV: 8.00,
+        TX: 6.25,
+        AL: 4.00,
+        CA: 8.25,
+    };
+    return totalCost * (1 + stateTaxes[commands[2]] / 100);
+};
diff --git a/dist/src/folder_1/18_kata.js b/dist/src/folder_1/18_kata.js
new file mode 100644
index 0000000..9bebb08
--- /dev/null
+++ b/dist/src/folder_1/18_kata.js
@@ -0,0 +1,54 @@
+export class Zergling {
+    hitpoints = 1;
+    closeUnits = [];
+    attack(unit) {
+        if (this.closeUnits.includes(unit)) {
+            unit.hurt(1);
+        }
+    }
+    alive() {
+        return this.hitpoints > 0;
+    }
+    run(unit) {
+        this.closeUnits.push(unit);
+    }
+    hurt(damage) {
+        this.hitpoints -= damage;
+    }
+}
+export class Marine {
+    hitpoints = 2;
+    attack(unit) {
+        this.shoot(unit);
+    }
+    alive() {
+        return true;
+    }
+    shoot(unit) {
+        unit.hurt(1);
+    }
+    hurt(damage) {
+        this.hitpoints -= damage;
+    }
+}
+export class Zealot {
+    hitpoints = 2;
+    attack(unit) {
+        this.claw(unit);
+    }
+    alive() {
+        return true;
+    }
+    claw(unit) {
+        unit.hurt(2);
+    }
+    hurt(damage) {
+        this.hitpoints -= damage;
+    }
+    hitpointBar() {
+        if (this.hitpoints === 2) {
+            return "full";
+        }
+        return "not full";
+    }
+}
diff --git a/dist/src/folder_1/1_kata.js b/dist/src/folder_1/1_kata.js
new file mode 100644
index 0000000..e41229f
--- /dev/null
+++ b/dist/src/folder_1/1_kata.js
@@ -0,0 +1,7 @@
+export function* helloWorldGenerator() {
+    yield 'Hello';
+    yield 'World';
+}
+export default function HelloWorld() {
+    return Array.from(helloWorldGenerator()).join(' ');
+}
diff --git a/dist/src/folder_1/2_kata.js b/dist/src/folder_1/2_kata.js
new file mode 100644
index 0000000..a8fad85
--- /dev/null
+++ b/dist/src/folder_1/2_kata.js
@@ -0,0 +1,25 @@
+export const input = (commands) => {
+    let totalCost = +commands[0] * +commands[1];
+    const volumeDiscount = [
+        { volume: 50000, discount: 0.15 },
+        { volume: 10000, discount: 0.10 },
+        { volume: 7000, discount: 0.07 },
+        { volume: 5000, discount: 0.05 },
+        { volume: 1000, discount: 0.03 },
+    ];
+    volumeDiscount.some(({ volume, discount }, idx) => {
+        if (totalCost >= volume) {
+            totalCost = totalCost * (1 - discount);
+            return true;
+        }
+        return false;
+    });
+    const stateTaxes = {
+        UT: 6.85,
+        NV: 8.00,
+        TX: 6.25,
+        AL: 4.00,
+        CA: 8.25,
+    };
+    return totalCost * (1 + stateTaxes[commands[2]] / 100);
+};
diff --git a/dist/src/folder_1/3_kata.js b/dist/src/folder_1/3_kata.js
new file mode 100644
index 0000000..9bebb08
--- /dev/null
+++ b/dist/src/folder_1/3_kata.js
@@ -0,0 +1,54 @@
+export class Zergling {
+    hitpoints = 1;
+    closeUnits = [];
+    attack(unit) {
+        if (this.closeUnits.includes(unit)) {
+            unit.hurt(1);
+        }
+    }
+    alive() {
+        return this.hitpoints > 0;
+    }
+    run(unit) {
+        this.closeUnits.push(unit);
+    }
+    hurt(damage) {
+        this.hitpoints -= damage;
+    }
+}
+export class Marine {
+    hitpoints = 2;
+    attack(unit) {
+        this.shoot(unit);
+    }
+    alive() {
+        return true;
+    }
+    shoot(unit) {
+        unit.hurt(1);
+    }
+    hurt(damage) {
+        this.hitpoints -= damage;
+    }
+}
+export class Zealot {
+    hitpoints = 2;
+    attack(unit) {
+        this.claw(unit);
+    }
+    alive() {
+        return true;
+    }
+    claw(unit) {
+        unit.hurt(2);
+    }
+    hurt(damage) {
+        this.hitpoints -= damage;
+    }
+    hitpointBar() {
+        if (this.hitpoints === 2) {
+            return "full";
+        }
+        return "not full";
+    }
+}
diff --git a/dist/src/folder_1/4_kata.js b/dist/src/folder_1/4_kata.js
new file mode 100644
index 0000000..e41229f
--- /dev/null
+++ b/dist/src/folder_1/4_kata.js
@@ -0,0 +1,7 @@
+export function* helloWorldGenerator() {
+    yield 'Hello';
+    yield 'World';
+}
+export default function HelloWorld() {
+    return Array.from(helloWorldGenerator()).join(' ');
+}
diff --git a/dist/src/folder_1/5_kata.js b/dist/src/folder_1/5_kata.js
new file mode 100644
index 0000000..a8fad85
--- /dev/null
+++ b/dist/src/folder_1/5_kata.js
@@ -0,0 +1,25 @@
+export const input = (commands) => {
+    let totalCost = +commands[0] * +commands[1];
+    const volumeDiscount = [
+        { volume: 50000, discount: 0.15 },
+        { volume: 10000, discount: 0.10 },
+        { volume: 7000, discount: 0.07 },
+        { volume: 5000, discount: 0.05 },
+        { volume: 1000, discount: 0.03 },
+    ];
+    volumeDiscount.some(({ volume, discount }, idx) => {
+        if (totalCost >= volume) {
+            totalCost = totalCost * (1 - discount);
+            return true;
+        }
+        return false;
+    });
+    const stateTaxes = {
+        UT: 6.85,
+        NV: 8.00,
+        TX: 6.25,
+        AL: 4.00,
+        CA: 8.25,
+    };
+    return totalCost * (1 + stateTaxes[commands[2]] / 100);
+};
diff --git a/dist/src/folder_1/6_kata.js b/dist/src/folder_1/6_kata.js
new file mode 100644
index 0000000..9bebb08
--- /dev/null
+++ b/dist/src/folder_1/6_kata.js
@@ -0,0 +1,54 @@
+export class Zergling {
+    hitpoints = 1;
+    closeUnits = [];
+    attack(unit) {
+        if (this.closeUnits.includes(unit)) {
+            unit.hurt(1);
+        }
+    }
+    alive() {
+        return this.hitpoints > 0;
+    }
+    run(unit) {
+        this.closeUnits.push(unit);
+    }
+    hurt(damage) {
+        this.hitpoints -= damage;
+    }
+}
+export class Marine {
+    hitpoints = 2;
+    attack(unit) {
+        this.shoot(unit);
+    }
+    alive() {
+        return true;
+    }
+    shoot(unit) {
+        unit.hurt(1);
+    }
+    hurt(damage) {
+        this.hitpoints -= damage;
+    }
+}
+export class Zealot {
+    hitpoints = 2;
+    attack(unit) {
+        this.claw(unit);
+    }
+    alive() {
+        return true;
+    }
+    claw(unit) {
+        unit.hurt(2);
+    }
+    hurt(damage) {
+        this.hitpoints -= damage;
+    }
+    hitpointBar() {
+        if (this.hitpoints === 2) {
+            return "full";
+        }
+        return "not full";
+    }
+}
diff --git a/dist/src/folder_1/7_kata.js b/dist/src/folder_1/7_kata.js
new file mode 100644
index 0000000..e41229f
--- /dev/null
+++ b/dist/src/folder_1/7_kata.js
@@ -0,0 +1,7 @@
+export function* helloWorldGenerator() {
+    yield 'Hello';
+    yield 'World';
+}
+export default function HelloWorld() {
+    return Array.from(helloWorldGenerator()).join(' ');
+}
diff --git a/dist/src/folder_1/8_kata.js b/dist/src/folder_1/8_kata.js
new file mode 100644
index 0000000..a8fad85
--- /dev/null
+++ b/dist/src/folder_1/8_kata.js
@@ -0,0 +1,25 @@
+export const input = (commands) => {
+    let totalCost = +commands[0] * +commands[1];
+    const volumeDiscount = [
+        { volume: 50000, discount: 0.15 },
+        { volume: 10000, discount: 0.10 },
+        { volume: 7000, discount: 0.07 },
+        { volume: 5000, discount: 0.05 },
+        { volume: 1000, discount: 0.03 },
+    ];
+    volumeDiscount.some(({ volume, discount }, idx) => {
+        if (totalCost >= volume) {
+            totalCost = totalCost * (1 - discount);
+            return true;
+        }
+        return false;
+    });
+    const stateTaxes = {
+        UT: 6.85,
+        NV: 8.00,
+        TX: 6.25,
+        AL: 4.00,
+        CA: 8.25,
+    };
+    return totalCost * (1 + stateTaxes[commands[2]] / 100);
+};
diff --git a/dist/src/folder_1/9_kata.js b/dist/src/folder_1/9_kata.js
new file mode 100644
index 0000000..9bebb08
--- /dev/null
+++ b/dist/src/folder_1/9_kata.js
@@ -0,0 +1,54 @@
+export class Zergling {
+    hitpoints = 1;
+    closeUnits = [];
+    attack(unit) {
+        if (this.closeUnits.includes(unit)) {
+            unit.hurt(1);
+        }
+    }
+    alive() {
+        return this.hitpoints > 0;
+    }
+    run(unit) {
+        this.closeUnits.push(unit);
+    }
+    hurt(damage) {
+        this.hitpoints -= damage;
+    }
+}
+export class Marine {
+    hitpoints = 2;
+    attack(unit) {
+        this.shoot(unit);
+    }
+    alive() {
+        return true;
+    }
+    shoot(unit) {
+        unit.hurt(1);
+    }
+    hurt(damage) {
+        this.hitpoints -= damage;
+    }
+}
+export class Zealot {
+    hitpoints = 2;
+    attack(unit) {
+        this.claw(unit);
+    }
+    alive() {
+        return true;
+    }
+    claw(unit) {
+        unit.hurt(2);
+    }
+    hurt(damage) {
+        this.hitpoints -= damage;
+    }
+    hitpointBar() {
+        if (this.hitpoints === 2) {
+            return "full";
+        }
+        return "not full";
+    }
+}
diff --git a/dist/test/test_kata_1.spec.js b/dist/test/folder_1/test_kata_1.spec.js
similarity index 92%
rename from dist/test/test_kata_1.spec.js
rename to dist/test/folder_1/test_kata_1.spec.js
index 5a8e6f0..9f3a401 100644
--- a/dist/test/test_kata_1.spec.js
+++ b/dist/test/folder_1/test_kata_1.spec.js
@@ -1,5 +1,5 @@
 import assert from "node:assert";
-import HelloWorld, { helloWorldGenerator } from '../src/1_kata.js';
+import HelloWorld, { helloWorldGenerator } from '../../src/folder_1/1_kata.js';
 describe('hello world kata', function () {
     it('should return hello world', function () {
         assert.equal(HelloWorld(), "Hello World");
diff --git a/dist/test/folder_1/test_kata_10.spec.js b/dist/test/folder_1/test_kata_10.spec.js
new file mode 100644
index 0000000..fe9b2bf
--- /dev/null
+++ b/dist/test/folder_1/test_kata_10.spec.js
@@ -0,0 +1,26 @@
+import assert from "node:assert";
+import HelloWorld, { helloWorldGenerator } from '../../src/folder_1/10_kata.js';
+describe('hello world kata four', function () {
+    it('should return hello world', function () {
+        assert.equal(HelloWorld(), "Hello World");
+    });
+    it('should use a generator function that returns hello', () => {
+        let firstCall = helloWorldGenerator().next();
+        assert.equal(firstCall.value, 'Hello');
+        assert.equal(firstCall.done, false);
+    });
+    it('should use a generator function that returns world on second call', () => {
+        let sequence = helloWorldGenerator();
+        sequence.next();
+        let secondCall = sequence.next();
+        assert.equal(secondCall.value, 'World');
+        assert.equal(secondCall.done, false);
+    });
+    it('should use a generator function that returns done after three calls', () => {
+        let sequence = helloWorldGenerator();
+        const firstCall = sequence.next();
+        const secondCall = sequence.next();
+        const thirdCall = sequence.next();
+        assert.equal(thirdCall.done, true);
+    });
+});
diff --git a/dist/test/folder_1/test_kata_11.spec.js b/dist/test/folder_1/test_kata_11.spec.js
new file mode 100644
index 0000000..5fc04d7
--- /dev/null
+++ b/dist/test/folder_1/test_kata_11.spec.js
@@ -0,0 +1,44 @@
+import { assert } from 'chai';
+import { input } from "../../src/folder_1/11_kata.js";
+describe('kata two four', function () {
+    it('given 0 items can accept an input of how many items, cost per item, state code, and calculate total value', function () {
+        const commands = [
+            "0",
+            "5",
+            "NV"
+        ];
+        const totalCost = input(commands);
+        assert.equal(totalCost, 0);
+    });
+    [
+        { state: "NV", multiplier: 1.08 },
+        { state: "UT", multiplier: 1.0685 },
+        { state: "TX", multiplier: 1.0625 },
+        { state: "AL", multiplier: 1.0400 },
+        { state: "CA", multiplier: 1.0825 },
+    ].forEach(({ state, multiplier }) => it(`given 1 item and a ${state} state code can accept an input of how many items, cost per item, state code, ` +
+        'and calculate total value', function () {
+        const commands = [
+            "1",
+            "5",
+            state
+        ];
+        const totalCost = input(commands);
+        assert.equal(totalCost, 5 * multiplier);
+    }));
+    [
+        { amount: "1000", discount: 0.03 },
+        { amount: "5000", discount: 0.05 },
+        { amount: "7000", discount: 0.07 },
+        { amount: "10000", discount: 0.10 },
+        { amount: "50000", discount: 0.15 },
+    ].forEach(({ amount, discount }) => it(`given ${amount} of items can accept an input of how many items, cost per item, state code, and calculate total value`, function () {
+        const commands = [
+            "1",
+            amount,
+            "NV"
+        ];
+        const totalCost = input(commands);
+        assert.equal(totalCost, +amount * (1 - discount) * (1.08));
+    }));
+});
diff --git a/dist/test/folder_1/test_kata_12.spec.js b/dist/test/folder_1/test_kata_12.spec.js
new file mode 100644
index 0000000..780ff90
--- /dev/null
+++ b/dist/test/folder_1/test_kata_12.spec.js
@@ -0,0 +1,29 @@
+import { assert } from "chai";
+import { Zergling, Marine, Zealot } from '../../src/folder_1/12_kata.js';
+describe('can do battle four', () => {
+    it('the vile zerg zergling will battle the epic terran marine', () => {
+        const marine = new Marine();
+        const zergling = new Zergling();
+        zergling.run(marine);
+        marine.shoot(zergling);
+        zergling.attack(marine);
+        marine.shoot(zergling);
+        assert.equal(marine.alive(), true);
+        assert.equal(zergling.alive(), false);
+    });
+    it('the vile zerg zergling will battle the epic protos zealot', () => {
+        const zealot = new Zealot();
+        const zergling = new Zergling();
+        zergling.run(zealot);
+        zealot.claw(zergling);
+        zergling.attack(zealot);
+        zealot.claw(zergling);
+        assert.equal(zealot.alive(), true);
+    });
+    it('the vile zerg zergling cannot hit a unit it has not run at', () => {
+        const zealot = new Zealot();
+        const zergling = new Zergling();
+        zergling.attack(zealot);
+        assert.equal(zealot.hitpointBar(), "full");
+    });
+});
diff --git a/dist/test/folder_1/test_kata_13.spec.js b/dist/test/folder_1/test_kata_13.spec.js
new file mode 100644
index 0000000..752ac8d
--- /dev/null
+++ b/dist/test/folder_1/test_kata_13.spec.js
@@ -0,0 +1,26 @@
+import assert from "node:assert";
+import HelloWorld, { helloWorldGenerator } from '../../src/folder_1/13_kata.js';
+describe('hello world kata five', function () {
+    it('should return hello world', function () {
+        assert.equal(HelloWorld(), "Hello World");
+    });
+    it('should use a generator function that returns hello', () => {
+        let firstCall = helloWorldGenerator().next();
+        assert.equal(firstCall.value, 'Hello');
+        assert.equal(firstCall.done, false);
+    });
+    it('should use a generator function that returns world on second call', () => {
+        let sequence = helloWorldGenerator();
+        sequence.next();
+        let secondCall = sequence.next();
+        assert.equal(secondCall.value, 'World');
+        assert.equal(secondCall.done, false);
+    });
+    it('should use a generator function that returns done after three calls', () => {
+        let sequence = helloWorldGenerator();
+        const firstCall = sequence.next();
+        const secondCall = sequence.next();
+        const thirdCall = sequence.next();
+        assert.equal(thirdCall.done, true);
+    });
+});
diff --git a/dist/test/folder_1/test_kata_14.spec.js b/dist/test/folder_1/test_kata_14.spec.js
new file mode 100644
index 0000000..8bec4bc
--- /dev/null
+++ b/dist/test/folder_1/test_kata_14.spec.js
@@ -0,0 +1,44 @@
+import { assert } from 'chai';
+import { input } from "../../src/folder_1/14_kata.js";
+describe('kata two five', function () {
+    it('given 0 items can accept an input of how many items, cost per item, state code, and calculate total value', function () {
+        const commands = [
+            "0",
+            "5",
+            "NV"
+        ];
+        const totalCost = input(commands);
+        assert.equal(totalCost, 0);
+    });
+    [
+        { state: "NV", multiplier: 1.08 },
+        { state: "UT", multiplier: 1.0685 },
+        { state: "TX", multiplier: 1.0625 },
+        { state: "AL", multiplier: 1.0400 },
+        { state: "CA", multiplier: 1.0825 },
+    ].forEach(({ state, multiplier }) => it(`given 1 item and a ${state} state code can accept an input of how many items, cost per item, state code, ` +
+        'and calculate total value', function () {
+        const commands = [
+            "1",
+            "5",
+            state
+        ];
+        const totalCost = input(commands);
+        assert.equal(totalCost, 5 * multiplier);
+    }));
+    [
+        { amount: "1000", discount: 0.03 },
+        { amount: "5000", discount: 0.05 },
+        { amount: "7000", discount: 0.07 },
+        { amount: "10000", discount: 0.10 },
+        { amount: "50000", discount: 0.15 },
+    ].forEach(({ amount, discount }) => it(`given ${amount} of items can accept an input of how many items, cost per item, state code, and calculate total value`, function () {
+        const commands = [
+            "1",
+            amount,
+            "NV"
+        ];
+        const totalCost = input(commands);
+        assert.equal(totalCost, +amount * (1 - discount) * (1.08));
+    }));
+});
diff --git a/dist/test/folder_1/test_kata_15.spec.js b/dist/test/folder_1/test_kata_15.spec.js
new file mode 100644
index 0000000..bbeb6ad
--- /dev/null
+++ b/dist/test/folder_1/test_kata_15.spec.js
@@ -0,0 +1,29 @@
+import { assert } from "chai";
+import { Zergling, Marine, Zealot } from '../../src/folder_1/15_kata.js';
+describe('can do battle five', () => {
+    it('the vile zerg zergling will battle the epic terran marine', () => {
+        const marine = new Marine();
+        const zergling = new Zergling();
+        zergling.run(marine);
+        marine.shoot(zergling);
+        zergling.attack(marine);
+        marine.shoot(zergling);
+        assert.equal(marine.alive(), true);
+        assert.equal(zergling.alive(), false);
+    });
+    it('the vile zerg zergling will battle the epic protos zealot', () => {
+        const zealot = new Zealot();
+        const zergling = new Zergling();
+        zergling.run(zealot);
+        zealot.claw(zergling);
+        zergling.attack(zealot);
+        zealot.claw(zergling);
+        assert.equal(zealot.alive(), true);
+    });
+    it('the vile zerg zergling cannot hit a unit it has not run at', () => {
+        const zealot = new Zealot();
+        const zergling = new Zergling();
+        zergling.attack(zealot);
+        assert.equal(zealot.hitpointBar(), "full");
+    });
+});
diff --git a/dist/test/folder_1/test_kata_16.spec.js b/dist/test/folder_1/test_kata_16.spec.js
new file mode 100644
index 0000000..1c527e2
--- /dev/null
+++ b/dist/test/folder_1/test_kata_16.spec.js
@@ -0,0 +1,26 @@
+import assert from "node:assert";
+import HelloWorld, { helloWorldGenerator } from '../../src/folder_1/16_kata.js';
+describe('hello world kata six', function () {
+    it('should return hello world', function () {
+        assert.equal(HelloWorld(), "Hello World");
+    });
+    it('should use a generator function that returns hello', () => {
+        let firstCall = helloWorldGenerator().next();
+        assert.equal(firstCall.value, 'Hello');
+        assert.equal(firstCall.done, false);
+    });
+    it('should use a generator function that returns world on second call', () => {
+        let sequence = helloWorldGenerator();
+        sequence.next();
+        let secondCall = sequence.next();
+        assert.equal(secondCall.value, 'World');
+        assert.equal(secondCall.done, false);
+    });
+    it('should use a generator function that returns done after three calls', () => {
+        let sequence = helloWorldGenerator();
+        const firstCall = sequence.next();
+        const secondCall = sequence.next();
+        const thirdCall = sequence.next();
+        assert.equal(thirdCall.done, true);
+    });
+});
diff --git a/dist/test/folder_1/test_kata_17.spec.js b/dist/test/folder_1/test_kata_17.spec.js
new file mode 100644
index 0000000..19ec303
--- /dev/null
+++ b/dist/test/folder_1/test_kata_17.spec.js
@@ -0,0 +1,44 @@
+import { assert } from 'chai';
+import { input } from "../../src/folder_1/17_kata.js";
+describe('kata two six', function () {
+    it('given 0 items can accept an input of how many items, cost per item, state code, and calculate total value', function () {
+        const commands = [
+            "0",
+            "5",
+            "NV"
+        ];
+        const totalCost = input(commands);
+        assert.equal(totalCost, 0);
+    });
+    [
+        { state: "NV", multiplier: 1.08 },
+        { state: "UT", multiplier: 1.0685 },
+        { state: "TX", multiplier: 1.0625 },
+        { state: "AL", multiplier: 1.0400 },
+        { state: "CA", multiplier: 1.0825 },
+    ].forEach(({ state, multiplier }) => it(`given 1 item and a ${state} state code can accept an input of how many items, cost per item, state code, ` +
+        'and calculate total value', function () {
+        const commands = [
+            "1",
+            "5",
+            state
+        ];
+        const totalCost = input(commands);
+        assert.equal(totalCost, 5 * multiplier);
+    }));
+    [
+        { amount: "1000", discount: 0.03 },
+        { amount: "5000", discount: 0.05 },
+        { amount: "7000", discount: 0.07 },
+        { amount: "10000", discount: 0.10 },
+        { amount: "50000", discount: 0.15 },
+    ].forEach(({ amount, discount }) => it(`given ${amount} of items can accept an input of how many items, cost per item, state code, and calculate total value`, function () {
+        const commands = [
+            "1",
+            amount,
+            "NV"
+        ];
+        const totalCost = input(commands);
+        assert.equal(totalCost, +amount * (1 - discount) * (1.08));
+    }));
+});
diff --git a/dist/test/folder_1/test_kata_18.spec.js b/dist/test/folder_1/test_kata_18.spec.js
new file mode 100644
index 0000000..ffe2e84
--- /dev/null
+++ b/dist/test/folder_1/test_kata_18.spec.js
@@ -0,0 +1,29 @@
+import { assert } from "chai";
+import { Zergling, Marine, Zealot } from '../../src/folder_1/18_kata.js';
+describe('can do battle six', () => {
+    it('the vile zerg zergling will battle the epic terran marine', () => {
+        const marine = new Marine();
+        const zergling = new Zergling();
+        zergling.run(marine);
+        marine.shoot(zergling);
+        zergling.attack(marine);
+        marine.shoot(zergling);
+        assert.equal(marine.alive(), true);
+        assert.equal(zergling.alive(), false);
+    });
+    it('the vile zerg zergling will battle the epic protos zealot', () => {
+        const zealot = new Zealot();
+        const zergling = new Zergling();
+        zergling.run(zealot);
+        zealot.claw(zergling);
+        zergling.attack(zealot);
+        zealot.claw(zergling);
+        assert.equal(zealot.alive(), true);
+    });
+    it('the vile zerg zergling cannot hit a unit it has not run at', () => {
+        const zealot = new Zealot();
+        const zergling = new Zergling();
+        zergling.attack(zealot);
+        assert.equal(zealot.hitpointBar(), "full");
+    });
+});
diff --git a/dist/test/test_kata_2.spec.js b/dist/test/folder_1/test_kata_2.spec.js
similarity index 96%
rename from dist/test/test_kata_2.spec.js
rename to dist/test/folder_1/test_kata_2.spec.js
index de18767..32813b6 100644
--- a/dist/test/test_kata_2.spec.js
+++ b/dist/test/folder_1/test_kata_2.spec.js
@@ -1,5 +1,5 @@
 import { assert } from 'chai';
-import { input } from "../src/2_kata.js";
+import { input } from "../../src/folder_1/2_kata.js";
 describe('kata two', function () {
     it('given 0 items can accept an input of how many items, cost per item, state code, and calculate total value', function () {
         const commands = [
diff --git a/dist/test/test_kata_3.spec.js b/dist/test/folder_1/test_kata_3.spec.js
similarity index 93%
rename from dist/test/test_kata_3.spec.js
rename to dist/test/folder_1/test_kata_3.spec.js
index 2347363..b2ebe43 100644
--- a/dist/test/test_kata_3.spec.js
+++ b/dist/test/folder_1/test_kata_3.spec.js
@@ -1,5 +1,5 @@
 import { assert } from "chai";
-import { Zergling, Marine, Zealot } from '../src/3_kata.js';
+import { Zergling, Marine, Zealot } from '../../src/folder_1/3_kata.js';
 describe('can do battle', () => {
     it('the vile zerg zergling will battle the epic terran marine', () => {
         const marine = new Marine();
diff --git a/dist/test/folder_1/test_kata_4.spec.js b/dist/test/folder_1/test_kata_4.spec.js
new file mode 100644
index 0000000..08a71be
--- /dev/null
+++ b/dist/test/folder_1/test_kata_4.spec.js
@@ -0,0 +1,26 @@
+import assert from "node:assert";
+import HelloWorld, { helloWorldGenerator } from '../../src/folder_1/4_kata.js';
+describe('hello world kata two', function () {
+    it('should return hello world', function () {
+        assert.equal(HelloWorld(), "Hello World");
+    });
+    it('should use a generator function that returns hello', () => {
+        let firstCall = helloWorldGenerator().next();
+        assert.equal(firstCall.value, 'Hello');
+        assert.equal(firstCall.done, false);
+    });
+    it('should use a generator function that returns world on second call', () => {
+        let sequence = helloWorldGenerator();
+        sequence.next();
+        let secondCall = sequence.next();
+        assert.equal(secondCall.value, 'World');
+        assert.equal(secondCall.done, false);
+    });
+    it('should use a generator function that returns done after three calls', () => {
+        let sequence = helloWorldGenerator();
+        const firstCall = sequence.next();
+        const secondCall = sequence.next();
+        const thirdCall = sequence.next();
+        assert.equal(thirdCall.done, true);
+    });
+});
diff --git a/dist/test/folder_1/test_kata_5.spec.js b/dist/test/folder_1/test_kata_5.spec.js
new file mode 100644
index 0000000..8ae5d86
--- /dev/null
+++ b/dist/test/folder_1/test_kata_5.spec.js
@@ -0,0 +1,44 @@
+import { assert } from 'chai';
+import { input } from "../../src/folder_1/5_kata.js";
+describe('kata two two', function () {
+    it('given 0 items can accept an input of how many items, cost per item, state code, and calculate total value', function () {
+        const commands = [
+            "0",
+            "5",
+            "NV"
+        ];
+        const totalCost = input(commands);
+        assert.equal(totalCost, 0);
+    });
+    [
+        { state: "NV", multiplier: 1.08 },
+        { state: "UT", multiplier: 1.0685 },
+        { state: "TX", multiplier: 1.0625 },
+        { state: "AL", multiplier: 1.0400 },
+        { state: "CA", multiplier: 1.0825 },
+    ].forEach(({ state, multiplier }) => it(`given 1 item and a ${state} state code can accept an input of how many items, cost per item, state code, ` +
+        'and calculate total value', function () {
+        const commands = [
+            "1",
+            "5",
+            state
+        ];
+        const totalCost = input(commands);
+        assert.equal(totalCost, 5 * multiplier);
+    }));
+    [
+        { amount: "1000", discount: 0.03 },
+        { amount: "5000", discount: 0.05 },
+        { amount: "7000", discount: 0.07 },
+        { amount: "10000", discount: 0.10 },
+        { amount: "50000", discount: 0.15 },
+    ].forEach(({ amount, discount }) => it(`given ${amount} of items can accept an input of how many items, cost per item, state code, and calculate total value`, function () {
+        const commands = [
+            "1",
+            amount,
+            "NV"
+        ];
+        const totalCost = input(commands);
+        assert.equal(totalCost, +amount * (1 - discount) * (1.08));
+    }));
+});
diff --git a/dist/test/folder_1/test_kata_6.spec.js b/dist/test/folder_1/test_kata_6.spec.js
new file mode 100644
index 0000000..dc08664
--- /dev/null
+++ b/dist/test/folder_1/test_kata_6.spec.js
@@ -0,0 +1,29 @@
+import { assert } from "chai";
+import { Zergling, Marine, Zealot } from '../../src/folder_1/6_kata.js';
+describe('can do battle two', () => {
+    it('the vile zerg zergling will battle the epic terran marine', () => {
+        const marine = new Marine();
+        const zergling = new Zergling();
+        zergling.run(marine);
+        marine.shoot(zergling);
+        zergling.attack(marine);
+        marine.shoot(zergling);
+        assert.equal(marine.alive(), true);
+        assert.equal(zergling.alive(), false);
+    });
+    it('the vile zerg zergling will battle the epic protos zealot', () => {
+        const zealot = new Zealot();
+        const zergling = new Zergling();
+        zergling.run(zealot);
+        zealot.claw(zergling);
+        zergling.attack(zealot);
+        zealot.claw(zergling);
+        assert.equal(zealot.alive(), true);
+    });
+    it('the vile zerg zergling cannot hit a unit it has not run at', () => {
+        const zealot = new Zealot();
+        const zergling = new Zergling();
+        zergling.attack(zealot);
+        assert.equal(zealot.hitpointBar(), "full");
+    });
+});
diff --git a/dist/test/folder_1/test_kata_7.spec.js b/dist/test/folder_1/test_kata_7.spec.js
new file mode 100644
index 0000000..b97bb1c
--- /dev/null
+++ b/dist/test/folder_1/test_kata_7.spec.js
@@ -0,0 +1,26 @@
+import assert from "node:assert";
+import HelloWorld, { helloWorldGenerator } from '../../src/folder_1/7_kata.js';
+describe('hello world kata three', function () {
+    it('should return hello world', function () {
+        assert.equal(HelloWorld(), "Hello World");
+    });
+    it('should use a generator function that returns hello', () => {
+        let firstCall = helloWorldGenerator().next();
+        assert.equal(firstCall.value, 'Hello');
+        assert.equal(firstCall.done, false);
+    });
+    it('should use a generator function that returns world on second call', () => {
+        let sequence = helloWorldGenerator();
+        sequence.next();
+        let secondCall = sequence.next();
+        assert.equal(secondCall.value, 'World');
+        assert.equal(secondCall.done, false);
+    });
+    it('should use a generator function that returns done after three calls', () => {
+        let sequence = helloWorldGenerator();
+        const firstCall = sequence.next();
+        const secondCall = sequence.next();
+        const thirdCall = sequence.next();
+        assert.equal(thirdCall.done, true);
+    });
+});
diff --git a/dist/test/folder_1/test_kata_8.spec.js b/dist/test/folder_1/test_kata_8.spec.js
new file mode 100644
index 0000000..49e653e
--- /dev/null
+++ b/dist/test/folder_1/test_kata_8.spec.js
@@ -0,0 +1,44 @@
+import { assert } from 'chai';
+import { input } from "../../src/folder_1/8_kata.js";
+describe('kata two three', function () {
+    it('given 0 items can accept an input of how many items, cost per item, state code, and calculate total value', function () {
+        const commands = [
+            "0",
+            "5",
+            "NV"
+        ];
+        const totalCost = input(commands);
+        assert.equal(totalCost, 0);
+    });
+    [
+        { state: "NV", multiplier: 1.08 },
+        { state: "UT", multiplier: 1.0685 },
+        { state: "TX", multiplier: 1.0625 },
+        { state: "AL", multiplier: 1.0400 },
+        { state: "CA", multiplier: 1.0825 },
+    ].forEach(({ state, multiplier }) => it(`given 1 item and a ${state} state code can accept an input of how many items, cost per item, state code, ` +
+        'and calculate total value', function () {
+        const commands = [
+            "1",
+            "5",
+            state
+        ];
+        const totalCost = input(commands);
+        assert.equal(totalCost, 5 * multiplier);
+    }));
+    [
+        { amount: "1000", discount: 0.03 },
+        { amount: "5000", discount: 0.05 },
+        { amount: "7000", discount: 0.07 },
+        { amount: "10000", discount: 0.10 },
+        { amount: "50000", discount: 0.15 },
+    ].forEach(({ amount, discount }) => it(`given ${amount} of items can accept an input of how many items, cost per item, state code, and calculate total value`, function () {
+        const commands = [
+            "1",
+            amount,
+            "NV"
+        ];
+        const totalCost = input(commands);
+        assert.equal(totalCost, +amount * (1 - discount) * (1.08));
+    }));
+});
diff --git a/dist/test/folder_1/test_kata_9.spec.js b/dist/test/folder_1/test_kata_9.spec.js
new file mode 100644
index 0000000..b08611d
--- /dev/null
+++ b/dist/test/folder_1/test_kata_9.spec.js
@@ -0,0 +1,29 @@
+import { assert } from "chai";
+import { Zergling, Marine, Zealot } from '../../src/folder_1/9_kata.js';
+describe('can do battle three', () => {
+    it('the vile zerg zergling will battle the epic terran marine', () => {
+        const marine = new Marine();
+        const zergling = new Zergling();
+        zergling.run(marine);
+        marine.shoot(zergling);
+        zergling.attack(marine);
+        marine.shoot(zergling);
+        assert.equal(marine.alive(), true);
+        assert.equal(zergling.alive(), false);
+    });
+    it('the vile zerg zergling will battle the epic protos zealot', () => {
+        const zealot = new Zealot();
+        const zergling = new Zergling();
+        zergling.run(zealot);
+        zealot.claw(zergling);
+        zergling.attack(zealot);
+        zealot.claw(zergling);
+        assert.equal(zealot.alive(), true);
+    });
+    it('the vile zerg zergling cannot hit a unit it has not run at', () => {
+        const zealot = new Zealot();
+        const zergling = new Zergling();
+        zergling.attack(zealot);
+        assert.equal(zealot.hitpointBar(), "full");
+    });
+});
diff --git a/dist/test/new-tests.js b/dist/test/new-tests.js
index bb66340..cb0ff5c 100644
--- a/dist/test/new-tests.js
+++ b/dist/test/new-tests.js
@@ -1,46 +1 @@
-import { assert } from "chai";
-import { Zergling, Marine, Zealot } from '../src/3_kata.js';
-describe('additional mutation coverage', () => {
-    it('should not allow Zergling to attack a unit not in closeUnits', () => {
-        const marine = new Marine();
-        const zergling = new Zergling();
-        zergling.attack(marine);
-        assert.equal(marine.hitpoints, 2);
-    });
-    it('should reduce Zergling hitpoints to zero or below and confirm not alive', () => {
-        const zergling = new Zergling();
-        zergling.hurt(1);
-        assert.equal(zergling.alive(), false);
-        zergling.hurt(1);
-        assert.equal(zergling.hitpoints, -1);
-    });
-    it('should allow Marine to attack and reduce hitpoints of any IUnit', () => {
-        const marine = new Marine();
-        const zergling = new Zergling();
-        marine.attack(zergling);
-        assert.equal(zergling.hitpoints, 0);
-    });
-    it('should allow Zealot to attack and reduce hitpoints of any IUnit', () => {
-        const zealot = new Zealot();
-        const marine = new Marine();
-        zealot.attack(marine);
-        assert.equal(marine.hitpoints, 0);
-    });
-    it('should confirm Zealot hitpointBar returns "not full" after taking damage', () => {
-        const zealot = new Zealot();
-        zealot.hurt(1);
-        assert.equal(zealot.hitpointBar(), "not full");
-    });
-    it('should not allow negative damage to increase hitpoints', () => {
-        const marine = new Marine();
-        marine.hurt(-5);
-        assert.notEqual(marine.hitpoints, 7); // Should not increase
-    });
-    it("should not allow duplicate units in Zergling's closeUnits", () => {
-        const marine = new Marine();
-        const zergling = new Zergling();
-        zergling.run(marine);
-        zergling.run(marine);
-        assert.equal(zergling.closeUnits.filter(u => u === marine).length, 2); // This currently fails, should be 1
-    });
-});
+export {};
diff --git a/instructions.md b/instructions.md
deleted file mode 100644
index 4362a55..0000000
--- a/instructions.md
+++ /dev/null
@@ -1,15 +0,0 @@
-﻿---
-mode: 'agent'
-tools: ['runCommands']
-description: 'Suggest new test names based on mutation testing results.'
----
-
-# Suggest new test names based on mutation testing results
-
-- run the mutation tests by running `npm run test:new-names`
-- read the production code in the `src` directory that the mutation tests are based on
-- based on the mutation testing results, production code, and existing tests, what bugs are currently in the code?
-- paste the results in the `test/bugs.md` file
-- suggest new test names based on the mutation testing results
-- provide code for the new tests
-- paste the new test names in the `test/new-tests.ts` file with describe and it blocks, but do not include the code
diff --git a/mutations/test_0.json b/mutations/test_0.json
new file mode 100644
index 0000000..729318c
--- /dev/null
+++ b/mutations/test_0.json
@@ -0,0 +1,135 @@
+[
+  {
+    "id": "186",
+    "mutatorName": "BlockStatement",
+    "replacement": "{}",
+    "statusReason": "'' == 'Hello World'",
+    "status": "Killed",
+    "static": false,
+    "testsCompleted": 1,
+    "killedBy": [
+      "0"
+    ],
+    "coveredBy": [
+      "0",
+      "1",
+      "2",
+      "3"
+    ],
+    "location": {
+      "end": {
+        "column": 2,
+        "line": 4
+      },
+      "start": {
+        "column": 40,
+        "line": 1
+      }
+    }
+  },
+  {
+    "id": "187",
+    "mutatorName": "StringLiteral",
+    "replacement": "\"\"",
+    "statusReason": "' World' == 'Hello World'",
+    "status": "Killed",
+    "static": false,
+    "testsCompleted": 1,
+    "killedBy": [
+      "0"
+    ],
+    "coveredBy": [
+      "0",
+      "1",
+      "2",
+      "3"
+    ],
+    "location": {
+      "end": {
+        "column": 18,
+        "line": 2
+      },
+      "start": {
+        "column": 11,
+        "line": 2
+      }
+    }
+  },
+  {
+    "id": "189",
+    "mutatorName": "BlockStatement",
+    "replacement": "{}",
+    "statusReason": "undefined == 'Hello World'",
+    "status": "Killed",
+    "static": false,
+    "testsCompleted": 1,
+    "killedBy": [
+      "0"
+    ],
+    "coveredBy": [
+      "0"
+    ],
+    "location": {
+      "end": {
+        "column": 2,
+        "line": 8
+      },
+      "start": {
+        "column": 38,
+        "line": 6
+      }
+    }
+  },
+  {
+    "id": "188",
+    "mutatorName": "StringLiteral",
+    "replacement": "\"\"",
+    "statusReason": "'Hello ' == 'Hello World'",
+    "status": "Killed",
+    "static": false,
+    "testsCompleted": 1,
+    "killedBy": [
+      "0"
+    ],
+    "coveredBy": [
+      "0",
+      "2",
+      "3"
+    ],
+    "location": {
+      "end": {
+        "column": 18,
+        "line": 3
+      },
+      "start": {
+        "column": 11,
+        "line": 3
+      }
+    }
+  },
+  {
+    "id": "190",
+    "mutatorName": "StringLiteral",
+    "replacement": "\"\"",
+    "statusReason": "'HelloWorld' == 'Hello World'",
+    "status": "Killed",
+    "static": false,
+    "testsCompleted": 1,
+    "killedBy": [
+      "0"
+    ],
+    "coveredBy": [
+      "0"
+    ],
+    "location": {
+      "end": {
+        "column": 54,
+        "line": 7
+      },
+      "start": {
+        "column": 51,
+        "line": 7
+      }
+    }
+  }
+]
\ No newline at end of file
diff --git a/mutations/test_1.json b/mutations/test_1.json
new file mode 100644
index 0000000..673c5e4
--- /dev/null
+++ b/mutations/test_1.json
@@ -0,0 +1,58 @@
+[
+  {
+    "id": "186",
+    "mutatorName": "BlockStatement",
+    "replacement": "{}",
+    "statusReason": "'' == 'Hello World'",
+    "status": "Killed",
+    "static": false,
+    "testsCompleted": 1,
+    "killedBy": [
+      "0"
+    ],
+    "coveredBy": [
+      "0",
+      "1",
+      "2",
+      "3"
+    ],
+    "location": {
+      "end": {
+        "column": 2,
+        "line": 4
+      },
+      "start": {
+        "column": 40,
+        "line": 1
+      }
+    }
+  },
+  {
+    "id": "187",
+    "mutatorName": "StringLiteral",
+    "replacement": "\"\"",
+    "statusReason": "' World' == 'Hello World'",
+    "status": "Killed",
+    "static": false,
+    "testsCompleted": 1,
+    "killedBy": [
+      "0"
+    ],
+    "coveredBy": [
+      "0",
+      "1",
+      "2",
+      "3"
+    ],
+    "location": {
+      "end": {
+        "column": 18,
+        "line": 2
+      },
+      "start": {
+        "column": 11,
+        "line": 2
+      }
+    }
+  }
+]
\ No newline at end of file
diff --git a/mutations/test_10.json b/mutations/test_10.json
new file mode 100644
index 0000000..0b2b4c6
--- /dev/null
+++ b/mutations/test_10.json
@@ -0,0 +1 @@
+[{"id":"5","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["8"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"6","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"7","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"8","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"9","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"10","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["18"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"11","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["17"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"12","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["16"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"13","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["15"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"14","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"15","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"16","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"17","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"18","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"19","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"20","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"26","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["8"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"25","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"27","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"29","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}},{"id":"28","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}}]
\ No newline at end of file
diff --git a/mutations/test_100.json b/mutations/test_100.json
new file mode 100644
index 0000000..a82b1b2
--- /dev/null
+++ b/mutations/test_100.json
@@ -0,0 +1 @@
+[{"id":"315","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["94"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"317","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"316","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"318","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"319","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"320","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["104"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"321","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["103"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"322","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["102"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"323","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["101"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"324","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"326","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"325","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"327","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"329","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"328","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"330","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"331","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["100"],"coveredBy":["100","101","102","103","104"],"location":{"end":{"column":10,"line":16},"start":{"column":34,"line":13}}},{"id":"332","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 - discount)","statusReason":"expected 1113.4020618556704 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["100"],"coveredBy":["100","101","102","103","104"],"location":{"end":{"column":51,"line":14},"start":{"column":25,"line":14}}},{"id":"333","mutatorName":"ArithmeticOperator","replacement":"1 + discount","statusReason":"expected 1112.4 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["100"],"coveredBy":["100","101","102","103","104"],"location":{"end":{"column":50,"line":14},"start":{"column":38,"line":14}}},{"id":"334","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected 4976.1 to equal 5130","status":"Killed","static":false,"testsCompleted":2,"killedBy":["101"],"coveredBy":["100","101","102","103","104"],"location":{"end":{"column":24,"line":15},"start":{"column":20,"line":15}}},{"id":"336","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["94"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"335","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"337","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"338","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"339","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}]
\ No newline at end of file
diff --git a/mutations/test_101.json b/mutations/test_101.json
new file mode 100644
index 0000000..a82b1b2
--- /dev/null
+++ b/mutations/test_101.json
@@ -0,0 +1 @@
+[{"id":"315","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["94"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"317","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"316","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"318","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"319","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"320","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["104"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"321","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["103"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"322","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["102"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"323","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["101"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"324","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"326","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"325","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"327","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"329","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"328","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"330","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"331","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["100"],"coveredBy":["100","101","102","103","104"],"location":{"end":{"column":10,"line":16},"start":{"column":34,"line":13}}},{"id":"332","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 - discount)","statusReason":"expected 1113.4020618556704 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["100"],"coveredBy":["100","101","102","103","104"],"location":{"end":{"column":51,"line":14},"start":{"column":25,"line":14}}},{"id":"333","mutatorName":"ArithmeticOperator","replacement":"1 + discount","statusReason":"expected 1112.4 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["100"],"coveredBy":["100","101","102","103","104"],"location":{"end":{"column":50,"line":14},"start":{"column":38,"line":14}}},{"id":"334","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected 4976.1 to equal 5130","status":"Killed","static":false,"testsCompleted":2,"killedBy":["101"],"coveredBy":["100","101","102","103","104"],"location":{"end":{"column":24,"line":15},"start":{"column":20,"line":15}}},{"id":"336","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["94"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"335","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"337","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"338","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"339","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}]
\ No newline at end of file
diff --git a/mutations/test_102.json b/mutations/test_102.json
new file mode 100644
index 0000000..a82b1b2
--- /dev/null
+++ b/mutations/test_102.json
@@ -0,0 +1 @@
+[{"id":"315","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["94"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"317","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"316","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"318","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"319","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"320","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["104"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"321","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["103"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"322","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["102"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"323","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["101"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"324","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"326","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"325","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"327","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"329","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"328","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"330","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"331","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["100"],"coveredBy":["100","101","102","103","104"],"location":{"end":{"column":10,"line":16},"start":{"column":34,"line":13}}},{"id":"332","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 - discount)","statusReason":"expected 1113.4020618556704 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["100"],"coveredBy":["100","101","102","103","104"],"location":{"end":{"column":51,"line":14},"start":{"column":25,"line":14}}},{"id":"333","mutatorName":"ArithmeticOperator","replacement":"1 + discount","statusReason":"expected 1112.4 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["100"],"coveredBy":["100","101","102","103","104"],"location":{"end":{"column":50,"line":14},"start":{"column":38,"line":14}}},{"id":"334","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected 4976.1 to equal 5130","status":"Killed","static":false,"testsCompleted":2,"killedBy":["101"],"coveredBy":["100","101","102","103","104"],"location":{"end":{"column":24,"line":15},"start":{"column":20,"line":15}}},{"id":"336","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["94"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"335","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"337","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"338","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"339","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}]
\ No newline at end of file
diff --git a/mutations/test_103.json b/mutations/test_103.json
new file mode 100644
index 0000000..a82b1b2
--- /dev/null
+++ b/mutations/test_103.json
@@ -0,0 +1 @@
+[{"id":"315","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["94"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"317","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"316","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"318","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"319","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"320","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["104"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"321","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["103"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"322","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["102"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"323","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["101"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"324","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"326","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"325","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"327","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"329","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"328","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"330","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"331","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["100"],"coveredBy":["100","101","102","103","104"],"location":{"end":{"column":10,"line":16},"start":{"column":34,"line":13}}},{"id":"332","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 - discount)","statusReason":"expected 1113.4020618556704 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["100"],"coveredBy":["100","101","102","103","104"],"location":{"end":{"column":51,"line":14},"start":{"column":25,"line":14}}},{"id":"333","mutatorName":"ArithmeticOperator","replacement":"1 + discount","statusReason":"expected 1112.4 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["100"],"coveredBy":["100","101","102","103","104"],"location":{"end":{"column":50,"line":14},"start":{"column":38,"line":14}}},{"id":"334","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected 4976.1 to equal 5130","status":"Killed","static":false,"testsCompleted":2,"killedBy":["101"],"coveredBy":["100","101","102","103","104"],"location":{"end":{"column":24,"line":15},"start":{"column":20,"line":15}}},{"id":"336","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["94"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"335","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"337","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"338","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"339","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}]
\ No newline at end of file
diff --git a/mutations/test_104.json b/mutations/test_104.json
new file mode 100644
index 0000000..68d7b00
--- /dev/null
+++ b/mutations/test_104.json
@@ -0,0 +1 @@
+[{"id":"315","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["94"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"317","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"316","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"318","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"319","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"320","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["104"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"321","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["103"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"322","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["102"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"323","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["101"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"324","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"326","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"325","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"327","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"329","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"328","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"330","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"331","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["100"],"coveredBy":["100","101","102","103","104"],"location":{"end":{"column":10,"line":16},"start":{"column":34,"line":13}}},{"id":"332","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 - discount)","statusReason":"expected 1113.4020618556704 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["100"],"coveredBy":["100","101","102","103","104"],"location":{"end":{"column":51,"line":14},"start":{"column":25,"line":14}}},{"id":"333","mutatorName":"ArithmeticOperator","replacement":"1 + discount","statusReason":"expected 1112.4 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["100"],"coveredBy":["100","101","102","103","104"],"location":{"end":{"column":50,"line":14},"start":{"column":38,"line":14}}},{"id":"334","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected 4976.1 to equal 5130","status":"Killed","static":false,"testsCompleted":2,"killedBy":["101"],"coveredBy":["100","101","102","103","104"],"location":{"end":{"column":24,"line":15},"start":{"column":20,"line":15}}},{"id":"336","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["94"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"337","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"338","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"339","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}]
\ No newline at end of file
diff --git a/mutations/test_105.json b/mutations/test_105.json
new file mode 100644
index 0000000..1c5b815
--- /dev/null
+++ b/mutations/test_105.json
@@ -0,0 +1 @@
+[{"id":"340","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["105","106","107"],"location":{"end":{"column":29,"line":8},"start":{"column":27,"line":8}}},{"id":"341","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["105","106","107"],"location":{"end":{"column":6,"line":13},"start":{"column":31,"line":9}}},{"id":"342","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":3,"killedBy":["107"],"coveredBy":["105","106","107"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"344","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["105","106"],"location":{"end":{"column":10,"line":12},"start":{"column":45,"line":10}}},{"id":"343","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["105","106","107"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"345","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["105"],"coveredBy":["105"],"location":{"end":{"column":6,"line":17},"start":{"column":22,"line":15}}},{"id":"346","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["105"],"coveredBy":["105"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"347","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["105"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"348","mutatorName":"EqualityOperator","replacement":"this.hitpoints >= 0","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["105"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"349","mutatorName":"EqualityOperator","replacement":"this.hitpoints <= 0","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["105"],"coveredBy":["105"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"350","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["105","106"],"location":{"end":{"column":6,"line":21},"start":{"column":28,"line":19}}},{"id":"352","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["105"],"coveredBy":["105","106"],"location":{"end":{"column":33,"line":24},"start":{"column":9,"line":24}}},{"id":"351","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["105"],"coveredBy":["105","106"],"location":{"end":{"column":6,"line":25},"start":{"column":32,"line":23}}},{"id":"354","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["105"],"coveredBy":["105"],"location":{"end":{"column":6,"line":35},"start":{"column":22,"line":33}}},{"id":"355","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected false to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["105"],"coveredBy":["105"],"location":{"end":{"column":20,"line":34},"start":{"column":16,"line":34}}},{"id":"356","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["105"],"coveredBy":["105"],"location":{"end":{"column":6,"line":39},"start":{"column":30,"line":37}}},{"id":"357","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["105"],"location":{"end":{"column":6,"line":42},"start":{"column":32,"line":40}}},{"id":"358","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["105"],"location":{"end":{"column":33,"line":41},"start":{"column":9,"line":41}}}]
\ No newline at end of file
diff --git a/mutations/test_106.json b/mutations/test_106.json
new file mode 100644
index 0000000..a4d0923
--- /dev/null
+++ b/mutations/test_106.json
@@ -0,0 +1 @@
+[{"id":"340","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["105","106","107"],"location":{"end":{"column":29,"line":8},"start":{"column":27,"line":8}}},{"id":"341","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["105","106","107"],"location":{"end":{"column":6,"line":13},"start":{"column":31,"line":9}}},{"id":"342","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":3,"killedBy":["107"],"coveredBy":["105","106","107"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"344","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["105","106"],"location":{"end":{"column":10,"line":12},"start":{"column":45,"line":10}}},{"id":"343","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["105","106","107"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"350","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["105","106"],"location":{"end":{"column":6,"line":21},"start":{"column":28,"line":19}}},{"id":"352","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["105"],"coveredBy":["105","106"],"location":{"end":{"column":33,"line":24},"start":{"column":9,"line":24}}},{"id":"351","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["105"],"coveredBy":["105","106"],"location":{"end":{"column":6,"line":25},"start":{"column":32,"line":23}}},{"id":"360","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["106"],"coveredBy":["106"],"location":{"end":{"column":6,"line":52},"start":{"column":22,"line":50}}},{"id":"361","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected false to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["106"],"coveredBy":["106"],"location":{"end":{"column":20,"line":51},"start":{"column":16,"line":51}}},{"id":"362","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["106"],"location":{"end":{"column":6,"line":56},"start":{"column":29,"line":54}}},{"id":"364","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["106"],"location":{"end":{"column":33,"line":59},"start":{"column":9,"line":59}}},{"id":"363","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["106"],"location":{"end":{"column":6,"line":60},"start":{"column":32,"line":58}}}]
\ No newline at end of file
diff --git a/mutations/test_107.json b/mutations/test_107.json
new file mode 100644
index 0000000..d9b1696
--- /dev/null
+++ b/mutations/test_107.json
@@ -0,0 +1,244 @@
+[
+  {
+    "id": "340",
+    "mutatorName": "ArrayDeclaration",
+    "replacement": "[\"Stryker was here\"]",
+    "status": "Survived",
+    "static": false,
+    "testsCompleted": 3,
+    "coveredBy": [
+      "105",
+      "106",
+      "107"
+    ],
+    "location": {
+      "end": {
+        "column": 29,
+        "line": 8
+      },
+      "start": {
+        "column": 27,
+        "line": 8
+      }
+    }
+  },
+  {
+    "id": "341",
+    "mutatorName": "BlockStatement",
+    "replacement": "{}",
+    "status": "Survived",
+    "static": false,
+    "testsCompleted": 3,
+    "coveredBy": [
+      "105",
+      "106",
+      "107"
+    ],
+    "location": {
+      "end": {
+        "column": 6,
+        "line": 13
+      },
+      "start": {
+        "column": 31,
+        "line": 9
+      }
+    }
+  },
+  {
+    "id": "342",
+    "mutatorName": "ConditionalExpression",
+    "replacement": "true",
+    "statusReason": "expected 'not full' to equal 'full'",
+    "status": "Killed",
+    "static": false,
+    "testsCompleted": 3,
+    "killedBy": [
+      "107"
+    ],
+    "coveredBy": [
+      "105",
+      "106",
+      "107"
+    ],
+    "location": {
+      "end": {
+        "column": 43,
+        "line": 10
+      },
+      "start": {
+        "column": 13,
+        "line": 10
+      }
+    }
+  },
+  {
+    "id": "343",
+    "mutatorName": "ConditionalExpression",
+    "replacement": "false",
+    "status": "Survived",
+    "static": false,
+    "testsCompleted": 3,
+    "coveredBy": [
+      "105",
+      "106",
+      "107"
+    ],
+    "location": {
+      "end": {
+        "column": 43,
+        "line": 10
+      },
+      "start": {
+        "column": 13,
+        "line": 10
+      }
+    }
+  },
+  {
+    "id": "366",
+    "mutatorName": "ConditionalExpression",
+    "replacement": "true",
+    "status": "Survived",
+    "static": false,
+    "testsCompleted": 1,
+    "coveredBy": [
+      "107"
+    ],
+    "location": {
+      "end": {
+        "column": 33,
+        "line": 63
+      },
+      "start": {
+        "column": 13,
+        "line": 63
+      }
+    }
+  },
+  {
+    "id": "365",
+    "mutatorName": "BlockStatement",
+    "replacement": "{}",
+    "statusReason": "expected undefined to equal 'full'",
+    "status": "Killed",
+    "static": false,
+    "testsCompleted": 1,
+    "killedBy": [
+      "107"
+    ],
+    "coveredBy": [
+      "107"
+    ],
+    "location": {
+      "end": {
+        "column": 6,
+        "line": 67
+      },
+      "start": {
+        "column": 27,
+        "line": 62
+      }
+    }
+  },
+  {
+    "id": "368",
+    "mutatorName": "EqualityOperator",
+    "replacement": "this.hitpoints !== 2",
+    "statusReason": "expected 'not full' to equal 'full'",
+    "status": "Killed",
+    "static": false,
+    "testsCompleted": 1,
+    "killedBy": [
+      "107"
+    ],
+    "coveredBy": [
+      "107"
+    ],
+    "location": {
+      "end": {
+        "column": 33,
+        "line": 63
+      },
+      "start": {
+        "column": 13,
+        "line": 63
+      }
+    }
+  },
+  {
+    "id": "367",
+    "mutatorName": "ConditionalExpression",
+    "replacement": "false",
+    "statusReason": "expected 'not full' to equal 'full'",
+    "status": "Killed",
+    "static": false,
+    "testsCompleted": 1,
+    "killedBy": [
+      "107"
+    ],
+    "coveredBy": [
+      "107"
+    ],
+    "location": {
+      "end": {
+        "column": 33,
+        "line": 63
+      },
+      "start": {
+        "column": 13,
+        "line": 63
+      }
+    }
+  },
+  {
+    "id": "369",
+    "mutatorName": "BlockStatement",
+    "replacement": "{}",
+    "statusReason": "expected 'not full' to equal 'full'",
+    "status": "Killed",
+    "static": false,
+    "testsCompleted": 1,
+    "killedBy": [
+      "107"
+    ],
+    "coveredBy": [
+      "107"
+    ],
+    "location": {
+      "end": {
+        "column": 10,
+        "line": 65
+      },
+      "start": {
+        "column": 35,
+        "line": 63
+      }
+    }
+  },
+  {
+    "id": "370",
+    "mutatorName": "StringLiteral",
+    "replacement": "\"\"",
+    "statusReason": "expected '' to equal 'full'",
+    "status": "Killed",
+    "static": false,
+    "testsCompleted": 1,
+    "killedBy": [
+      "107"
+    ],
+    "coveredBy": [
+      "107"
+    ],
+    "location": {
+      "end": {
+        "column": 26,
+        "line": 64
+      },
+      "start": {
+        "column": 20,
+        "line": 64
+      }
+    }
+  }
+]
\ No newline at end of file
diff --git a/mutations/test_11.json b/mutations/test_11.json
new file mode 100644
index 0000000..0b2b4c6
--- /dev/null
+++ b/mutations/test_11.json
@@ -0,0 +1 @@
+[{"id":"5","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["8"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"6","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"7","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"8","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"9","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"10","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["18"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"11","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["17"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"12","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["16"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"13","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["15"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"14","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"15","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"16","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"17","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"18","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"19","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"20","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"26","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["8"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"25","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"27","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"29","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}},{"id":"28","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}}]
\ No newline at end of file
diff --git a/mutations/test_12.json b/mutations/test_12.json
new file mode 100644
index 0000000..0b2b4c6
--- /dev/null
+++ b/mutations/test_12.json
@@ -0,0 +1 @@
+[{"id":"5","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["8"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"6","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"7","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"8","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"9","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"10","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["18"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"11","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["17"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"12","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["16"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"13","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["15"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"14","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"15","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"16","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"17","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"18","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"19","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"20","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"26","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["8"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"25","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"27","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"29","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}},{"id":"28","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}}]
\ No newline at end of file
diff --git a/mutations/test_13.json b/mutations/test_13.json
new file mode 100644
index 0000000..0b2b4c6
--- /dev/null
+++ b/mutations/test_13.json
@@ -0,0 +1 @@
+[{"id":"5","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["8"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"6","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"7","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"8","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"9","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"10","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["18"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"11","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["17"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"12","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["16"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"13","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["15"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"14","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"15","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"16","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"17","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"18","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"19","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"20","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"26","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["8"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"25","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"27","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"29","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}},{"id":"28","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}}]
\ No newline at end of file
diff --git a/mutations/test_14.json b/mutations/test_14.json
new file mode 100644
index 0000000..0843ab2
--- /dev/null
+++ b/mutations/test_14.json
@@ -0,0 +1 @@
+[{"id":"5","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["8"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"6","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"7","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"8","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"9","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"10","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["18"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"11","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["17"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"12","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["16"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"13","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["15"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"14","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"15","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"16","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"17","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"18","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"19","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"20","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"21","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["14"],"coveredBy":["14","15","16","17","18"],"location":{"end":{"column":10,"line":16},"start":{"column":34,"line":13}}},{"id":"23","mutatorName":"ArithmeticOperator","replacement":"1 + discount","statusReason":"expected 1112.4 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["14"],"coveredBy":["14","15","16","17","18"],"location":{"end":{"column":50,"line":14},"start":{"column":38,"line":14}}},{"id":"22","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 - discount)","statusReason":"expected 1113.4020618556704 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["14"],"coveredBy":["14","15","16","17","18"],"location":{"end":{"column":51,"line":14},"start":{"column":25,"line":14}}},{"id":"24","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected 4976.1 to equal 5130","status":"Killed","static":false,"testsCompleted":2,"killedBy":["15"],"coveredBy":["14","15","16","17","18"],"location":{"end":{"column":24,"line":15},"start":{"column":20,"line":15}}},{"id":"26","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["8"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"25","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"27","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"29","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}},{"id":"28","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}}]
\ No newline at end of file
diff --git a/mutations/test_15.json b/mutations/test_15.json
new file mode 100644
index 0000000..0843ab2
--- /dev/null
+++ b/mutations/test_15.json
@@ -0,0 +1 @@
+[{"id":"5","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["8"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"6","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"7","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"8","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"9","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"10","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["18"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"11","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["17"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"12","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["16"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"13","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["15"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"14","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"15","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"16","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"17","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"18","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"19","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"20","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"21","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["14"],"coveredBy":["14","15","16","17","18"],"location":{"end":{"column":10,"line":16},"start":{"column":34,"line":13}}},{"id":"23","mutatorName":"ArithmeticOperator","replacement":"1 + discount","statusReason":"expected 1112.4 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["14"],"coveredBy":["14","15","16","17","18"],"location":{"end":{"column":50,"line":14},"start":{"column":38,"line":14}}},{"id":"22","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 - discount)","statusReason":"expected 1113.4020618556704 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["14"],"coveredBy":["14","15","16","17","18"],"location":{"end":{"column":51,"line":14},"start":{"column":25,"line":14}}},{"id":"24","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected 4976.1 to equal 5130","status":"Killed","static":false,"testsCompleted":2,"killedBy":["15"],"coveredBy":["14","15","16","17","18"],"location":{"end":{"column":24,"line":15},"start":{"column":20,"line":15}}},{"id":"26","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["8"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"25","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"27","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"29","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}},{"id":"28","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}}]
\ No newline at end of file
diff --git a/mutations/test_16.json b/mutations/test_16.json
new file mode 100644
index 0000000..0843ab2
--- /dev/null
+++ b/mutations/test_16.json
@@ -0,0 +1 @@
+[{"id":"5","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["8"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"6","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"7","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"8","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"9","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"10","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["18"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"11","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["17"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"12","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["16"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"13","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["15"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"14","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"15","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"16","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"17","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"18","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"19","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"20","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"21","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["14"],"coveredBy":["14","15","16","17","18"],"location":{"end":{"column":10,"line":16},"start":{"column":34,"line":13}}},{"id":"23","mutatorName":"ArithmeticOperator","replacement":"1 + discount","statusReason":"expected 1112.4 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["14"],"coveredBy":["14","15","16","17","18"],"location":{"end":{"column":50,"line":14},"start":{"column":38,"line":14}}},{"id":"22","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 - discount)","statusReason":"expected 1113.4020618556704 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["14"],"coveredBy":["14","15","16","17","18"],"location":{"end":{"column":51,"line":14},"start":{"column":25,"line":14}}},{"id":"24","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected 4976.1 to equal 5130","status":"Killed","static":false,"testsCompleted":2,"killedBy":["15"],"coveredBy":["14","15","16","17","18"],"location":{"end":{"column":24,"line":15},"start":{"column":20,"line":15}}},{"id":"26","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["8"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"25","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"27","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"29","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}},{"id":"28","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}}]
\ No newline at end of file
diff --git a/mutations/test_17.json b/mutations/test_17.json
new file mode 100644
index 0000000..0843ab2
--- /dev/null
+++ b/mutations/test_17.json
@@ -0,0 +1 @@
+[{"id":"5","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["8"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"6","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"7","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"8","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"9","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"10","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["18"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"11","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["17"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"12","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["16"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"13","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["15"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"14","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"15","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"16","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"17","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"18","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"19","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"20","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"21","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["14"],"coveredBy":["14","15","16","17","18"],"location":{"end":{"column":10,"line":16},"start":{"column":34,"line":13}}},{"id":"23","mutatorName":"ArithmeticOperator","replacement":"1 + discount","statusReason":"expected 1112.4 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["14"],"coveredBy":["14","15","16","17","18"],"location":{"end":{"column":50,"line":14},"start":{"column":38,"line":14}}},{"id":"22","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 - discount)","statusReason":"expected 1113.4020618556704 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["14"],"coveredBy":["14","15","16","17","18"],"location":{"end":{"column":51,"line":14},"start":{"column":25,"line":14}}},{"id":"24","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected 4976.1 to equal 5130","status":"Killed","static":false,"testsCompleted":2,"killedBy":["15"],"coveredBy":["14","15","16","17","18"],"location":{"end":{"column":24,"line":15},"start":{"column":20,"line":15}}},{"id":"26","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["8"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"25","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"27","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"29","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}},{"id":"28","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}}]
\ No newline at end of file
diff --git a/mutations/test_18.json b/mutations/test_18.json
new file mode 100644
index 0000000..cbb75d1
--- /dev/null
+++ b/mutations/test_18.json
@@ -0,0 +1 @@
+[{"id":"5","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["8"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"6","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"7","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"8","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"9","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"10","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["18"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"11","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["17"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"12","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["16"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"13","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["15"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"14","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"15","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"16","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"17","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"18","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"19","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"20","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"21","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["14"],"coveredBy":["14","15","16","17","18"],"location":{"end":{"column":10,"line":16},"start":{"column":34,"line":13}}},{"id":"23","mutatorName":"ArithmeticOperator","replacement":"1 + discount","statusReason":"expected 1112.4 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["14"],"coveredBy":["14","15","16","17","18"],"location":{"end":{"column":50,"line":14},"start":{"column":38,"line":14}}},{"id":"22","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 - discount)","statusReason":"expected 1113.4020618556704 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["14"],"coveredBy":["14","15","16","17","18"],"location":{"end":{"column":51,"line":14},"start":{"column":25,"line":14}}},{"id":"24","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected 4976.1 to equal 5130","status":"Killed","static":false,"testsCompleted":2,"killedBy":["15"],"coveredBy":["14","15","16","17","18"],"location":{"end":{"column":24,"line":15},"start":{"column":20,"line":15}}},{"id":"26","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["8"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"27","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"29","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}},{"id":"28","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}}]
\ No newline at end of file
diff --git a/mutations/test_19.json b/mutations/test_19.json
new file mode 100644
index 0000000..eca6414
--- /dev/null
+++ b/mutations/test_19.json
@@ -0,0 +1 @@
+[{"id":"30","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["19","20","21"],"location":{"end":{"column":29,"line":8},"start":{"column":27,"line":8}}},{"id":"31","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["19","20","21"],"location":{"end":{"column":6,"line":13},"start":{"column":31,"line":9}}},{"id":"32","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":3,"killedBy":["21"],"coveredBy":["19","20","21"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"33","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["19","20","21"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"34","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["19","20"],"location":{"end":{"column":10,"line":12},"start":{"column":45,"line":10}}},{"id":"36","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["19"],"coveredBy":["19"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"35","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["19"],"coveredBy":["19"],"location":{"end":{"column":6,"line":17},"start":{"column":22,"line":15}}},{"id":"38","mutatorName":"EqualityOperator","replacement":"this.hitpoints >= 0","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["19"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"37","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["19"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"40","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["19","20"],"location":{"end":{"column":6,"line":21},"start":{"column":28,"line":19}}},{"id":"39","mutatorName":"EqualityOperator","replacement":"this.hitpoints <= 0","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["19"],"coveredBy":["19"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"41","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["19"],"coveredBy":["19","20"],"location":{"end":{"column":6,"line":25},"start":{"column":32,"line":23}}},{"id":"44","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["19"],"coveredBy":["19"],"location":{"end":{"column":6,"line":35},"start":{"column":22,"line":33}}},{"id":"42","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["19"],"coveredBy":["19","20"],"location":{"end":{"column":33,"line":24},"start":{"column":9,"line":24}}},{"id":"45","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected false to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["19"],"coveredBy":["19"],"location":{"end":{"column":20,"line":34},"start":{"column":16,"line":34}}},{"id":"46","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["19"],"coveredBy":["19"],"location":{"end":{"column":6,"line":39},"start":{"column":30,"line":37}}},{"id":"47","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["19"],"location":{"end":{"column":6,"line":42},"start":{"column":32,"line":40}}},{"id":"48","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["19"],"location":{"end":{"column":33,"line":41},"start":{"column":9,"line":41}}}]
\ No newline at end of file
diff --git a/mutations/test_2.json b/mutations/test_2.json
new file mode 100644
index 0000000..0d7806f
--- /dev/null
+++ b/mutations/test_2.json
@@ -0,0 +1 @@
+[{"id":"186","mutatorName":"BlockStatement","replacement":"{}","statusReason":"'' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0","1","2","3"],"location":{"end":{"column":2,"line":4},"start":{"column":40,"line":1}}},{"id":"187","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"' World' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0","1","2","3"],"location":{"end":{"column":18,"line":2},"start":{"column":11,"line":2}}},{"id":"188","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"'Hello ' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0","2","3"],"location":{"end":{"column":18,"line":3},"start":{"column":11,"line":3}}}]
\ No newline at end of file
diff --git a/mutations/test_20.json b/mutations/test_20.json
new file mode 100644
index 0000000..fc8938b
--- /dev/null
+++ b/mutations/test_20.json
@@ -0,0 +1 @@
+[{"id":"30","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["19","20","21"],"location":{"end":{"column":29,"line":8},"start":{"column":27,"line":8}}},{"id":"31","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["19","20","21"],"location":{"end":{"column":6,"line":13},"start":{"column":31,"line":9}}},{"id":"32","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":3,"killedBy":["21"],"coveredBy":["19","20","21"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"33","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["19","20","21"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"34","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["19","20"],"location":{"end":{"column":10,"line":12},"start":{"column":45,"line":10}}},{"id":"40","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["19","20"],"location":{"end":{"column":6,"line":21},"start":{"column":28,"line":19}}},{"id":"41","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["19"],"coveredBy":["19","20"],"location":{"end":{"column":6,"line":25},"start":{"column":32,"line":23}}},{"id":"42","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["19"],"coveredBy":["19","20"],"location":{"end":{"column":33,"line":24},"start":{"column":9,"line":24}}},{"id":"50","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["20"],"coveredBy":["20"],"location":{"end":{"column":6,"line":52},"start":{"column":22,"line":50}}},{"id":"51","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected false to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["20"],"coveredBy":["20"],"location":{"end":{"column":20,"line":51},"start":{"column":16,"line":51}}},{"id":"52","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["20"],"location":{"end":{"column":6,"line":56},"start":{"column":29,"line":54}}},{"id":"53","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["20"],"location":{"end":{"column":6,"line":60},"start":{"column":32,"line":58}}},{"id":"54","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["20"],"location":{"end":{"column":33,"line":59},"start":{"column":9,"line":59}}}]
\ No newline at end of file
diff --git a/mutations/test_21.json b/mutations/test_21.json
new file mode 100644
index 0000000..eab9e19
--- /dev/null
+++ b/mutations/test_21.json
@@ -0,0 +1 @@
+[{"id":"30","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["19","20","21"],"location":{"end":{"column":29,"line":8},"start":{"column":27,"line":8}}},{"id":"31","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["19","20","21"],"location":{"end":{"column":6,"line":13},"start":{"column":31,"line":9}}},{"id":"32","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":3,"killedBy":["21"],"coveredBy":["19","20","21"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"33","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["19","20","21"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"56","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["21"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"55","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["21"],"coveredBy":["21"],"location":{"end":{"column":6,"line":67},"start":{"column":27,"line":62}}},{"id":"57","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["21"],"coveredBy":["21"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"58","mutatorName":"EqualityOperator","replacement":"this.hitpoints !== 2","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["21"],"coveredBy":["21"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"59","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["21"],"coveredBy":["21"],"location":{"end":{"column":10,"line":65},"start":{"column":35,"line":63}}},{"id":"60","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected '' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["21"],"coveredBy":["21"],"location":{"end":{"column":26,"line":64},"start":{"column":20,"line":64}}}]
\ No newline at end of file
diff --git a/mutations/test_22.json b/mutations/test_22.json
new file mode 100644
index 0000000..7865acf
--- /dev/null
+++ b/mutations/test_22.json
@@ -0,0 +1 @@
+[{"id":"62","mutatorName":"BlockStatement","replacement":"{}","statusReason":"'' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["22"],"coveredBy":["22","23","24","25"],"location":{"end":{"column":2,"line":4},"start":{"column":40,"line":1}}},{"id":"63","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"' World' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["22"],"coveredBy":["22","23","24","25"],"location":{"end":{"column":18,"line":2},"start":{"column":11,"line":2}}},{"id":"64","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"'Hello ' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["22"],"coveredBy":["22","24","25"],"location":{"end":{"column":18,"line":3},"start":{"column":11,"line":3}}},{"id":"65","mutatorName":"BlockStatement","replacement":"{}","statusReason":"undefined == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["22"],"coveredBy":["22"],"location":{"end":{"column":2,"line":8},"start":{"column":38,"line":6}}},{"id":"66","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"'HelloWorld' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["22"],"coveredBy":["22"],"location":{"end":{"column":54,"line":7},"start":{"column":51,"line":7}}}]
\ No newline at end of file
diff --git a/mutations/test_23.json b/mutations/test_23.json
new file mode 100644
index 0000000..705e741
--- /dev/null
+++ b/mutations/test_23.json
@@ -0,0 +1 @@
+[{"id":"62","mutatorName":"BlockStatement","replacement":"{}","statusReason":"'' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["22"],"coveredBy":["22","23","24","25"],"location":{"end":{"column":2,"line":4},"start":{"column":40,"line":1}}},{"id":"63","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"' World' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["22"],"coveredBy":["22","23","24","25"],"location":{"end":{"column":18,"line":2},"start":{"column":11,"line":2}}}]
\ No newline at end of file
diff --git a/mutations/test_24.json b/mutations/test_24.json
new file mode 100644
index 0000000..aa03733
--- /dev/null
+++ b/mutations/test_24.json
@@ -0,0 +1 @@
+[{"id":"62","mutatorName":"BlockStatement","replacement":"{}","statusReason":"'' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["22"],"coveredBy":["22","23","24","25"],"location":{"end":{"column":2,"line":4},"start":{"column":40,"line":1}}},{"id":"63","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"' World' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["22"],"coveredBy":["22","23","24","25"],"location":{"end":{"column":18,"line":2},"start":{"column":11,"line":2}}},{"id":"64","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"'Hello ' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["22"],"coveredBy":["22","24","25"],"location":{"end":{"column":18,"line":3},"start":{"column":11,"line":3}}}]
\ No newline at end of file
diff --git a/mutations/test_25.json b/mutations/test_25.json
new file mode 100644
index 0000000..aa03733
--- /dev/null
+++ b/mutations/test_25.json
@@ -0,0 +1 @@
+[{"id":"62","mutatorName":"BlockStatement","replacement":"{}","statusReason":"'' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["22"],"coveredBy":["22","23","24","25"],"location":{"end":{"column":2,"line":4},"start":{"column":40,"line":1}}},{"id":"63","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"' World' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["22"],"coveredBy":["22","23","24","25"],"location":{"end":{"column":18,"line":2},"start":{"column":11,"line":2}}},{"id":"64","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"'Hello ' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["22"],"coveredBy":["22","24","25"],"location":{"end":{"column":18,"line":3},"start":{"column":11,"line":3}}}]
\ No newline at end of file
diff --git a/mutations/test_26.json b/mutations/test_26.json
new file mode 100644
index 0000000..484e3fa
--- /dev/null
+++ b/mutations/test_26.json
@@ -0,0 +1 @@
+[{"id":"67","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["26"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"68","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"69","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"70","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"71","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"72","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["36"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"73","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["35"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"74","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["34"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"75","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["33"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"76","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"77","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"79","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"78","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"81","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"80","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"82","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"87","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"88","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["26"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"89","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"90","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"91","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}]
\ No newline at end of file
diff --git a/mutations/test_27.json b/mutations/test_27.json
new file mode 100644
index 0000000..484e3fa
--- /dev/null
+++ b/mutations/test_27.json
@@ -0,0 +1 @@
+[{"id":"67","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["26"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"68","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"69","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"70","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"71","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"72","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["36"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"73","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["35"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"74","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["34"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"75","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["33"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"76","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"77","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"79","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"78","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"81","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"80","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"82","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"87","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"88","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["26"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"89","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"90","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"91","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}]
\ No newline at end of file
diff --git a/mutations/test_28.json b/mutations/test_28.json
new file mode 100644
index 0000000..484e3fa
--- /dev/null
+++ b/mutations/test_28.json
@@ -0,0 +1 @@
+[{"id":"67","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["26"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"68","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"69","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"70","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"71","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"72","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["36"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"73","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["35"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"74","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["34"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"75","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["33"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"76","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"77","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"79","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"78","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"81","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"80","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"82","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"87","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"88","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["26"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"89","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"90","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"91","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}]
\ No newline at end of file
diff --git a/mutations/test_29.json b/mutations/test_29.json
new file mode 100644
index 0000000..484e3fa
--- /dev/null
+++ b/mutations/test_29.json
@@ -0,0 +1 @@
+[{"id":"67","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["26"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"68","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"69","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"70","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"71","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"72","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["36"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"73","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["35"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"74","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["34"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"75","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["33"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"76","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"77","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"79","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"78","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"81","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"80","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"82","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"87","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"88","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["26"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"89","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"90","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"91","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}]
\ No newline at end of file
diff --git a/mutations/test_3.json b/mutations/test_3.json
new file mode 100644
index 0000000..0d7806f
--- /dev/null
+++ b/mutations/test_3.json
@@ -0,0 +1 @@
+[{"id":"186","mutatorName":"BlockStatement","replacement":"{}","statusReason":"'' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0","1","2","3"],"location":{"end":{"column":2,"line":4},"start":{"column":40,"line":1}}},{"id":"187","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"' World' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0","1","2","3"],"location":{"end":{"column":18,"line":2},"start":{"column":11,"line":2}}},{"id":"188","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"'Hello ' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0","2","3"],"location":{"end":{"column":18,"line":3},"start":{"column":11,"line":3}}}]
\ No newline at end of file
diff --git a/mutations/test_30.json b/mutations/test_30.json
new file mode 100644
index 0000000..484e3fa
--- /dev/null
+++ b/mutations/test_30.json
@@ -0,0 +1 @@
+[{"id":"67","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["26"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"68","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"69","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"70","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"71","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"72","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["36"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"73","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["35"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"74","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["34"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"75","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["33"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"76","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"77","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"79","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"78","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"81","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"80","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"82","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"87","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"88","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["26"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"89","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"90","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"91","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}]
\ No newline at end of file
diff --git a/mutations/test_31.json b/mutations/test_31.json
new file mode 100644
index 0000000..484e3fa
--- /dev/null
+++ b/mutations/test_31.json
@@ -0,0 +1 @@
+[{"id":"67","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["26"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"68","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"69","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"70","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"71","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"72","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["36"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"73","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["35"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"74","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["34"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"75","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["33"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"76","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"77","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"79","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"78","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"81","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"80","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"82","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"87","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"88","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["26"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"89","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"90","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"91","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}]
\ No newline at end of file
diff --git a/mutations/test_32.json b/mutations/test_32.json
new file mode 100644
index 0000000..bf90405
--- /dev/null
+++ b/mutations/test_32.json
@@ -0,0 +1 @@
+[{"id":"67","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["26"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"68","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"69","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"70","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"71","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"72","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["36"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"73","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["35"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"74","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["34"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"75","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["33"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"76","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"77","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"79","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"78","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"81","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"80","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"82","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"83","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["32"],"coveredBy":["32","33","34","35","36"],"location":{"end":{"column":10,"line":16},"start":{"column":34,"line":13}}},{"id":"84","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 - discount)","statusReason":"expected 1113.4020618556704 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["32"],"coveredBy":["32","33","34","35","36"],"location":{"end":{"column":51,"line":14},"start":{"column":25,"line":14}}},{"id":"85","mutatorName":"ArithmeticOperator","replacement":"1 + discount","statusReason":"expected 1112.4 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["32"],"coveredBy":["32","33","34","35","36"],"location":{"end":{"column":50,"line":14},"start":{"column":38,"line":14}}},{"id":"86","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected 4976.1 to equal 5130","status":"Killed","static":false,"testsCompleted":2,"killedBy":["33"],"coveredBy":["32","33","34","35","36"],"location":{"end":{"column":24,"line":15},"start":{"column":20,"line":15}}},{"id":"87","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"88","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["26"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"89","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"90","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"91","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}]
\ No newline at end of file
diff --git a/mutations/test_33.json b/mutations/test_33.json
new file mode 100644
index 0000000..bf90405
--- /dev/null
+++ b/mutations/test_33.json
@@ -0,0 +1 @@
+[{"id":"67","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["26"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"68","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"69","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"70","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"71","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"72","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["36"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"73","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["35"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"74","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["34"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"75","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["33"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"76","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"77","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"79","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"78","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"81","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"80","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"82","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"83","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["32"],"coveredBy":["32","33","34","35","36"],"location":{"end":{"column":10,"line":16},"start":{"column":34,"line":13}}},{"id":"84","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 - discount)","statusReason":"expected 1113.4020618556704 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["32"],"coveredBy":["32","33","34","35","36"],"location":{"end":{"column":51,"line":14},"start":{"column":25,"line":14}}},{"id":"85","mutatorName":"ArithmeticOperator","replacement":"1 + discount","statusReason":"expected 1112.4 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["32"],"coveredBy":["32","33","34","35","36"],"location":{"end":{"column":50,"line":14},"start":{"column":38,"line":14}}},{"id":"86","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected 4976.1 to equal 5130","status":"Killed","static":false,"testsCompleted":2,"killedBy":["33"],"coveredBy":["32","33","34","35","36"],"location":{"end":{"column":24,"line":15},"start":{"column":20,"line":15}}},{"id":"87","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"88","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["26"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"89","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"90","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"91","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}]
\ No newline at end of file
diff --git a/mutations/test_34.json b/mutations/test_34.json
new file mode 100644
index 0000000..bf90405
--- /dev/null
+++ b/mutations/test_34.json
@@ -0,0 +1 @@
+[{"id":"67","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["26"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"68","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"69","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"70","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"71","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"72","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["36"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"73","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["35"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"74","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["34"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"75","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["33"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"76","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"77","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"79","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"78","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"81","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"80","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"82","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"83","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["32"],"coveredBy":["32","33","34","35","36"],"location":{"end":{"column":10,"line":16},"start":{"column":34,"line":13}}},{"id":"84","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 - discount)","statusReason":"expected 1113.4020618556704 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["32"],"coveredBy":["32","33","34","35","36"],"location":{"end":{"column":51,"line":14},"start":{"column":25,"line":14}}},{"id":"85","mutatorName":"ArithmeticOperator","replacement":"1 + discount","statusReason":"expected 1112.4 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["32"],"coveredBy":["32","33","34","35","36"],"location":{"end":{"column":50,"line":14},"start":{"column":38,"line":14}}},{"id":"86","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected 4976.1 to equal 5130","status":"Killed","static":false,"testsCompleted":2,"killedBy":["33"],"coveredBy":["32","33","34","35","36"],"location":{"end":{"column":24,"line":15},"start":{"column":20,"line":15}}},{"id":"87","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"88","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["26"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"89","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"90","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"91","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}]
\ No newline at end of file
diff --git a/mutations/test_35.json b/mutations/test_35.json
new file mode 100644
index 0000000..bf90405
--- /dev/null
+++ b/mutations/test_35.json
@@ -0,0 +1 @@
+[{"id":"67","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["26"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"68","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"69","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"70","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"71","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"72","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["36"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"73","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["35"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"74","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["34"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"75","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["33"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"76","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"77","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"79","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"78","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"81","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"80","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"82","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"83","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["32"],"coveredBy":["32","33","34","35","36"],"location":{"end":{"column":10,"line":16},"start":{"column":34,"line":13}}},{"id":"84","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 - discount)","statusReason":"expected 1113.4020618556704 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["32"],"coveredBy":["32","33","34","35","36"],"location":{"end":{"column":51,"line":14},"start":{"column":25,"line":14}}},{"id":"85","mutatorName":"ArithmeticOperator","replacement":"1 + discount","statusReason":"expected 1112.4 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["32"],"coveredBy":["32","33","34","35","36"],"location":{"end":{"column":50,"line":14},"start":{"column":38,"line":14}}},{"id":"86","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected 4976.1 to equal 5130","status":"Killed","static":false,"testsCompleted":2,"killedBy":["33"],"coveredBy":["32","33","34","35","36"],"location":{"end":{"column":24,"line":15},"start":{"column":20,"line":15}}},{"id":"87","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"88","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["26"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"89","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"90","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"91","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}]
\ No newline at end of file
diff --git a/mutations/test_36.json b/mutations/test_36.json
new file mode 100644
index 0000000..a3bf962
--- /dev/null
+++ b/mutations/test_36.json
@@ -0,0 +1 @@
+[{"id":"67","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["26"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"68","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"69","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"70","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"71","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"72","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["36"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"73","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["35"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"74","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["34"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"75","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["33"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"76","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"77","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"79","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"78","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"81","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"80","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"82","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"83","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["32"],"coveredBy":["32","33","34","35","36"],"location":{"end":{"column":10,"line":16},"start":{"column":34,"line":13}}},{"id":"84","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 - discount)","statusReason":"expected 1113.4020618556704 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["32"],"coveredBy":["32","33","34","35","36"],"location":{"end":{"column":51,"line":14},"start":{"column":25,"line":14}}},{"id":"85","mutatorName":"ArithmeticOperator","replacement":"1 + discount","statusReason":"expected 1112.4 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["32"],"coveredBy":["32","33","34","35","36"],"location":{"end":{"column":50,"line":14},"start":{"column":38,"line":14}}},{"id":"86","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected 4976.1 to equal 5130","status":"Killed","static":false,"testsCompleted":2,"killedBy":["33"],"coveredBy":["32","33","34","35","36"],"location":{"end":{"column":24,"line":15},"start":{"column":20,"line":15}}},{"id":"88","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["26"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"89","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"90","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"91","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}]
\ No newline at end of file
diff --git a/mutations/test_37.json b/mutations/test_37.json
new file mode 100644
index 0000000..6ebfa3b
--- /dev/null
+++ b/mutations/test_37.json
@@ -0,0 +1 @@
+[{"id":"92","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["37","38","39"],"location":{"end":{"column":29,"line":8},"start":{"column":27,"line":8}}},{"id":"93","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["37","38","39"],"location":{"end":{"column":6,"line":13},"start":{"column":31,"line":9}}},{"id":"94","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":3,"killedBy":["39"],"coveredBy":["37","38","39"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"95","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["37","38","39"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"96","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["37","38"],"location":{"end":{"column":10,"line":12},"start":{"column":45,"line":10}}},{"id":"97","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["37"],"coveredBy":["37"],"location":{"end":{"column":6,"line":17},"start":{"column":22,"line":15}}},{"id":"98","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["37"],"coveredBy":["37"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"99","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["37"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"100","mutatorName":"EqualityOperator","replacement":"this.hitpoints >= 0","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["37"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"101","mutatorName":"EqualityOperator","replacement":"this.hitpoints <= 0","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["37"],"coveredBy":["37"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"102","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["37","38"],"location":{"end":{"column":6,"line":21},"start":{"column":28,"line":19}}},{"id":"103","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["37"],"coveredBy":["37","38"],"location":{"end":{"column":6,"line":25},"start":{"column":32,"line":23}}},{"id":"104","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["37"],"coveredBy":["37","38"],"location":{"end":{"column":33,"line":24},"start":{"column":9,"line":24}}},{"id":"106","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["37"],"coveredBy":["37"],"location":{"end":{"column":6,"line":35},"start":{"column":22,"line":33}}},{"id":"107","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected false to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["37"],"coveredBy":["37"],"location":{"end":{"column":20,"line":34},"start":{"column":16,"line":34}}},{"id":"108","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["37"],"coveredBy":["37"],"location":{"end":{"column":6,"line":39},"start":{"column":30,"line":37}}},{"id":"109","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["37"],"location":{"end":{"column":6,"line":42},"start":{"column":32,"line":40}}},{"id":"110","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["37"],"location":{"end":{"column":33,"line":41},"start":{"column":9,"line":41}}}]
\ No newline at end of file
diff --git a/mutations/test_38.json b/mutations/test_38.json
new file mode 100644
index 0000000..99a70cf
--- /dev/null
+++ b/mutations/test_38.json
@@ -0,0 +1 @@
+[{"id":"92","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["37","38","39"],"location":{"end":{"column":29,"line":8},"start":{"column":27,"line":8}}},{"id":"93","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["37","38","39"],"location":{"end":{"column":6,"line":13},"start":{"column":31,"line":9}}},{"id":"94","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":3,"killedBy":["39"],"coveredBy":["37","38","39"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"95","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["37","38","39"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"96","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["37","38"],"location":{"end":{"column":10,"line":12},"start":{"column":45,"line":10}}},{"id":"102","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["37","38"],"location":{"end":{"column":6,"line":21},"start":{"column":28,"line":19}}},{"id":"103","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["37"],"coveredBy":["37","38"],"location":{"end":{"column":6,"line":25},"start":{"column":32,"line":23}}},{"id":"104","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["37"],"coveredBy":["37","38"],"location":{"end":{"column":33,"line":24},"start":{"column":9,"line":24}}},{"id":"112","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["38"],"coveredBy":["38"],"location":{"end":{"column":6,"line":52},"start":{"column":22,"line":50}}},{"id":"114","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["38"],"location":{"end":{"column":6,"line":56},"start":{"column":29,"line":54}}},{"id":"113","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected false to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["38"],"coveredBy":["38"],"location":{"end":{"column":20,"line":51},"start":{"column":16,"line":51}}},{"id":"115","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["38"],"location":{"end":{"column":6,"line":60},"start":{"column":32,"line":58}}},{"id":"116","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["38"],"location":{"end":{"column":33,"line":59},"start":{"column":9,"line":59}}}]
\ No newline at end of file
diff --git a/mutations/test_39.json b/mutations/test_39.json
new file mode 100644
index 0000000..6cf44ac
--- /dev/null
+++ b/mutations/test_39.json
@@ -0,0 +1 @@
+[{"id":"92","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["37","38","39"],"location":{"end":{"column":29,"line":8},"start":{"column":27,"line":8}}},{"id":"93","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["37","38","39"],"location":{"end":{"column":6,"line":13},"start":{"column":31,"line":9}}},{"id":"94","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":3,"killedBy":["39"],"coveredBy":["37","38","39"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"95","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["37","38","39"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"118","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["39"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"117","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["39"],"coveredBy":["39"],"location":{"end":{"column":6,"line":67},"start":{"column":27,"line":62}}},{"id":"120","mutatorName":"EqualityOperator","replacement":"this.hitpoints !== 2","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["39"],"coveredBy":["39"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"119","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["39"],"coveredBy":["39"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"121","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["39"],"coveredBy":["39"],"location":{"end":{"column":10,"line":65},"start":{"column":35,"line":63}}},{"id":"122","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected '' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["39"],"coveredBy":["39"],"location":{"end":{"column":26,"line":64},"start":{"column":20,"line":64}}}]
\ No newline at end of file
diff --git a/mutations/test_4.json b/mutations/test_4.json
new file mode 100644
index 0000000..c0af4ba
--- /dev/null
+++ b/mutations/test_4.json
@@ -0,0 +1 @@
+[{"id":"1","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"' World' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["4"],"coveredBy":["4","5","6","7"],"location":{"end":{"column":18,"line":2},"start":{"column":11,"line":2}}},{"id":"2","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"'Hello ' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["4"],"coveredBy":["4","6","7"],"location":{"end":{"column":18,"line":3},"start":{"column":11,"line":3}}},{"id":"3","mutatorName":"BlockStatement","replacement":"{}","statusReason":"undefined == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["4"],"coveredBy":["4"],"location":{"end":{"column":2,"line":8},"start":{"column":38,"line":6}}},{"id":"4","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"'HelloWorld' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["4"],"coveredBy":["4"],"location":{"end":{"column":54,"line":7},"start":{"column":51,"line":7}}},{"id":"0","mutatorName":"BlockStatement","replacement":"{}","statusReason":"'' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["4"],"coveredBy":["4","5","6","7"],"location":{"end":{"column":2,"line":4},"start":{"column":40,"line":1}}}]
\ No newline at end of file
diff --git a/mutations/test_40.json b/mutations/test_40.json
new file mode 100644
index 0000000..94fe874
--- /dev/null
+++ b/mutations/test_40.json
@@ -0,0 +1 @@
+[{"id":"124","mutatorName":"BlockStatement","replacement":"{}","statusReason":"'' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["40"],"coveredBy":["40","41","42","43"],"location":{"end":{"column":2,"line":4},"start":{"column":40,"line":1}}},{"id":"126","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"'Hello ' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["40"],"coveredBy":["40","42","43"],"location":{"end":{"column":18,"line":3},"start":{"column":11,"line":3}}},{"id":"125","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"' World' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["40"],"coveredBy":["40","41","42","43"],"location":{"end":{"column":18,"line":2},"start":{"column":11,"line":2}}},{"id":"128","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"'HelloWorld' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["40"],"coveredBy":["40"],"location":{"end":{"column":54,"line":7},"start":{"column":51,"line":7}}},{"id":"127","mutatorName":"BlockStatement","replacement":"{}","statusReason":"undefined == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["40"],"coveredBy":["40"],"location":{"end":{"column":2,"line":8},"start":{"column":38,"line":6}}}]
\ No newline at end of file
diff --git a/mutations/test_41.json b/mutations/test_41.json
new file mode 100644
index 0000000..972355e
--- /dev/null
+++ b/mutations/test_41.json
@@ -0,0 +1 @@
+[{"id":"124","mutatorName":"BlockStatement","replacement":"{}","statusReason":"'' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["40"],"coveredBy":["40","41","42","43"],"location":{"end":{"column":2,"line":4},"start":{"column":40,"line":1}}},{"id":"125","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"' World' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["40"],"coveredBy":["40","41","42","43"],"location":{"end":{"column":18,"line":2},"start":{"column":11,"line":2}}}]
\ No newline at end of file
diff --git a/mutations/test_42.json b/mutations/test_42.json
new file mode 100644
index 0000000..d543e6e
--- /dev/null
+++ b/mutations/test_42.json
@@ -0,0 +1 @@
+[{"id":"124","mutatorName":"BlockStatement","replacement":"{}","statusReason":"'' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["40"],"coveredBy":["40","41","42","43"],"location":{"end":{"column":2,"line":4},"start":{"column":40,"line":1}}},{"id":"126","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"'Hello ' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["40"],"coveredBy":["40","42","43"],"location":{"end":{"column":18,"line":3},"start":{"column":11,"line":3}}},{"id":"125","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"' World' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["40"],"coveredBy":["40","41","42","43"],"location":{"end":{"column":18,"line":2},"start":{"column":11,"line":2}}}]
\ No newline at end of file
diff --git a/mutations/test_43.json b/mutations/test_43.json
new file mode 100644
index 0000000..d543e6e
--- /dev/null
+++ b/mutations/test_43.json
@@ -0,0 +1 @@
+[{"id":"124","mutatorName":"BlockStatement","replacement":"{}","statusReason":"'' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["40"],"coveredBy":["40","41","42","43"],"location":{"end":{"column":2,"line":4},"start":{"column":40,"line":1}}},{"id":"126","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"'Hello ' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["40"],"coveredBy":["40","42","43"],"location":{"end":{"column":18,"line":3},"start":{"column":11,"line":3}}},{"id":"125","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"' World' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["40"],"coveredBy":["40","41","42","43"],"location":{"end":{"column":18,"line":2},"start":{"column":11,"line":2}}}]
\ No newline at end of file
diff --git a/mutations/test_44.json b/mutations/test_44.json
new file mode 100644
index 0000000..3eaf614
--- /dev/null
+++ b/mutations/test_44.json
@@ -0,0 +1 @@
+[{"id":"130","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"129","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["44"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"131","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"132","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"133","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"134","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["54"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"135","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["53"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"136","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["52"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"137","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["51"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"138","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"139","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"140","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"141","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"142","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"143","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"144","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"149","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"150","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["44"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"152","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"151","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"153","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}]
\ No newline at end of file
diff --git a/mutations/test_45.json b/mutations/test_45.json
new file mode 100644
index 0000000..3eaf614
--- /dev/null
+++ b/mutations/test_45.json
@@ -0,0 +1 @@
+[{"id":"130","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"129","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["44"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"131","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"132","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"133","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"134","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["54"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"135","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["53"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"136","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["52"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"137","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["51"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"138","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"139","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"140","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"141","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"142","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"143","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"144","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"149","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"150","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["44"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"152","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"151","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"153","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}]
\ No newline at end of file
diff --git a/mutations/test_46.json b/mutations/test_46.json
new file mode 100644
index 0000000..3eaf614
--- /dev/null
+++ b/mutations/test_46.json
@@ -0,0 +1 @@
+[{"id":"130","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"129","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["44"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"131","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"132","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"133","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"134","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["54"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"135","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["53"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"136","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["52"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"137","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["51"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"138","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"139","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"140","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"141","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"142","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"143","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"144","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"149","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"150","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["44"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"152","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"151","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"153","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}]
\ No newline at end of file
diff --git a/mutations/test_47.json b/mutations/test_47.json
new file mode 100644
index 0000000..3eaf614
--- /dev/null
+++ b/mutations/test_47.json
@@ -0,0 +1 @@
+[{"id":"130","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"129","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["44"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"131","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"132","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"133","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"134","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["54"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"135","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["53"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"136","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["52"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"137","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["51"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"138","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"139","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"140","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"141","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"142","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"143","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"144","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"149","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"150","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["44"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"152","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"151","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"153","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}]
\ No newline at end of file
diff --git a/mutations/test_48.json b/mutations/test_48.json
new file mode 100644
index 0000000..3eaf614
--- /dev/null
+++ b/mutations/test_48.json
@@ -0,0 +1 @@
+[{"id":"130","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"129","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["44"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"131","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"132","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"133","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"134","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["54"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"135","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["53"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"136","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["52"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"137","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["51"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"138","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"139","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"140","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"141","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"142","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"143","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"144","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"149","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"150","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["44"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"152","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"151","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"153","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}]
\ No newline at end of file
diff --git a/mutations/test_49.json b/mutations/test_49.json
new file mode 100644
index 0000000..3eaf614
--- /dev/null
+++ b/mutations/test_49.json
@@ -0,0 +1 @@
+[{"id":"130","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"129","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["44"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"131","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"132","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"133","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"134","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["54"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"135","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["53"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"136","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["52"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"137","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["51"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"138","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"139","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"140","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"141","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"142","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"143","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"144","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"149","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"150","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["44"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"152","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"151","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"153","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}]
\ No newline at end of file
diff --git a/mutations/test_5.json b/mutations/test_5.json
new file mode 100644
index 0000000..e5fd508
--- /dev/null
+++ b/mutations/test_5.json
@@ -0,0 +1 @@
+[{"id":"1","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"' World' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["4"],"coveredBy":["4","5","6","7"],"location":{"end":{"column":18,"line":2},"start":{"column":11,"line":2}}},{"id":"0","mutatorName":"BlockStatement","replacement":"{}","statusReason":"'' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["4"],"coveredBy":["4","5","6","7"],"location":{"end":{"column":2,"line":4},"start":{"column":40,"line":1}}}]
\ No newline at end of file
diff --git a/mutations/test_50.json b/mutations/test_50.json
new file mode 100644
index 0000000..3a7c353
--- /dev/null
+++ b/mutations/test_50.json
@@ -0,0 +1 @@
+[{"id":"130","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"129","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["44"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"131","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"132","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"133","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"134","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["54"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"135","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["53"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"136","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["52"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"137","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["51"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"138","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"139","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"140","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"141","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"142","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"143","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"144","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"145","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["50"],"coveredBy":["50","51","52","53","54"],"location":{"end":{"column":10,"line":16},"start":{"column":34,"line":13}}},{"id":"147","mutatorName":"ArithmeticOperator","replacement":"1 + discount","statusReason":"expected 1112.4 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["50"],"coveredBy":["50","51","52","53","54"],"location":{"end":{"column":50,"line":14},"start":{"column":38,"line":14}}},{"id":"146","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 - discount)","statusReason":"expected 1113.4020618556704 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["50"],"coveredBy":["50","51","52","53","54"],"location":{"end":{"column":51,"line":14},"start":{"column":25,"line":14}}},{"id":"148","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected 4976.1 to equal 5130","status":"Killed","static":false,"testsCompleted":2,"killedBy":["51"],"coveredBy":["50","51","52","53","54"],"location":{"end":{"column":24,"line":15},"start":{"column":20,"line":15}}},{"id":"149","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"150","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["44"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"152","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"151","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"153","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}]
\ No newline at end of file
diff --git a/mutations/test_51.json b/mutations/test_51.json
new file mode 100644
index 0000000..3a7c353
--- /dev/null
+++ b/mutations/test_51.json
@@ -0,0 +1 @@
+[{"id":"130","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"129","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["44"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"131","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"132","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"133","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"134","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["54"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"135","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["53"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"136","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["52"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"137","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["51"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"138","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"139","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"140","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"141","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"142","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"143","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"144","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"145","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["50"],"coveredBy":["50","51","52","53","54"],"location":{"end":{"column":10,"line":16},"start":{"column":34,"line":13}}},{"id":"147","mutatorName":"ArithmeticOperator","replacement":"1 + discount","statusReason":"expected 1112.4 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["50"],"coveredBy":["50","51","52","53","54"],"location":{"end":{"column":50,"line":14},"start":{"column":38,"line":14}}},{"id":"146","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 - discount)","statusReason":"expected 1113.4020618556704 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["50"],"coveredBy":["50","51","52","53","54"],"location":{"end":{"column":51,"line":14},"start":{"column":25,"line":14}}},{"id":"148","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected 4976.1 to equal 5130","status":"Killed","static":false,"testsCompleted":2,"killedBy":["51"],"coveredBy":["50","51","52","53","54"],"location":{"end":{"column":24,"line":15},"start":{"column":20,"line":15}}},{"id":"149","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"150","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["44"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"152","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"151","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"153","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}]
\ No newline at end of file
diff --git a/mutations/test_52.json b/mutations/test_52.json
new file mode 100644
index 0000000..3a7c353
--- /dev/null
+++ b/mutations/test_52.json
@@ -0,0 +1 @@
+[{"id":"130","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"129","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["44"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"131","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"132","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"133","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"134","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["54"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"135","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["53"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"136","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["52"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"137","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["51"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"138","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"139","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"140","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"141","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"142","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"143","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"144","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"145","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["50"],"coveredBy":["50","51","52","53","54"],"location":{"end":{"column":10,"line":16},"start":{"column":34,"line":13}}},{"id":"147","mutatorName":"ArithmeticOperator","replacement":"1 + discount","statusReason":"expected 1112.4 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["50"],"coveredBy":["50","51","52","53","54"],"location":{"end":{"column":50,"line":14},"start":{"column":38,"line":14}}},{"id":"146","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 - discount)","statusReason":"expected 1113.4020618556704 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["50"],"coveredBy":["50","51","52","53","54"],"location":{"end":{"column":51,"line":14},"start":{"column":25,"line":14}}},{"id":"148","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected 4976.1 to equal 5130","status":"Killed","static":false,"testsCompleted":2,"killedBy":["51"],"coveredBy":["50","51","52","53","54"],"location":{"end":{"column":24,"line":15},"start":{"column":20,"line":15}}},{"id":"149","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"150","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["44"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"152","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"151","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"153","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}]
\ No newline at end of file
diff --git a/mutations/test_53.json b/mutations/test_53.json
new file mode 100644
index 0000000..3a7c353
--- /dev/null
+++ b/mutations/test_53.json
@@ -0,0 +1 @@
+[{"id":"130","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"129","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["44"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"131","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"132","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"133","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"134","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["54"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"135","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["53"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"136","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["52"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"137","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["51"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"138","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"139","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"140","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"141","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"142","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"143","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"144","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"145","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["50"],"coveredBy":["50","51","52","53","54"],"location":{"end":{"column":10,"line":16},"start":{"column":34,"line":13}}},{"id":"147","mutatorName":"ArithmeticOperator","replacement":"1 + discount","statusReason":"expected 1112.4 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["50"],"coveredBy":["50","51","52","53","54"],"location":{"end":{"column":50,"line":14},"start":{"column":38,"line":14}}},{"id":"146","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 - discount)","statusReason":"expected 1113.4020618556704 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["50"],"coveredBy":["50","51","52","53","54"],"location":{"end":{"column":51,"line":14},"start":{"column":25,"line":14}}},{"id":"148","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected 4976.1 to equal 5130","status":"Killed","static":false,"testsCompleted":2,"killedBy":["51"],"coveredBy":["50","51","52","53","54"],"location":{"end":{"column":24,"line":15},"start":{"column":20,"line":15}}},{"id":"149","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"150","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["44"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"152","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"151","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"153","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}]
\ No newline at end of file
diff --git a/mutations/test_54.json b/mutations/test_54.json
new file mode 100644
index 0000000..a770dfa
--- /dev/null
+++ b/mutations/test_54.json
@@ -0,0 +1 @@
+[{"id":"130","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"129","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["44"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"131","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"132","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"133","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"134","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["54"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"135","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["53"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"136","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["52"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"137","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["51"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"138","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"139","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"140","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"141","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"142","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"143","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"144","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"145","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["50"],"coveredBy":["50","51","52","53","54"],"location":{"end":{"column":10,"line":16},"start":{"column":34,"line":13}}},{"id":"147","mutatorName":"ArithmeticOperator","replacement":"1 + discount","statusReason":"expected 1112.4 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["50"],"coveredBy":["50","51","52","53","54"],"location":{"end":{"column":50,"line":14},"start":{"column":38,"line":14}}},{"id":"146","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 - discount)","statusReason":"expected 1113.4020618556704 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["50"],"coveredBy":["50","51","52","53","54"],"location":{"end":{"column":51,"line":14},"start":{"column":25,"line":14}}},{"id":"148","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected 4976.1 to equal 5130","status":"Killed","static":false,"testsCompleted":2,"killedBy":["51"],"coveredBy":["50","51","52","53","54"],"location":{"end":{"column":24,"line":15},"start":{"column":20,"line":15}}},{"id":"150","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["44"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"152","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"151","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"153","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}]
\ No newline at end of file
diff --git a/mutations/test_55.json b/mutations/test_55.json
new file mode 100644
index 0000000..92fc6da
--- /dev/null
+++ b/mutations/test_55.json
@@ -0,0 +1 @@
+[{"id":"154","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["55","56","57"],"location":{"end":{"column":29,"line":8},"start":{"column":27,"line":8}}},{"id":"155","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["55","56","57"],"location":{"end":{"column":6,"line":13},"start":{"column":31,"line":9}}},{"id":"156","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":3,"killedBy":["57"],"coveredBy":["55","56","57"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"157","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["55","56","57"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"158","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["55","56"],"location":{"end":{"column":10,"line":12},"start":{"column":45,"line":10}}},{"id":"159","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["55"],"coveredBy":["55"],"location":{"end":{"column":6,"line":17},"start":{"column":22,"line":15}}},{"id":"161","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["55"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"160","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["55"],"coveredBy":["55"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"162","mutatorName":"EqualityOperator","replacement":"this.hitpoints >= 0","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["55"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"163","mutatorName":"EqualityOperator","replacement":"this.hitpoints <= 0","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["55"],"coveredBy":["55"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"164","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["55","56"],"location":{"end":{"column":6,"line":21},"start":{"column":28,"line":19}}},{"id":"165","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["55"],"coveredBy":["55","56"],"location":{"end":{"column":6,"line":25},"start":{"column":32,"line":23}}},{"id":"166","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["55"],"coveredBy":["55","56"],"location":{"end":{"column":33,"line":24},"start":{"column":9,"line":24}}},{"id":"168","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["55"],"coveredBy":["55"],"location":{"end":{"column":6,"line":35},"start":{"column":22,"line":33}}},{"id":"169","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected false to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["55"],"coveredBy":["55"],"location":{"end":{"column":20,"line":34},"start":{"column":16,"line":34}}},{"id":"170","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["55"],"coveredBy":["55"],"location":{"end":{"column":6,"line":39},"start":{"column":30,"line":37}}},{"id":"171","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["55"],"location":{"end":{"column":6,"line":42},"start":{"column":32,"line":40}}},{"id":"172","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["55"],"location":{"end":{"column":33,"line":41},"start":{"column":9,"line":41}}}]
\ No newline at end of file
diff --git a/mutations/test_56.json b/mutations/test_56.json
new file mode 100644
index 0000000..796e1ca
--- /dev/null
+++ b/mutations/test_56.json
@@ -0,0 +1 @@
+[{"id":"154","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["55","56","57"],"location":{"end":{"column":29,"line":8},"start":{"column":27,"line":8}}},{"id":"155","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["55","56","57"],"location":{"end":{"column":6,"line":13},"start":{"column":31,"line":9}}},{"id":"156","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":3,"killedBy":["57"],"coveredBy":["55","56","57"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"157","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["55","56","57"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"158","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["55","56"],"location":{"end":{"column":10,"line":12},"start":{"column":45,"line":10}}},{"id":"164","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["55","56"],"location":{"end":{"column":6,"line":21},"start":{"column":28,"line":19}}},{"id":"165","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["55"],"coveredBy":["55","56"],"location":{"end":{"column":6,"line":25},"start":{"column":32,"line":23}}},{"id":"166","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["55"],"coveredBy":["55","56"],"location":{"end":{"column":33,"line":24},"start":{"column":9,"line":24}}},{"id":"174","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["56"],"coveredBy":["56"],"location":{"end":{"column":6,"line":52},"start":{"column":22,"line":50}}},{"id":"175","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected false to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["56"],"coveredBy":["56"],"location":{"end":{"column":20,"line":51},"start":{"column":16,"line":51}}},{"id":"176","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["56"],"location":{"end":{"column":6,"line":56},"start":{"column":29,"line":54}}},{"id":"177","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["56"],"location":{"end":{"column":6,"line":60},"start":{"column":32,"line":58}}},{"id":"178","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["56"],"location":{"end":{"column":33,"line":59},"start":{"column":9,"line":59}}}]
\ No newline at end of file
diff --git a/mutations/test_57.json b/mutations/test_57.json
new file mode 100644
index 0000000..2955fd7
--- /dev/null
+++ b/mutations/test_57.json
@@ -0,0 +1 @@
+[{"id":"154","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["55","56","57"],"location":{"end":{"column":29,"line":8},"start":{"column":27,"line":8}}},{"id":"155","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["55","56","57"],"location":{"end":{"column":6,"line":13},"start":{"column":31,"line":9}}},{"id":"156","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":3,"killedBy":["57"],"coveredBy":["55","56","57"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"157","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["55","56","57"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"179","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["57"],"coveredBy":["57"],"location":{"end":{"column":6,"line":67},"start":{"column":27,"line":62}}},{"id":"180","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["57"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"181","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["57"],"coveredBy":["57"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"182","mutatorName":"EqualityOperator","replacement":"this.hitpoints !== 2","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["57"],"coveredBy":["57"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"183","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["57"],"coveredBy":["57"],"location":{"end":{"column":10,"line":65},"start":{"column":35,"line":63}}},{"id":"184","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected '' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["57"],"coveredBy":["57"],"location":{"end":{"column":26,"line":64},"start":{"column":20,"line":64}}}]
\ No newline at end of file
diff --git a/mutations/test_58.json b/mutations/test_58.json
new file mode 100644
index 0000000..31e9bb9
--- /dev/null
+++ b/mutations/test_58.json
@@ -0,0 +1 @@
+[{"id":"191","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["58"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"192","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"193","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"194","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"195","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"196","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["68"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"198","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["66"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"197","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["67"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"199","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["65"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"200","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"201","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"202","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"203","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"204","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"205","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"206","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"211","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"212","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["58"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"213","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"214","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"215","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}]
\ No newline at end of file
diff --git a/mutations/test_59.json b/mutations/test_59.json
new file mode 100644
index 0000000..31e9bb9
--- /dev/null
+++ b/mutations/test_59.json
@@ -0,0 +1 @@
+[{"id":"191","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["58"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"192","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"193","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"194","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"195","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"196","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["68"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"198","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["66"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"197","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["67"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"199","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["65"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"200","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"201","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"202","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"203","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"204","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"205","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"206","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"211","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"212","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["58"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"213","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"214","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"215","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}]
\ No newline at end of file
diff --git a/mutations/test_6.json b/mutations/test_6.json
new file mode 100644
index 0000000..293dadc
--- /dev/null
+++ b/mutations/test_6.json
@@ -0,0 +1 @@
+[{"id":"1","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"' World' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["4"],"coveredBy":["4","5","6","7"],"location":{"end":{"column":18,"line":2},"start":{"column":11,"line":2}}},{"id":"2","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"'Hello ' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["4"],"coveredBy":["4","6","7"],"location":{"end":{"column":18,"line":3},"start":{"column":11,"line":3}}},{"id":"0","mutatorName":"BlockStatement","replacement":"{}","statusReason":"'' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["4"],"coveredBy":["4","5","6","7"],"location":{"end":{"column":2,"line":4},"start":{"column":40,"line":1}}}]
\ No newline at end of file
diff --git a/mutations/test_60.json b/mutations/test_60.json
new file mode 100644
index 0000000..31e9bb9
--- /dev/null
+++ b/mutations/test_60.json
@@ -0,0 +1 @@
+[{"id":"191","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["58"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"192","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"193","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"194","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"195","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"196","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["68"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"198","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["66"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"197","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["67"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"199","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["65"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"200","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"201","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"202","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"203","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"204","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"205","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"206","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"211","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"212","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["58"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"213","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"214","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"215","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}]
\ No newline at end of file
diff --git a/mutations/test_61.json b/mutations/test_61.json
new file mode 100644
index 0000000..31e9bb9
--- /dev/null
+++ b/mutations/test_61.json
@@ -0,0 +1 @@
+[{"id":"191","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["58"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"192","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"193","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"194","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"195","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"196","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["68"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"198","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["66"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"197","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["67"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"199","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["65"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"200","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"201","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"202","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"203","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"204","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"205","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"206","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"211","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"212","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["58"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"213","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"214","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"215","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}]
\ No newline at end of file
diff --git a/mutations/test_62.json b/mutations/test_62.json
new file mode 100644
index 0000000..31e9bb9
--- /dev/null
+++ b/mutations/test_62.json
@@ -0,0 +1 @@
+[{"id":"191","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["58"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"192","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"193","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"194","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"195","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"196","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["68"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"198","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["66"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"197","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["67"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"199","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["65"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"200","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"201","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"202","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"203","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"204","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"205","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"206","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"211","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"212","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["58"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"213","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"214","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"215","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}]
\ No newline at end of file
diff --git a/mutations/test_63.json b/mutations/test_63.json
new file mode 100644
index 0000000..31e9bb9
--- /dev/null
+++ b/mutations/test_63.json
@@ -0,0 +1 @@
+[{"id":"191","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["58"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"192","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"193","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"194","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"195","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"196","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["68"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"198","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["66"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"197","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["67"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"199","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["65"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"200","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"201","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"202","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"203","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"204","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"205","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"206","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"211","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"212","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["58"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"213","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"214","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"215","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}]
\ No newline at end of file
diff --git a/mutations/test_64.json b/mutations/test_64.json
new file mode 100644
index 0000000..f9501bc
--- /dev/null
+++ b/mutations/test_64.json
@@ -0,0 +1 @@
+[{"id":"191","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["58"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"192","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"193","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"194","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"195","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"196","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["68"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"198","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["66"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"197","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["67"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"199","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["65"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"200","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"201","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"202","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"203","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"204","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"205","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"206","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"207","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["64"],"coveredBy":["64","65","66","67","68"],"location":{"end":{"column":10,"line":16},"start":{"column":34,"line":13}}},{"id":"208","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 - discount)","statusReason":"expected 1113.4020618556704 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["64"],"coveredBy":["64","65","66","67","68"],"location":{"end":{"column":51,"line":14},"start":{"column":25,"line":14}}},{"id":"209","mutatorName":"ArithmeticOperator","replacement":"1 + discount","statusReason":"expected 1112.4 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["64"],"coveredBy":["64","65","66","67","68"],"location":{"end":{"column":50,"line":14},"start":{"column":38,"line":14}}},{"id":"210","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected 4976.1 to equal 5130","status":"Killed","static":false,"testsCompleted":2,"killedBy":["65"],"coveredBy":["64","65","66","67","68"],"location":{"end":{"column":24,"line":15},"start":{"column":20,"line":15}}},{"id":"211","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"212","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["58"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"213","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"214","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"215","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}]
\ No newline at end of file
diff --git a/mutations/test_65.json b/mutations/test_65.json
new file mode 100644
index 0000000..f9501bc
--- /dev/null
+++ b/mutations/test_65.json
@@ -0,0 +1 @@
+[{"id":"191","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["58"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"192","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"193","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"194","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"195","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"196","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["68"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"198","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["66"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"197","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["67"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"199","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["65"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"200","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"201","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"202","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"203","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"204","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"205","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"206","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"207","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["64"],"coveredBy":["64","65","66","67","68"],"location":{"end":{"column":10,"line":16},"start":{"column":34,"line":13}}},{"id":"208","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 - discount)","statusReason":"expected 1113.4020618556704 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["64"],"coveredBy":["64","65","66","67","68"],"location":{"end":{"column":51,"line":14},"start":{"column":25,"line":14}}},{"id":"209","mutatorName":"ArithmeticOperator","replacement":"1 + discount","statusReason":"expected 1112.4 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["64"],"coveredBy":["64","65","66","67","68"],"location":{"end":{"column":50,"line":14},"start":{"column":38,"line":14}}},{"id":"210","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected 4976.1 to equal 5130","status":"Killed","static":false,"testsCompleted":2,"killedBy":["65"],"coveredBy":["64","65","66","67","68"],"location":{"end":{"column":24,"line":15},"start":{"column":20,"line":15}}},{"id":"211","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"212","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["58"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"213","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"214","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"215","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}]
\ No newline at end of file
diff --git a/mutations/test_66.json b/mutations/test_66.json
new file mode 100644
index 0000000..f9501bc
--- /dev/null
+++ b/mutations/test_66.json
@@ -0,0 +1 @@
+[{"id":"191","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["58"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"192","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"193","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"194","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"195","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"196","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["68"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"198","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["66"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"197","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["67"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"199","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["65"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"200","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"201","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"202","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"203","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"204","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"205","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"206","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"207","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["64"],"coveredBy":["64","65","66","67","68"],"location":{"end":{"column":10,"line":16},"start":{"column":34,"line":13}}},{"id":"208","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 - discount)","statusReason":"expected 1113.4020618556704 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["64"],"coveredBy":["64","65","66","67","68"],"location":{"end":{"column":51,"line":14},"start":{"column":25,"line":14}}},{"id":"209","mutatorName":"ArithmeticOperator","replacement":"1 + discount","statusReason":"expected 1112.4 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["64"],"coveredBy":["64","65","66","67","68"],"location":{"end":{"column":50,"line":14},"start":{"column":38,"line":14}}},{"id":"210","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected 4976.1 to equal 5130","status":"Killed","static":false,"testsCompleted":2,"killedBy":["65"],"coveredBy":["64","65","66","67","68"],"location":{"end":{"column":24,"line":15},"start":{"column":20,"line":15}}},{"id":"211","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"212","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["58"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"213","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"214","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"215","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}]
\ No newline at end of file
diff --git a/mutations/test_67.json b/mutations/test_67.json
new file mode 100644
index 0000000..f9501bc
--- /dev/null
+++ b/mutations/test_67.json
@@ -0,0 +1 @@
+[{"id":"191","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["58"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"192","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"193","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"194","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"195","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"196","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["68"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"198","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["66"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"197","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["67"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"199","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["65"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"200","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"201","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"202","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"203","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"204","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"205","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"206","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"207","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["64"],"coveredBy":["64","65","66","67","68"],"location":{"end":{"column":10,"line":16},"start":{"column":34,"line":13}}},{"id":"208","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 - discount)","statusReason":"expected 1113.4020618556704 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["64"],"coveredBy":["64","65","66","67","68"],"location":{"end":{"column":51,"line":14},"start":{"column":25,"line":14}}},{"id":"209","mutatorName":"ArithmeticOperator","replacement":"1 + discount","statusReason":"expected 1112.4 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["64"],"coveredBy":["64","65","66","67","68"],"location":{"end":{"column":50,"line":14},"start":{"column":38,"line":14}}},{"id":"210","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected 4976.1 to equal 5130","status":"Killed","static":false,"testsCompleted":2,"killedBy":["65"],"coveredBy":["64","65","66","67","68"],"location":{"end":{"column":24,"line":15},"start":{"column":20,"line":15}}},{"id":"211","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"212","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["58"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"213","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"214","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"215","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}]
\ No newline at end of file
diff --git a/mutations/test_68.json b/mutations/test_68.json
new file mode 100644
index 0000000..5f37cfc
--- /dev/null
+++ b/mutations/test_68.json
@@ -0,0 +1 @@
+[{"id":"191","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["58"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"192","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"193","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"194","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"195","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"196","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["68"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"198","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["66"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"197","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["67"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"199","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["65"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"200","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"201","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"202","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"203","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"204","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"205","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"206","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"207","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["64"],"coveredBy":["64","65","66","67","68"],"location":{"end":{"column":10,"line":16},"start":{"column":34,"line":13}}},{"id":"208","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 - discount)","statusReason":"expected 1113.4020618556704 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["64"],"coveredBy":["64","65","66","67","68"],"location":{"end":{"column":51,"line":14},"start":{"column":25,"line":14}}},{"id":"209","mutatorName":"ArithmeticOperator","replacement":"1 + discount","statusReason":"expected 1112.4 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["64"],"coveredBy":["64","65","66","67","68"],"location":{"end":{"column":50,"line":14},"start":{"column":38,"line":14}}},{"id":"210","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected 4976.1 to equal 5130","status":"Killed","static":false,"testsCompleted":2,"killedBy":["65"],"coveredBy":["64","65","66","67","68"],"location":{"end":{"column":24,"line":15},"start":{"column":20,"line":15}}},{"id":"212","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["58"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"213","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"214","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"215","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}]
\ No newline at end of file
diff --git a/mutations/test_69.json b/mutations/test_69.json
new file mode 100644
index 0000000..f172294
--- /dev/null
+++ b/mutations/test_69.json
@@ -0,0 +1 @@
+[{"id":"216","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["69","70","71"],"location":{"end":{"column":29,"line":8},"start":{"column":27,"line":8}}},{"id":"217","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["69","70","71"],"location":{"end":{"column":6,"line":13},"start":{"column":31,"line":9}}},{"id":"218","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":3,"killedBy":["71"],"coveredBy":["69","70","71"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"219","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["69","70","71"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"221","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["69"],"coveredBy":["69"],"location":{"end":{"column":6,"line":17},"start":{"column":22,"line":15}}},{"id":"220","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["69","70"],"location":{"end":{"column":10,"line":12},"start":{"column":45,"line":10}}},{"id":"222","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["69"],"coveredBy":["69"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"223","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["69"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"224","mutatorName":"EqualityOperator","replacement":"this.hitpoints >= 0","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["69"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"225","mutatorName":"EqualityOperator","replacement":"this.hitpoints <= 0","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["69"],"coveredBy":["69"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"226","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["69","70"],"location":{"end":{"column":6,"line":21},"start":{"column":28,"line":19}}},{"id":"227","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["69"],"coveredBy":["69","70"],"location":{"end":{"column":6,"line":25},"start":{"column":32,"line":23}}},{"id":"228","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["69"],"coveredBy":["69","70"],"location":{"end":{"column":33,"line":24},"start":{"column":9,"line":24}}},{"id":"230","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["69"],"coveredBy":["69"],"location":{"end":{"column":6,"line":35},"start":{"column":22,"line":33}}},{"id":"231","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected false to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["69"],"coveredBy":["69"],"location":{"end":{"column":20,"line":34},"start":{"column":16,"line":34}}},{"id":"232","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["69"],"coveredBy":["69"],"location":{"end":{"column":6,"line":39},"start":{"column":30,"line":37}}},{"id":"233","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["69"],"location":{"end":{"column":6,"line":42},"start":{"column":32,"line":40}}},{"id":"234","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["69"],"location":{"end":{"column":33,"line":41},"start":{"column":9,"line":41}}}]
\ No newline at end of file
diff --git a/mutations/test_7.json b/mutations/test_7.json
new file mode 100644
index 0000000..293dadc
--- /dev/null
+++ b/mutations/test_7.json
@@ -0,0 +1 @@
+[{"id":"1","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"' World' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["4"],"coveredBy":["4","5","6","7"],"location":{"end":{"column":18,"line":2},"start":{"column":11,"line":2}}},{"id":"2","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"'Hello ' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["4"],"coveredBy":["4","6","7"],"location":{"end":{"column":18,"line":3},"start":{"column":11,"line":3}}},{"id":"0","mutatorName":"BlockStatement","replacement":"{}","statusReason":"'' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["4"],"coveredBy":["4","5","6","7"],"location":{"end":{"column":2,"line":4},"start":{"column":40,"line":1}}}]
\ No newline at end of file
diff --git a/mutations/test_70.json b/mutations/test_70.json
new file mode 100644
index 0000000..5256576
--- /dev/null
+++ b/mutations/test_70.json
@@ -0,0 +1 @@
+[{"id":"216","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["69","70","71"],"location":{"end":{"column":29,"line":8},"start":{"column":27,"line":8}}},{"id":"217","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["69","70","71"],"location":{"end":{"column":6,"line":13},"start":{"column":31,"line":9}}},{"id":"218","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":3,"killedBy":["71"],"coveredBy":["69","70","71"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"219","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["69","70","71"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"220","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["69","70"],"location":{"end":{"column":10,"line":12},"start":{"column":45,"line":10}}},{"id":"226","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["69","70"],"location":{"end":{"column":6,"line":21},"start":{"column":28,"line":19}}},{"id":"227","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["69"],"coveredBy":["69","70"],"location":{"end":{"column":6,"line":25},"start":{"column":32,"line":23}}},{"id":"228","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["69"],"coveredBy":["69","70"],"location":{"end":{"column":33,"line":24},"start":{"column":9,"line":24}}},{"id":"237","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected false to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["70"],"coveredBy":["70"],"location":{"end":{"column":20,"line":51},"start":{"column":16,"line":51}}},{"id":"236","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["70"],"coveredBy":["70"],"location":{"end":{"column":6,"line":52},"start":{"column":22,"line":50}}},{"id":"238","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["70"],"location":{"end":{"column":6,"line":56},"start":{"column":29,"line":54}}},{"id":"239","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["70"],"location":{"end":{"column":6,"line":60},"start":{"column":32,"line":58}}},{"id":"240","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["70"],"location":{"end":{"column":33,"line":59},"start":{"column":9,"line":59}}}]
\ No newline at end of file
diff --git a/mutations/test_71.json b/mutations/test_71.json
new file mode 100644
index 0000000..c5a3ddf
--- /dev/null
+++ b/mutations/test_71.json
@@ -0,0 +1 @@
+[{"id":"216","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["69","70","71"],"location":{"end":{"column":29,"line":8},"start":{"column":27,"line":8}}},{"id":"217","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["69","70","71"],"location":{"end":{"column":6,"line":13},"start":{"column":31,"line":9}}},{"id":"218","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":3,"killedBy":["71"],"coveredBy":["69","70","71"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"219","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["69","70","71"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"241","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["71"],"coveredBy":["71"],"location":{"end":{"column":6,"line":67},"start":{"column":27,"line":62}}},{"id":"242","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["71"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"243","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["71"],"coveredBy":["71"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"245","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["71"],"coveredBy":["71"],"location":{"end":{"column":10,"line":65},"start":{"column":35,"line":63}}},{"id":"244","mutatorName":"EqualityOperator","replacement":"this.hitpoints !== 2","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["71"],"coveredBy":["71"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"246","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected '' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["71"],"coveredBy":["71"],"location":{"end":{"column":26,"line":64},"start":{"column":20,"line":64}}}]
\ No newline at end of file
diff --git a/mutations/test_72.json b/mutations/test_72.json
new file mode 100644
index 0000000..52fea2d
--- /dev/null
+++ b/mutations/test_72.json
@@ -0,0 +1 @@
+[{"id":"248","mutatorName":"BlockStatement","replacement":"{}","statusReason":"'' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["72"],"coveredBy":["72","73","74","75"],"location":{"end":{"column":2,"line":4},"start":{"column":40,"line":1}}},{"id":"249","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"' World' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["72"],"coveredBy":["72","73","74","75"],"location":{"end":{"column":18,"line":2},"start":{"column":11,"line":2}}},{"id":"250","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"'Hello ' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["72"],"coveredBy":["72","74","75"],"location":{"end":{"column":18,"line":3},"start":{"column":11,"line":3}}},{"id":"251","mutatorName":"BlockStatement","replacement":"{}","statusReason":"undefined == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["72"],"coveredBy":["72"],"location":{"end":{"column":2,"line":8},"start":{"column":38,"line":6}}},{"id":"252","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"'HelloWorld' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["72"],"coveredBy":["72"],"location":{"end":{"column":54,"line":7},"start":{"column":51,"line":7}}}]
\ No newline at end of file
diff --git a/mutations/test_73.json b/mutations/test_73.json
new file mode 100644
index 0000000..182dbbd
--- /dev/null
+++ b/mutations/test_73.json
@@ -0,0 +1 @@
+[{"id":"248","mutatorName":"BlockStatement","replacement":"{}","statusReason":"'' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["72"],"coveredBy":["72","73","74","75"],"location":{"end":{"column":2,"line":4},"start":{"column":40,"line":1}}},{"id":"249","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"' World' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["72"],"coveredBy":["72","73","74","75"],"location":{"end":{"column":18,"line":2},"start":{"column":11,"line":2}}}]
\ No newline at end of file
diff --git a/mutations/test_74.json b/mutations/test_74.json
new file mode 100644
index 0000000..c833726
--- /dev/null
+++ b/mutations/test_74.json
@@ -0,0 +1 @@
+[{"id":"248","mutatorName":"BlockStatement","replacement":"{}","statusReason":"'' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["72"],"coveredBy":["72","73","74","75"],"location":{"end":{"column":2,"line":4},"start":{"column":40,"line":1}}},{"id":"249","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"' World' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["72"],"coveredBy":["72","73","74","75"],"location":{"end":{"column":18,"line":2},"start":{"column":11,"line":2}}},{"id":"250","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"'Hello ' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["72"],"coveredBy":["72","74","75"],"location":{"end":{"column":18,"line":3},"start":{"column":11,"line":3}}}]
\ No newline at end of file
diff --git a/mutations/test_75.json b/mutations/test_75.json
new file mode 100644
index 0000000..c833726
--- /dev/null
+++ b/mutations/test_75.json
@@ -0,0 +1 @@
+[{"id":"248","mutatorName":"BlockStatement","replacement":"{}","statusReason":"'' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["72"],"coveredBy":["72","73","74","75"],"location":{"end":{"column":2,"line":4},"start":{"column":40,"line":1}}},{"id":"249","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"' World' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["72"],"coveredBy":["72","73","74","75"],"location":{"end":{"column":18,"line":2},"start":{"column":11,"line":2}}},{"id":"250","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"'Hello ' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["72"],"coveredBy":["72","74","75"],"location":{"end":{"column":18,"line":3},"start":{"column":11,"line":3}}}]
\ No newline at end of file
diff --git a/mutations/test_76.json b/mutations/test_76.json
new file mode 100644
index 0000000..836bc82
--- /dev/null
+++ b/mutations/test_76.json
@@ -0,0 +1 @@
+[{"id":"253","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["76"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"255","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"254","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"256","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"257","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"258","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["86"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"259","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["85"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"260","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["84"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"261","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["83"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"262","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"263","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"264","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"265","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"266","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"268","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"267","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"274","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["76"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"273","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"275","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"276","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"277","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}]
\ No newline at end of file
diff --git a/mutations/test_77.json b/mutations/test_77.json
new file mode 100644
index 0000000..836bc82
--- /dev/null
+++ b/mutations/test_77.json
@@ -0,0 +1 @@
+[{"id":"253","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["76"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"255","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"254","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"256","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"257","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"258","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["86"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"259","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["85"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"260","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["84"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"261","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["83"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"262","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"263","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"264","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"265","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"266","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"268","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"267","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"274","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["76"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"273","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"275","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"276","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"277","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}]
\ No newline at end of file
diff --git a/mutations/test_78.json b/mutations/test_78.json
new file mode 100644
index 0000000..836bc82
--- /dev/null
+++ b/mutations/test_78.json
@@ -0,0 +1 @@
+[{"id":"253","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["76"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"255","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"254","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"256","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"257","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"258","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["86"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"259","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["85"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"260","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["84"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"261","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["83"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"262","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"263","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"264","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"265","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"266","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"268","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"267","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"274","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["76"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"273","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"275","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"276","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"277","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}]
\ No newline at end of file
diff --git a/mutations/test_79.json b/mutations/test_79.json
new file mode 100644
index 0000000..836bc82
--- /dev/null
+++ b/mutations/test_79.json
@@ -0,0 +1 @@
+[{"id":"253","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["76"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"255","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"254","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"256","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"257","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"258","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["86"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"259","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["85"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"260","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["84"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"261","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["83"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"262","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"263","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"264","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"265","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"266","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"268","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"267","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"274","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["76"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"273","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"275","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"276","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"277","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}]
\ No newline at end of file
diff --git a/mutations/test_8.json b/mutations/test_8.json
new file mode 100644
index 0000000..0b2b4c6
--- /dev/null
+++ b/mutations/test_8.json
@@ -0,0 +1 @@
+[{"id":"5","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["8"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"6","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"7","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"8","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"9","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"10","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["18"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"11","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["17"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"12","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["16"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"13","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["15"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"14","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"15","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"16","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"17","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"18","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"19","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"20","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"26","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["8"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"25","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"27","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"29","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}},{"id":"28","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}}]
\ No newline at end of file
diff --git a/mutations/test_80.json b/mutations/test_80.json
new file mode 100644
index 0000000..836bc82
--- /dev/null
+++ b/mutations/test_80.json
@@ -0,0 +1 @@
+[{"id":"253","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["76"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"255","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"254","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"256","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"257","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"258","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["86"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"259","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["85"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"260","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["84"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"261","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["83"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"262","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"263","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"264","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"265","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"266","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"268","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"267","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"274","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["76"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"273","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"275","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"276","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"277","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}]
\ No newline at end of file
diff --git a/mutations/test_81.json b/mutations/test_81.json
new file mode 100644
index 0000000..836bc82
--- /dev/null
+++ b/mutations/test_81.json
@@ -0,0 +1 @@
+[{"id":"253","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["76"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"255","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"254","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"256","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"257","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"258","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["86"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"259","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["85"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"260","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["84"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"261","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["83"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"262","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"263","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"264","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"265","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"266","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"268","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"267","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"274","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["76"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"273","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"275","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"276","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"277","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}]
\ No newline at end of file
diff --git a/mutations/test_82.json b/mutations/test_82.json
new file mode 100644
index 0000000..fd366d8
--- /dev/null
+++ b/mutations/test_82.json
@@ -0,0 +1 @@
+[{"id":"253","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["76"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"255","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"254","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"256","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"257","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"258","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["86"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"259","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["85"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"260","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["84"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"261","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["83"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"262","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"263","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"264","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"265","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"266","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"268","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"267","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"269","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["82"],"coveredBy":["82","83","84","85","86"],"location":{"end":{"column":10,"line":16},"start":{"column":34,"line":13}}},{"id":"270","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 - discount)","statusReason":"expected 1113.4020618556704 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["82"],"coveredBy":["82","83","84","85","86"],"location":{"end":{"column":51,"line":14},"start":{"column":25,"line":14}}},{"id":"271","mutatorName":"ArithmeticOperator","replacement":"1 + discount","statusReason":"expected 1112.4 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["82"],"coveredBy":["82","83","84","85","86"],"location":{"end":{"column":50,"line":14},"start":{"column":38,"line":14}}},{"id":"272","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected 4976.1 to equal 5130","status":"Killed","static":false,"testsCompleted":2,"killedBy":["83"],"coveredBy":["82","83","84","85","86"],"location":{"end":{"column":24,"line":15},"start":{"column":20,"line":15}}},{"id":"274","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["76"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"273","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"275","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"276","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"277","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}]
\ No newline at end of file
diff --git a/mutations/test_83.json b/mutations/test_83.json
new file mode 100644
index 0000000..fd366d8
--- /dev/null
+++ b/mutations/test_83.json
@@ -0,0 +1 @@
+[{"id":"253","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["76"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"255","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"254","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"256","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"257","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"258","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["86"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"259","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["85"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"260","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["84"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"261","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["83"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"262","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"263","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"264","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"265","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"266","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"268","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"267","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"269","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["82"],"coveredBy":["82","83","84","85","86"],"location":{"end":{"column":10,"line":16},"start":{"column":34,"line":13}}},{"id":"270","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 - discount)","statusReason":"expected 1113.4020618556704 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["82"],"coveredBy":["82","83","84","85","86"],"location":{"end":{"column":51,"line":14},"start":{"column":25,"line":14}}},{"id":"271","mutatorName":"ArithmeticOperator","replacement":"1 + discount","statusReason":"expected 1112.4 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["82"],"coveredBy":["82","83","84","85","86"],"location":{"end":{"column":50,"line":14},"start":{"column":38,"line":14}}},{"id":"272","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected 4976.1 to equal 5130","status":"Killed","static":false,"testsCompleted":2,"killedBy":["83"],"coveredBy":["82","83","84","85","86"],"location":{"end":{"column":24,"line":15},"start":{"column":20,"line":15}}},{"id":"274","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["76"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"273","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"275","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"276","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"277","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}]
\ No newline at end of file
diff --git a/mutations/test_84.json b/mutations/test_84.json
new file mode 100644
index 0000000..fd366d8
--- /dev/null
+++ b/mutations/test_84.json
@@ -0,0 +1 @@
+[{"id":"253","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["76"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"255","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"254","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"256","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"257","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"258","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["86"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"259","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["85"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"260","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["84"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"261","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["83"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"262","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"263","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"264","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"265","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"266","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"268","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"267","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"269","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["82"],"coveredBy":["82","83","84","85","86"],"location":{"end":{"column":10,"line":16},"start":{"column":34,"line":13}}},{"id":"270","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 - discount)","statusReason":"expected 1113.4020618556704 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["82"],"coveredBy":["82","83","84","85","86"],"location":{"end":{"column":51,"line":14},"start":{"column":25,"line":14}}},{"id":"271","mutatorName":"ArithmeticOperator","replacement":"1 + discount","statusReason":"expected 1112.4 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["82"],"coveredBy":["82","83","84","85","86"],"location":{"end":{"column":50,"line":14},"start":{"column":38,"line":14}}},{"id":"272","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected 4976.1 to equal 5130","status":"Killed","static":false,"testsCompleted":2,"killedBy":["83"],"coveredBy":["82","83","84","85","86"],"location":{"end":{"column":24,"line":15},"start":{"column":20,"line":15}}},{"id":"274","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["76"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"273","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"275","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"276","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"277","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}]
\ No newline at end of file
diff --git a/mutations/test_85.json b/mutations/test_85.json
new file mode 100644
index 0000000..fd366d8
--- /dev/null
+++ b/mutations/test_85.json
@@ -0,0 +1 @@
+[{"id":"253","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["76"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"255","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"254","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"256","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"257","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"258","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["86"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"259","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["85"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"260","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["84"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"261","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["83"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"262","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"263","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"264","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"265","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"266","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"268","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"267","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"269","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["82"],"coveredBy":["82","83","84","85","86"],"location":{"end":{"column":10,"line":16},"start":{"column":34,"line":13}}},{"id":"270","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 - discount)","statusReason":"expected 1113.4020618556704 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["82"],"coveredBy":["82","83","84","85","86"],"location":{"end":{"column":51,"line":14},"start":{"column":25,"line":14}}},{"id":"271","mutatorName":"ArithmeticOperator","replacement":"1 + discount","statusReason":"expected 1112.4 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["82"],"coveredBy":["82","83","84","85","86"],"location":{"end":{"column":50,"line":14},"start":{"column":38,"line":14}}},{"id":"272","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected 4976.1 to equal 5130","status":"Killed","static":false,"testsCompleted":2,"killedBy":["83"],"coveredBy":["82","83","84","85","86"],"location":{"end":{"column":24,"line":15},"start":{"column":20,"line":15}}},{"id":"274","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["76"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"273","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"275","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"276","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"277","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}]
\ No newline at end of file
diff --git a/mutations/test_86.json b/mutations/test_86.json
new file mode 100644
index 0000000..ffed8f3
--- /dev/null
+++ b/mutations/test_86.json
@@ -0,0 +1 @@
+[{"id":"253","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["76"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"255","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"254","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"256","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"257","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"258","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["86"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"259","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["85"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"260","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["84"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"261","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["83"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"262","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"263","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"264","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"265","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"266","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"268","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"267","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"269","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["82"],"coveredBy":["82","83","84","85","86"],"location":{"end":{"column":10,"line":16},"start":{"column":34,"line":13}}},{"id":"270","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 - discount)","statusReason":"expected 1113.4020618556704 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["82"],"coveredBy":["82","83","84","85","86"],"location":{"end":{"column":51,"line":14},"start":{"column":25,"line":14}}},{"id":"271","mutatorName":"ArithmeticOperator","replacement":"1 + discount","statusReason":"expected 1112.4 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["82"],"coveredBy":["82","83","84","85","86"],"location":{"end":{"column":50,"line":14},"start":{"column":38,"line":14}}},{"id":"272","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected 4976.1 to equal 5130","status":"Killed","static":false,"testsCompleted":2,"killedBy":["83"],"coveredBy":["82","83","84","85","86"],"location":{"end":{"column":24,"line":15},"start":{"column":20,"line":15}}},{"id":"274","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["76"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"275","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"276","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"277","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}]
\ No newline at end of file
diff --git a/mutations/test_87.json b/mutations/test_87.json
new file mode 100644
index 0000000..922ca9f
--- /dev/null
+++ b/mutations/test_87.json
@@ -0,0 +1 @@
+[{"id":"278","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["87","88","89"],"location":{"end":{"column":29,"line":8},"start":{"column":27,"line":8}}},{"id":"279","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["87","88","89"],"location":{"end":{"column":6,"line":13},"start":{"column":31,"line":9}}},{"id":"280","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":3,"killedBy":["89"],"coveredBy":["87","88","89"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"281","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["87","88","89"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"282","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["87","88"],"location":{"end":{"column":10,"line":12},"start":{"column":45,"line":10}}},{"id":"283","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["87"],"coveredBy":["87"],"location":{"end":{"column":6,"line":17},"start":{"column":22,"line":15}}},{"id":"284","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["87"],"coveredBy":["87"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"285","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["87"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"286","mutatorName":"EqualityOperator","replacement":"this.hitpoints >= 0","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["87"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"287","mutatorName":"EqualityOperator","replacement":"this.hitpoints <= 0","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["87"],"coveredBy":["87"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"288","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["87","88"],"location":{"end":{"column":6,"line":21},"start":{"column":28,"line":19}}},{"id":"289","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["87"],"coveredBy":["87","88"],"location":{"end":{"column":6,"line":25},"start":{"column":32,"line":23}}},{"id":"290","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["87"],"coveredBy":["87","88"],"location":{"end":{"column":33,"line":24},"start":{"column":9,"line":24}}},{"id":"292","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["87"],"coveredBy":["87"],"location":{"end":{"column":6,"line":35},"start":{"column":22,"line":33}}},{"id":"293","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected false to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["87"],"coveredBy":["87"],"location":{"end":{"column":20,"line":34},"start":{"column":16,"line":34}}},{"id":"294","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["87"],"coveredBy":["87"],"location":{"end":{"column":6,"line":39},"start":{"column":30,"line":37}}},{"id":"296","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["87"],"location":{"end":{"column":33,"line":41},"start":{"column":9,"line":41}}},{"id":"295","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["87"],"location":{"end":{"column":6,"line":42},"start":{"column":32,"line":40}}}]
\ No newline at end of file
diff --git a/mutations/test_88.json b/mutations/test_88.json
new file mode 100644
index 0000000..58b9df0
--- /dev/null
+++ b/mutations/test_88.json
@@ -0,0 +1 @@
+[{"id":"278","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["87","88","89"],"location":{"end":{"column":29,"line":8},"start":{"column":27,"line":8}}},{"id":"279","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["87","88","89"],"location":{"end":{"column":6,"line":13},"start":{"column":31,"line":9}}},{"id":"280","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":3,"killedBy":["89"],"coveredBy":["87","88","89"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"281","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["87","88","89"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"282","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["87","88"],"location":{"end":{"column":10,"line":12},"start":{"column":45,"line":10}}},{"id":"288","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["87","88"],"location":{"end":{"column":6,"line":21},"start":{"column":28,"line":19}}},{"id":"289","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["87"],"coveredBy":["87","88"],"location":{"end":{"column":6,"line":25},"start":{"column":32,"line":23}}},{"id":"290","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["87"],"coveredBy":["87","88"],"location":{"end":{"column":33,"line":24},"start":{"column":9,"line":24}}},{"id":"298","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["88"],"coveredBy":["88"],"location":{"end":{"column":6,"line":52},"start":{"column":22,"line":50}}},{"id":"299","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected false to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["88"],"coveredBy":["88"],"location":{"end":{"column":20,"line":51},"start":{"column":16,"line":51}}},{"id":"300","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["88"],"location":{"end":{"column":6,"line":56},"start":{"column":29,"line":54}}},{"id":"301","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["88"],"location":{"end":{"column":6,"line":60},"start":{"column":32,"line":58}}},{"id":"302","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["88"],"location":{"end":{"column":33,"line":59},"start":{"column":9,"line":59}}}]
\ No newline at end of file
diff --git a/mutations/test_89.json b/mutations/test_89.json
new file mode 100644
index 0000000..dfe2f0c
--- /dev/null
+++ b/mutations/test_89.json
@@ -0,0 +1 @@
+[{"id":"278","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["87","88","89"],"location":{"end":{"column":29,"line":8},"start":{"column":27,"line":8}}},{"id":"279","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["87","88","89"],"location":{"end":{"column":6,"line":13},"start":{"column":31,"line":9}}},{"id":"280","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":3,"killedBy":["89"],"coveredBy":["87","88","89"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"281","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["87","88","89"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"303","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["89"],"coveredBy":["89"],"location":{"end":{"column":6,"line":67},"start":{"column":27,"line":62}}},{"id":"304","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["89"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"305","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["89"],"coveredBy":["89"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"306","mutatorName":"EqualityOperator","replacement":"this.hitpoints !== 2","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["89"],"coveredBy":["89"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"307","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["89"],"coveredBy":["89"],"location":{"end":{"column":10,"line":65},"start":{"column":35,"line":63}}},{"id":"308","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected '' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["89"],"coveredBy":["89"],"location":{"end":{"column":26,"line":64},"start":{"column":20,"line":64}}}]
\ No newline at end of file
diff --git a/mutations/test_9.json b/mutations/test_9.json
new file mode 100644
index 0000000..0b2b4c6
--- /dev/null
+++ b/mutations/test_9.json
@@ -0,0 +1 @@
+[{"id":"5","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["8"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"6","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"7","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"8","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"9","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"10","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["18"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"11","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["17"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"12","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["16"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"13","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["15"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"14","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"15","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"16","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"17","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"18","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"19","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"20","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"26","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["8"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"25","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"27","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"29","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}},{"id":"28","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}}]
\ No newline at end of file
diff --git a/mutations/test_90.json b/mutations/test_90.json
new file mode 100644
index 0000000..17e9225
--- /dev/null
+++ b/mutations/test_90.json
@@ -0,0 +1 @@
+[{"id":"311","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"' World' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["90"],"coveredBy":["90","91","92","93"],"location":{"end":{"column":18,"line":2},"start":{"column":11,"line":2}}},{"id":"310","mutatorName":"BlockStatement","replacement":"{}","statusReason":"'' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["90"],"coveredBy":["90","91","92","93"],"location":{"end":{"column":2,"line":4},"start":{"column":40,"line":1}}},{"id":"313","mutatorName":"BlockStatement","replacement":"{}","statusReason":"undefined == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["90"],"coveredBy":["90"],"location":{"end":{"column":2,"line":8},"start":{"column":38,"line":6}}},{"id":"312","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"'Hello ' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["90"],"coveredBy":["90","92","93"],"location":{"end":{"column":18,"line":3},"start":{"column":11,"line":3}}},{"id":"314","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"'HelloWorld' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["90"],"coveredBy":["90"],"location":{"end":{"column":54,"line":7},"start":{"column":51,"line":7}}}]
\ No newline at end of file
diff --git a/mutations/test_91.json b/mutations/test_91.json
new file mode 100644
index 0000000..427621e
--- /dev/null
+++ b/mutations/test_91.json
@@ -0,0 +1 @@
+[{"id":"311","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"' World' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["90"],"coveredBy":["90","91","92","93"],"location":{"end":{"column":18,"line":2},"start":{"column":11,"line":2}}},{"id":"310","mutatorName":"BlockStatement","replacement":"{}","statusReason":"'' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["90"],"coveredBy":["90","91","92","93"],"location":{"end":{"column":2,"line":4},"start":{"column":40,"line":1}}}]
\ No newline at end of file
diff --git a/mutations/test_92.json b/mutations/test_92.json
new file mode 100644
index 0000000..454fd42
--- /dev/null
+++ b/mutations/test_92.json
@@ -0,0 +1 @@
+[{"id":"311","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"' World' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["90"],"coveredBy":["90","91","92","93"],"location":{"end":{"column":18,"line":2},"start":{"column":11,"line":2}}},{"id":"310","mutatorName":"BlockStatement","replacement":"{}","statusReason":"'' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["90"],"coveredBy":["90","91","92","93"],"location":{"end":{"column":2,"line":4},"start":{"column":40,"line":1}}},{"id":"312","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"'Hello ' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["90"],"coveredBy":["90","92","93"],"location":{"end":{"column":18,"line":3},"start":{"column":11,"line":3}}}]
\ No newline at end of file
diff --git a/mutations/test_93.json b/mutations/test_93.json
new file mode 100644
index 0000000..454fd42
--- /dev/null
+++ b/mutations/test_93.json
@@ -0,0 +1 @@
+[{"id":"311","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"' World' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["90"],"coveredBy":["90","91","92","93"],"location":{"end":{"column":18,"line":2},"start":{"column":11,"line":2}}},{"id":"310","mutatorName":"BlockStatement","replacement":"{}","statusReason":"'' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["90"],"coveredBy":["90","91","92","93"],"location":{"end":{"column":2,"line":4},"start":{"column":40,"line":1}}},{"id":"312","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"'Hello ' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["90"],"coveredBy":["90","92","93"],"location":{"end":{"column":18,"line":3},"start":{"column":11,"line":3}}}]
\ No newline at end of file
diff --git a/mutations/test_94.json b/mutations/test_94.json
new file mode 100644
index 0000000..5a07482
--- /dev/null
+++ b/mutations/test_94.json
@@ -0,0 +1 @@
+[{"id":"315","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["94"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"317","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"316","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"318","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"319","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"320","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["104"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"321","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["103"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"322","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["102"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"323","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["101"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"324","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"326","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"325","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"327","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"329","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"328","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"330","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"336","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["94"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"335","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"337","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"338","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"339","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}]
\ No newline at end of file
diff --git a/mutations/test_95.json b/mutations/test_95.json
new file mode 100644
index 0000000..5a07482
--- /dev/null
+++ b/mutations/test_95.json
@@ -0,0 +1 @@
+[{"id":"315","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["94"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"317","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"316","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"318","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"319","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"320","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["104"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"321","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["103"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"322","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["102"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"323","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["101"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"324","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"326","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"325","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"327","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"329","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"328","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"330","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"336","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["94"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"335","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"337","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"338","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"339","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}]
\ No newline at end of file
diff --git a/mutations/test_96.json b/mutations/test_96.json
new file mode 100644
index 0000000..5a07482
--- /dev/null
+++ b/mutations/test_96.json
@@ -0,0 +1 @@
+[{"id":"315","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["94"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"317","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"316","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"318","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"319","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"320","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["104"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"321","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["103"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"322","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["102"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"323","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["101"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"324","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"326","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"325","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"327","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"329","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"328","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"330","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"336","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["94"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"335","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"337","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"338","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"339","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}]
\ No newline at end of file
diff --git a/mutations/test_97.json b/mutations/test_97.json
new file mode 100644
index 0000000..5a07482
--- /dev/null
+++ b/mutations/test_97.json
@@ -0,0 +1 @@
+[{"id":"315","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["94"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"317","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"316","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"318","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"319","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"320","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["104"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"321","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["103"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"322","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["102"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"323","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["101"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"324","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"326","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"325","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"327","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"329","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"328","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"330","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"336","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["94"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"335","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"337","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"338","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"339","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}]
\ No newline at end of file
diff --git a/mutations/test_98.json b/mutations/test_98.json
new file mode 100644
index 0000000..5a07482
--- /dev/null
+++ b/mutations/test_98.json
@@ -0,0 +1 @@
+[{"id":"315","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["94"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"317","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"316","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"318","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"319","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"320","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["104"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"321","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["103"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"322","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["102"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"323","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["101"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"324","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"326","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"325","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"327","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"329","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"328","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"330","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"336","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["94"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"335","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"337","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"338","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"339","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}]
\ No newline at end of file
diff --git a/mutations/test_99.json b/mutations/test_99.json
new file mode 100644
index 0000000..5a07482
--- /dev/null
+++ b/mutations/test_99.json
@@ -0,0 +1 @@
+[{"id":"315","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["94"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"317","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"316","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"318","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"319","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"320","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["104"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"321","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["103"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"322","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["102"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"323","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["101"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"324","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"326","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"325","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"327","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"329","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"328","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"330","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"336","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["94"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"335","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"337","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"338","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"339","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}]
\ No newline at end of file
diff --git a/package.json b/package.json
index e866e12..e27bf7e 100644
--- a/package.json
+++ b/package.json
@@ -5,9 +5,9 @@
   "type": "module",
   "main": "src/index.js",
   "scripts": {
-    "test": "mocha ./dist/test",
-    "test:coverage": "nyc --reporter=text mocha ./dist/test",
-    "test:new-names": "stryker run",
+    "test": "mocha ./dist/test/folder_1/",
+    "test:coverage": "nyc --reporter=text mocha ./dist/test/folder_1/",
+    "test:stryker": "stryker run",
     "build": "tsc"
   },
   "private": true,
diff --git a/reports/mutation/mutation.html b/reports/mutation/mutation.html
index 1cd1921..08deee8 100644
--- a/reports/mutation/mutation.html
+++ b/reports/mutation/mutation.html
@@ -469,7 +469,7 @@
     </mutation-test-report-app>
     <script>
       const app = document.querySelector('mutation-test-report-app');
-      app.report = {"files":{"src/3_kata.ts":{"language":"typescript","mutants":[{"id":"43","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":31},"start":{"column":31,"line":29}}},{"id":"49","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":48},"start":{"column":31,"line":46}}},{"id":"61","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":26,"line":66},"start":{"column":16,"line":66}}},{"id":"30","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["15","16","17"],"location":{"end":{"column":29,"line":8},"start":{"column":27,"line":8}}},{"id":"32","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":3,"killedBy":["17"],"coveredBy":["15","16","17"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"31","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["15","16","17"],"location":{"end":{"column":6,"line":13},"start":{"column":31,"line":9}}},{"id":"33","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["15","16","17"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"34","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["15","16"],"location":{"end":{"column":10,"line":12},"start":{"column":45,"line":10}}},{"id":"35","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["15"],"coveredBy":["15"],"location":{"end":{"column":6,"line":17},"start":{"column":22,"line":15}}},{"id":"36","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["15"],"coveredBy":["15"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"37","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["15"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"38","mutatorName":"EqualityOperator","replacement":"this.hitpoints >= 0","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["15"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"39","mutatorName":"EqualityOperator","replacement":"this.hitpoints <"+"= 0","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["15"],"coveredBy":["15"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"40","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["15","16"],"location":{"end":{"column":6,"line":21},"start":{"column":28,"line":19}}},{"id":"41","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["15"],"coveredBy":["15","16"],"location":{"end":{"column":6,"line":25},"start":{"column":32,"line":23}}},{"id":"42","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["15"],"coveredBy":["15","16"],"location":{"end":{"column":33,"line":24},"start":{"column":9,"line":24}}},{"id":"44","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["15"],"coveredBy":["15"],"location":{"end":{"column":6,"line":35},"start":{"column":22,"line":33}}},{"id":"45","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected false to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["15"],"coveredBy":["15"],"location":{"end":{"column":20,"line":34},"start":{"column":16,"line":34}}},{"id":"46","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["15"],"coveredBy":["15"],"location":{"end":{"column":6,"line":39},"start":{"column":30,"line":37}}},{"id":"47","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["15"],"location":{"end":{"column":6,"line":42},"start":{"column":32,"line":40}}},{"id":"48","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["15"],"location":{"end":{"column":33,"line":41},"start":{"column":9,"line":41}}},{"id":"50","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["16"],"coveredBy":["16"],"location":{"end":{"column":6,"line":52},"start":{"column":22,"line":50}}},{"id":"51","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected false to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["16"],"coveredBy":["16"],"location":{"end":{"column":20,"line":51},"start":{"column":16,"line":51}}},{"id":"52","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["16"],"location":{"end":{"column":6,"line":56},"start":{"column":29,"line":54}}},{"id":"53","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["16"],"location":{"end":{"column":6,"line":60},"start":{"column":32,"line":58}}},{"id":"54","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["16"],"location":{"end":{"column":33,"line":59},"start":{"column":9,"line":59}}},{"id":"56","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["17"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"55","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["17"],"coveredBy":["17"],"location":{"end":{"column":6,"line":67},"start":{"column":27,"line":62}}},{"id":"57","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["17"],"coveredBy":["17"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"58","mutatorName":"EqualityOperator","replacement":"this.hitpoints !== 2","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["17"],"coveredBy":["17"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"59","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["17"],"coveredBy":["17"],"location":{"end":{"column":10,"line":65},"start":{"column":35,"line":63}}},{"id":"60","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected '' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["17"],"coveredBy":["17"],"location":{"end":{"column":26,"line":64},"start":{"column":20,"line":64}}}],"source":"﻿interface IUnit {\r\n    attack(unit: IUnit): void;\r\n    alive(): boolean;\r\n    hurt(damage: number): void;\r\n}\r\nexport class Zergling implements IUnit {\r\n    hitpoints = 1;\r\n    closeUnits: IUnit[] = [];\r\n    attack(unit: IUnit): void {\r\n        if (this.closeUnits.includes(unit)) {\r\n            unit.hurt(1);\r\n        }\r\n    }\r\n\r\n    alive(): boolean {\r\n        return this.hitpoints > 0;\r\n    }\r\n\r\n    run(unit: IUnit): void {\r\n        this.closeUnits.push(unit);\r\n    }\r\n\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n}\r\nexport class Marine implements IUnit {\r\n    hitpoints = 2;\r\n    attack(unit: IUnit): void {\r\n        this.shoot(unit);\r\n    }\r\n\r\n    alive(): boolean {\r\n        return true;\r\n    }\r\n\r\n    shoot(unit: IUnit): void {\r\n        unit.hurt(1);\r\n    }\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n}\r\nexport class Zealot implements IUnit {\r\n    hitpoints = 2;\r\n    attack(unit: IUnit): void {\r\n        this.claw(unit);\r\n    }\r\n\r\n    alive(): boolean {\r\n        return true;\r\n    }\r\n\r\n    claw(unit: IUnit): void {\r\n        unit.hurt(2);\r\n    }\r\n\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n\r\n    hitpointBar(): string {\r\n        if (this.hitpoints === 2) {\r\n            return \"full\";\r\n        }\r\n        return \"not full\";\r\n    }\r\n}"},"src/1_kata.ts":{"language":"typescript","mutants":[{"id":"1","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"' World' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0","1","2","3"],"location":{"end":{"column":18,"line":2},"start":{"column":11,"line":2}}},{"id":"2","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"'Hello ' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0","2","3"],"location":{"end":{"column":18,"line":3},"start":{"column":11,"line":3}}},{"id":"3","mutatorName":"BlockStatement","replacement":"{}","statusReason":"undefined == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0"],"location":{"end":{"column":2,"line":8},"start":{"column":38,"line":6}}},{"id":"4","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"'HelloWorld' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0"],"location":{"end":{"column":54,"line":7},"start":{"column":51,"line":7}}},{"id":"0","mutatorName":"BlockStatement","replacement":"{}","statusReason":"'' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0","1","2","3"],"location":{"end":{"column":2,"line":4},"start":{"column":40,"line":1}}}],"source":"export function* helloWorldGenerator() {\n    yield 'Hello';\n    yield 'World';\n}\n\nexport default function HelloWorld() {\n    return Array.from(helloWorldGenerator()).join(' ');\n}\n"},"src/2_kata.ts":{"language":"typescript","mutants":[{"id":"5","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["4"],"coveredBy":["4","5","6","7","8","9","10","11","12","13","14"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"6","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["5"],"coveredBy":["4","5","6","7","8","9","10","11","12","13","14"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"7","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["5"],"coveredBy":["4","5","6","7","8","9","10","11","12","13","14"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"8","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["5"],"coveredBy":["4","5","6","7","8","9","10","11","12","13","14"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"9","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["10"],"coveredBy":["4","5","6","7","8","9","10","11","12","13","14"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"10","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["14"],"coveredBy":["4","5","6","7","8","9","10","11","12","13","14"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"12","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["12"],"coveredBy":["4","5","6","7","8","9","10","11","12","13","14"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"13","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["11"],"coveredBy":["4","5","6","7","8","9","10","11","12","13","14"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"11","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["13"],"coveredBy":["4","5","6","7","8","9","10","11","12","13","14"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"14","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["10"],"coveredBy":["4","5","6","7","8","9","10","11","12","13","14"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"15","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["10"],"coveredBy":["4","5","6","7","8","9","10","11","12","13","14"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"16","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["10"],"coveredBy":["4","5","6","7","8","9","10","11","12","13","14"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"17","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["5"],"coveredBy":["4","5","6","7","8","9","10","11","12","13","14"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"18","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["10"],"coveredBy":["4","5","6","7","8","9","10","11","12","13","14"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"19","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["10"],"coveredBy":["4","5","6","7","8","9","10","11","12","13","14"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"20","mutatorName":"EqualityOperator","replacement":"totalCost <"+" volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["5"],"coveredBy":["4","5","6","7","8","9","10","11","12","13","14"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"22","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 - discount)","statusReason":"expected 1113.4020618556704 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["10"],"coveredBy":["10","11","12","13","14"],"location":{"end":{"column":51,"line":14},"start":{"column":25,"line":14}}},{"id":"21","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["10"],"coveredBy":["10","11","12","13","14"],"location":{"end":{"column":10,"line":16},"start":{"column":34,"line":13}}},{"id":"23","mutatorName":"ArithmeticOperator","replacement":"1 + discount","statusReason":"expected 1112.4 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["10"],"coveredBy":["10","11","12","13","14"],"location":{"end":{"column":50,"line":14},"start":{"column":38,"line":14}}},{"id":"24","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected 4976.1 to equal 5130","status":"Killed","static":false,"testsCompleted":2,"killedBy":["11"],"coveredBy":["10","11","12","13","14"],"location":{"end":{"column":24,"line":15},"start":{"column":20,"line":15}}},{"id":"26","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["4"],"coveredBy":["4","5","6","7","8","9","10","11","12","13","14"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"25","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["10"],"coveredBy":["4","5","6","7","8","9","10","11","12","13"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"27","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["5"],"coveredBy":["4","5","6","7","8","9","10","11","12","13","14"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"28","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["5"],"coveredBy":["4","5","6","7","8","9","10","11","12","13","14"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"29","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["5"],"coveredBy":["4","5","6","7","8","9","10","11","12","13","14"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}],"source":"﻿\r\n\r\nexport const input = (commands) => {\r\n    let totalCost = +commands[0] * +commands[1];\r\n    const volumeDiscount = [\r\n        { volume: 50000, discount: 0.15 },\r\n        { volume: 10000, discount: 0.10 },\r\n        { volume: 7000, discount: 0.07 },\r\n        { volume: 5000, discount: 0.05 },\r\n        { volume: 1000, discount: 0.03 },\r\n    ]\r\n    volumeDiscount.some(({volume, discount}, idx) => {\r\n        if (totalCost >= volume) {\r\n            totalCost = totalCost * (1 - discount)\r\n            return true;\r\n        }\r\n        return false;\r\n    })\r\n    const stateTaxes = {\r\n        UT: 6.85,\r\n        NV: 8.00,\r\n        TX: 6.25,\r\n        AL: 4.00,\r\n        CA: 8.25,\r\n    }\r\n    return totalCost * (1 + stateTaxes[commands[2]] / 100);\r\n}"}},"schemaVersion":"1.0","thresholds":{"high":80,"low":60,"break":null},"testFiles":{"dist/test/test_kata_1.spec.js":{"tests":[{"id":"0","name":"hello world kata should return hello world"},{"id":"1","name":"hello world kata should use a generator function that returns hello"},{"id":"2","name":"hello world kata should use a generator function that returns world on second call"},{"id":"3","name":"hello world kata should use a generator function that returns done after three calls"}],"source":"import assert from \"node:assert\";\nimport HelloWorld, { helloWorldGenerator } from '../src/1_kata.js';\ndescribe('hello world kata', function () {\n    it('should return hello world', function () {\n        assert.equal(HelloWorld(), \"Hello World\");\n    });\n    it('should use a generator function that returns hello', () => {\n        let firstCall = helloWorldGenerator().next();\n        assert.equal(firstCall.value, 'Hello');\n        assert.equal(firstCall.done, false);\n    });\n    it('should use a generator function that returns world on second call', () => {\n        let sequence = helloWorldGenerator();\n        sequence.next();\n        let secondCall = sequence.next();\n        assert.equal(secondCall.value, 'World');\n        assert.equal(secondCall.done, false);\n    });\n    it('should use a generator function that returns done after three calls', () => {\n        let sequence = helloWorldGenerator();\n        const firstCall = sequence.next();\n        const secondCall = sequence.next();\n        const thirdCall = sequence.next();\n        assert.equal(thirdCall.done, true);\n    });\n});\n"},"dist/test/test_kata_2.spec.js":{"tests":[{"id":"4","name":"kata two given 0 items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"5","name":"kata two given 1 item and a NV state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"6","name":"kata two given 1 item and a UT state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"7","name":"kata two given 1 item and a TX state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"8","name":"kata two given 1 item and a AL state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"9","name":"kata two given 1 item and a CA state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"10","name":"kata two given 1000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"11","name":"kata two given 5000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"12","name":"kata two given 7000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"13","name":"kata two given 10000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"14","name":"kata two given 50000 of items can accept an input of how many items, cost per item, state code, and calculate total value"}],"source":"import { assert } from 'chai';\nimport { input } from \"../src/2_kata.js\";\ndescribe('kata two', function () {\n    it('given 0 items can accept an input of how many items, cost per item, state code, and calculate total value', function () {\n        const commands = [\n            \"0\",\n            \"5\",\n            \"NV\"\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, 0);\n    });\n    [\n        { state: \"NV\", multiplier: 1.08 },\n        { state: \"UT\", multiplier: 1.0685 },\n        { state: \"TX\", multiplier: 1.0625 },\n        { state: \"AL\", multiplier: 1.0400 },\n        { state: \"CA\", multiplier: 1.0825 },\n    ].forEach(({ state, multiplier }) => it(`given 1 item and a ${state} state code can accept an input of how many items, cost per item, state code, ` +\n        'and calculate total value', function () {\n        const commands = [\n            \"1\",\n            \"5\",\n            state\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, 5 * multiplier);\n    }));\n    [\n        { amount: \"1000\", discount: 0.03 },\n        { amount: \"5000\", discount: 0.05 },\n        { amount: \"7000\", discount: 0.07 },\n        { amount: \"10000\", discount: 0.10 },\n        { amount: \"50000\", discount: 0.15 },\n    ].forEach(({ amount, discount }) => it(`given ${amount} of items can accept an input of how many items, cost per item, state code, and calculate total value`, function () {\n        const commands = [\n            \"1\",\n            amount,\n            \"NV\"\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, +amount * (1 - discount) * (1.08));\n    }));\n});\n"},"dist/test/test_kata_3.spec.js":{"tests":[{"id":"15","name":"can do battle the vile zerg zergling will battle the epic terran marine"},{"id":"16","name":"can do battle the vile zerg zergling will battle the epic protos zealot"},{"id":"17","name":"can do battle the vile zerg zergling cannot hit a unit it has not run at"}],"source":"import { assert } from \"chai\";\nimport { Zergling, Marine, Zealot } from '../src/3_kata.js';\ndescribe('can do battle', () => {\n    it('the vile zerg zergling will battle the epic terran marine', () => {\n        const marine = new Marine();\n        const zergling = new Zergling();\n        zergling.run(marine);\n        marine.shoot(zergling);\n        zergling.attack(marine);\n        marine.shoot(zergling);\n        assert.equal(marine.alive(), true);\n        assert.equal(zergling.alive(), false);\n    });\n    it('the vile zerg zergling will battle the epic protos zealot', () => {\n        const zealot = new Zealot();\n        const zergling = new Zergling();\n        zergling.run(zealot);\n        zealot.claw(zergling);\n        zergling.attack(zealot);\n        zealot.claw(zergling);\n        assert.equal(zealot.alive(), true);\n    });\n    it('the vile zerg zergling cannot hit a unit it has not run at', () => {\n        const zealot = new Zealot();\n        const zergling = new Zergling();\n        zergling.attack(zealot);\n        assert.equal(zealot.hitpointBar(), \"full\");\n    });\n});\n"}},"projectRoot":"C:\\Users\\evano\\WebstormProjects\\JavascriptKata","config":{"$schema":"./node_modules/@stryker-mutator/core/schema/stryker-schema.json","_comment":"This config was generated using 'stryker init'. Please take a look at: https://stryker-mutator.io/docs/stryker-js/configuration/ for more information.","packageManager":"npm","reporters":["html","json","clear-text","progress"],"tsconfigFile":"tsconfig.json","testRunner":"mocha","testRunner_comment":"Take a look at https://stryker-mutator.io/docs/stryker-js/mocha-runner for information about the mocha plugin.","coverageAnalysis":"perTest","buildCommand":"npm run build","mochaOptions":{"spec":["dist/**/*.spec.js"]},"allowConsoleColors":true,"checkers":[],"checkerNodeArgs":[],"commandRunner":{"command":"npm test"},"clearTextReporter":{"allowColor":true,"allowEmojis":false,"logTests":true,"maxTestsToLog":3,"reportTests":true,"reportMutants":true,"reportScoreTable":true,"skipFull":false},"dashboard":{"baseUrl":"https://dashboard.stryker-mutator.io/api/reports","reportType":"full"},"dryRunOnly":false,"eventReporter":{"baseDir":"reports/mutation/events"},"ignorePatterns":[],"ignoreStatic":false,"incremental":false,"incrementalFile":"reports/stryker-incremental.json","force":false,"fileLogLevel":"off","inPlace":false,"logLevel":"info","maxConcurrentTestRunners":9007199254740991,"maxTestRunnerReuse":0,"mutate":["{src,lib}/**/!(*.+(s|S)pec|*.+(t|T)est).+(cjs|mjs|js|ts|mts|cts|jsx|tsx|html|vue|svelte)","!{src,lib}/**/__tests__/**/*.+(cjs|mjs|js|ts|mts|cts|jsx|tsx|html|vue|svelte)"],"mutator":{"plugins":null,"excludedMutations":[]},"plugins":["@stryker-mutator/*"],"appendPlugins":[],"htmlReporter":{"fileName":"reports/mutation/mutation.html"},"jsonReporter":{"fileName":"reports/mutation/mutation.json"},"disableTypeChecks":true,"symlinkNodeModules":true,"tempDirName":".stryker-tmp","cleanTempDir":true,"testRunnerNodeArgs":[],"thresholds":{"high":80,"low":60,"break":null},"timeoutFactor":1.5,"timeoutMS":5000,"dryRunTimeoutMinutes":5,"warnings":true,"disableBail":false,"allowEmpty":false,"ignorers":[]},"framework":{"name":"StrykerJS","version":"9.0.1","branding":{"homepageUrl":"https://stryker-mutator.io","imageUrl":"data:image/svg+xml;utf8,%3Csvg viewBox='0 0 1458 1458' xmlns='http://www.w3.org/2000/svg' fill-rule='evenodd' clip-rule='evenodd' stroke-linejoin='round' stroke-miterlimit='2'%3E%3Cpath fill='none' d='M0 0h1458v1458H0z'/%3E%3CclipPath id='a'%3E%3Cpath d='M0 0h1458v1458H0z'/%3E%3C/clipPath%3E%3Cg clip-path='url(%23a)'%3E%3Cpath d='M1458 729c0 402.655-326.345 729-729 729S0 1131.655 0 729C0 326.445 326.345 0 729 0s729 326.345 729 729' fill='%23e74c3c' fill-rule='nonzero'/%3E%3Cpath d='M778.349 1456.15L576.6 1254.401l233-105 85-78.668v-64.332l-257-257-44-187-50-208 251.806-82.793L1076.6 389.401l380.14 379.15c-19.681 367.728-311.914 663.049-678.391 687.599z' fill-opacity='.3'/%3E%3Cpath d='M753.4 329.503c41.79 0 74.579 7.83 97.925 25.444 23.571 18.015 41.69 43.956 55.167 77.097l11.662 28.679 165.733-58.183-14.137-32.13c-26.688-60.655-64.896-108.61-114.191-144.011-49.329-35.423-117.458-54.302-204.859-54.302-50.78 0-95.646 7.376-134.767 21.542-40.093 14.671-74.09 34.79-102.239 60.259-28.84 26.207-50.646 57.06-65.496 92.701-14.718 35.052-22.101 72.538-22.101 112.401 0 72.536 20.667 133.294 61.165 182.704 38.624 47.255 98.346 88.037 179.861 121.291 42.257 17.475 78.715 33.125 109.227 46.994 27.193 12.361 49.294 26.124 66.157 41.751 15.309 14.186 26.497 30.584 33.63 49.258 7.721 20.214 11.16 45.69 11.16 76.402 0 28.021-4.251 51.787-13.591 71.219-8.832 18.374-20.171 33.178-34.523 44.219-14.787 11.374-31.193 19.591-49.393 24.466-19.68 5.359-39.14 7.993-58.69 7.993-29.359 0-54.387-3.407-75.182-10.747-20.112-7.013-37.144-16.144-51.259-27.486-13.618-11.009-24.971-23.766-33.744-38.279-9.64-15.8-17.272-31.924-23.032-48.408l-10.965-31.376-161.669 60.585 10.734 30.124c10.191 28.601 24.197 56.228 42.059 82.748 18.208 27.144 41.322 51.369 69.525 72.745 27.695 21.075 60.904 38.218 99.481 51.041 37.777 12.664 82.004 19.159 132.552 19.159 49.998 0 95.818-8.321 137.611-24.622 42.228-16.471 78.436-38.992 108.835-67.291 30.719-28.597 54.631-62.103 71.834-100.642 17.263-38.56 25.923-79.392 25.923-122.248 0-54.339-8.368-100.37-24.208-138.32-16.29-38.759-38.252-71.661-65.948-98.797-26.965-26.418-58.269-48.835-93.858-67.175-33.655-17.241-69.196-33.11-106.593-47.533-35.934-13.429-65.822-26.601-89.948-39.525-22.153-11.868-40.009-24.21-53.547-37.309-11.429-11.13-19.83-23.678-24.718-37.664-5.413-15.49-7.98-33.423-7.98-53.577 0-40.883 11.293-71.522 37.086-90.539 28.443-20.825 64.985-30.658 109.311-30.658z' fill='%23f1c40f' fill-rule='nonzero'/%3E%3Cpath d='M720 0h18v113h-18zM1458 738v-18h-113v18h113zM720 1345h18v113h-18zM113 738v-18H0v18h113z'/%3E%3C/g%3E%3C/svg%3E"},"dependencies":{"@stryker-mutator/mocha-runner":"9.0.1","mocha":"11.7.1","typescript":"5.8.3"}}};
+      app.report = {"files":{"src/folder_1/12_kata.ts":{"language":"typescript","mutants":[{"id":"43","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":31},"start":{"column":31,"line":29}}},{"id":"49","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":48},"start":{"column":31,"line":46}}},{"id":"61","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":26,"line":66},"start":{"column":16,"line":66}}},{"id":"31","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["19","20","21"],"location":{"end":{"column":6,"line":13},"start":{"column":31,"line":9}}},{"id":"30","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["19","20","21"],"location":{"end":{"column":29,"line":8},"start":{"column":27,"line":8}}},{"id":"33","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["19","20","21"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"32","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":3,"killedBy":["21"],"coveredBy":["19","20","21"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"35","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["19"],"coveredBy":["19"],"location":{"end":{"column":6,"line":17},"start":{"column":22,"line":15}}},{"id":"34","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["19","20"],"location":{"end":{"column":10,"line":12},"start":{"column":45,"line":10}}},{"id":"36","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["19"],"coveredBy":["19"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"37","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["19"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"38","mutatorName":"EqualityOperator","replacement":"this.hitpoints >= 0","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["19"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"40","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["19","20"],"location":{"end":{"column":6,"line":21},"start":{"column":28,"line":19}}},{"id":"39","mutatorName":"EqualityOperator","replacement":"this.hitpoints <"+"= 0","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["19"],"coveredBy":["19"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"41","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["19"],"coveredBy":["19","20"],"location":{"end":{"column":6,"line":25},"start":{"column":32,"line":23}}},{"id":"42","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["19"],"coveredBy":["19","20"],"location":{"end":{"column":33,"line":24},"start":{"column":9,"line":24}}},{"id":"44","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["19"],"coveredBy":["19"],"location":{"end":{"column":6,"line":35},"start":{"column":22,"line":33}}},{"id":"46","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["19"],"coveredBy":["19"],"location":{"end":{"column":6,"line":39},"start":{"column":30,"line":37}}},{"id":"45","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected false to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["19"],"coveredBy":["19"],"location":{"end":{"column":20,"line":34},"start":{"column":16,"line":34}}},{"id":"47","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["19"],"location":{"end":{"column":6,"line":42},"start":{"column":32,"line":40}}},{"id":"50","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["20"],"coveredBy":["20"],"location":{"end":{"column":6,"line":52},"start":{"column":22,"line":50}}},{"id":"48","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["19"],"location":{"end":{"column":33,"line":41},"start":{"column":9,"line":41}}},{"id":"51","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected false to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["20"],"coveredBy":["20"],"location":{"end":{"column":20,"line":51},"start":{"column":16,"line":51}}},{"id":"52","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["20"],"location":{"end":{"column":6,"line":56},"start":{"column":29,"line":54}}},{"id":"53","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["20"],"location":{"end":{"column":6,"line":60},"start":{"column":32,"line":58}}},{"id":"54","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["20"],"location":{"end":{"column":33,"line":59},"start":{"column":9,"line":59}}},{"id":"55","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["21"],"coveredBy":["21"],"location":{"end":{"column":6,"line":67},"start":{"column":27,"line":62}}},{"id":"56","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["21"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"57","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["21"],"coveredBy":["21"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"58","mutatorName":"EqualityOperator","replacement":"this.hitpoints !== 2","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["21"],"coveredBy":["21"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"59","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["21"],"coveredBy":["21"],"location":{"end":{"column":10,"line":65},"start":{"column":35,"line":63}}},{"id":"60","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected '' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["21"],"coveredBy":["21"],"location":{"end":{"column":26,"line":64},"start":{"column":20,"line":64}}}],"source":"﻿interface IUnit {\r\n    attack(unit: IUnit): void;\r\n    alive(): boolean;\r\n    hurt(damage: number): void;\r\n}\r\nexport class Zergling implements IUnit {\r\n    hitpoints = 1;\r\n    closeUnits: IUnit[] = [];\r\n    attack(unit: IUnit): void {\r\n        if (this.closeUnits.includes(unit)) {\r\n            unit.hurt(1);\r\n        }\r\n    }\r\n\r\n    alive(): boolean {\r\n        return this.hitpoints > 0;\r\n    }\r\n\r\n    run(unit: IUnit): void {\r\n        this.closeUnits.push(unit);\r\n    }\r\n\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n}\r\nexport class Marine implements IUnit {\r\n    hitpoints = 2;\r\n    attack(unit: IUnit): void {\r\n        this.shoot(unit);\r\n    }\r\n\r\n    alive(): boolean {\r\n        return true;\r\n    }\r\n\r\n    shoot(unit: IUnit): void {\r\n        unit.hurt(1);\r\n    }\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n}\r\nexport class Zealot implements IUnit {\r\n    hitpoints = 2;\r\n    attack(unit: IUnit): void {\r\n        this.claw(unit);\r\n    }\r\n\r\n    alive(): boolean {\r\n        return true;\r\n    }\r\n\r\n    claw(unit: IUnit): void {\r\n        unit.hurt(2);\r\n    }\r\n\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n\r\n    hitpointBar(): string {\r\n        if (this.hitpoints === 2) {\r\n            return \"full\";\r\n        }\r\n        return \"not full\";\r\n    }\r\n}"},"src/folder_1/15_kata.ts":{"language":"typescript","mutants":[{"id":"105","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":31},"start":{"column":31,"line":29}}},{"id":"111","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":48},"start":{"column":31,"line":46}}},{"id":"123","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":26,"line":66},"start":{"column":16,"line":66}}},{"id":"92","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["37","38","39"],"location":{"end":{"column":29,"line":8},"start":{"column":27,"line":8}}},{"id":"93","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["37","38","39"],"location":{"end":{"column":6,"line":13},"start":{"column":31,"line":9}}},{"id":"94","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":3,"killedBy":["39"],"coveredBy":["37","38","39"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"95","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["37","38","39"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"97","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["37"],"coveredBy":["37"],"location":{"end":{"column":6,"line":17},"start":{"column":22,"line":15}}},{"id":"96","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["37","38"],"location":{"end":{"column":10,"line":12},"start":{"column":45,"line":10}}},{"id":"98","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["37"],"coveredBy":["37"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"99","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["37"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"100","mutatorName":"EqualityOperator","replacement":"this.hitpoints >= 0","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["37"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"101","mutatorName":"EqualityOperator","replacement":"this.hitpoints <"+"= 0","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["37"],"coveredBy":["37"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"102","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["37","38"],"location":{"end":{"column":6,"line":21},"start":{"column":28,"line":19}}},{"id":"103","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["37"],"coveredBy":["37","38"],"location":{"end":{"column":6,"line":25},"start":{"column":32,"line":23}}},{"id":"106","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["37"],"coveredBy":["37"],"location":{"end":{"column":6,"line":35},"start":{"column":22,"line":33}}},{"id":"104","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["37"],"coveredBy":["37","38"],"location":{"end":{"column":33,"line":24},"start":{"column":9,"line":24}}},{"id":"107","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected false to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["37"],"coveredBy":["37"],"location":{"end":{"column":20,"line":34},"start":{"column":16,"line":34}}},{"id":"108","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["37"],"coveredBy":["37"],"location":{"end":{"column":6,"line":39},"start":{"column":30,"line":37}}},{"id":"109","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["37"],"location":{"end":{"column":6,"line":42},"start":{"column":32,"line":40}}},{"id":"110","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["37"],"location":{"end":{"column":33,"line":41},"start":{"column":9,"line":41}}},{"id":"112","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["38"],"coveredBy":["38"],"location":{"end":{"column":6,"line":52},"start":{"column":22,"line":50}}},{"id":"113","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected false to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["38"],"coveredBy":["38"],"location":{"end":{"column":20,"line":51},"start":{"column":16,"line":51}}},{"id":"114","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["38"],"location":{"end":{"column":6,"line":56},"start":{"column":29,"line":54}}},{"id":"115","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["38"],"location":{"end":{"column":6,"line":60},"start":{"column":32,"line":58}}},{"id":"116","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["38"],"location":{"end":{"column":33,"line":59},"start":{"column":9,"line":59}}},{"id":"117","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["39"],"coveredBy":["39"],"location":{"end":{"column":6,"line":67},"start":{"column":27,"line":62}}},{"id":"118","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["39"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"119","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["39"],"coveredBy":["39"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"120","mutatorName":"EqualityOperator","replacement":"this.hitpoints !== 2","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["39"],"coveredBy":["39"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"121","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["39"],"coveredBy":["39"],"location":{"end":{"column":10,"line":65},"start":{"column":35,"line":63}}},{"id":"122","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected '' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["39"],"coveredBy":["39"],"location":{"end":{"column":26,"line":64},"start":{"column":20,"line":64}}}],"source":"﻿interface IUnit {\r\n    attack(unit: IUnit): void;\r\n    alive(): boolean;\r\n    hurt(damage: number): void;\r\n}\r\nexport class Zergling implements IUnit {\r\n    hitpoints = 1;\r\n    closeUnits: IUnit[] = [];\r\n    attack(unit: IUnit): void {\r\n        if (this.closeUnits.includes(unit)) {\r\n            unit.hurt(1);\r\n        }\r\n    }\r\n\r\n    alive(): boolean {\r\n        return this.hitpoints > 0;\r\n    }\r\n\r\n    run(unit: IUnit): void {\r\n        this.closeUnits.push(unit);\r\n    }\r\n\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n}\r\nexport class Marine implements IUnit {\r\n    hitpoints = 2;\r\n    attack(unit: IUnit): void {\r\n        this.shoot(unit);\r\n    }\r\n\r\n    alive(): boolean {\r\n        return true;\r\n    }\r\n\r\n    shoot(unit: IUnit): void {\r\n        unit.hurt(1);\r\n    }\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n}\r\nexport class Zealot implements IUnit {\r\n    hitpoints = 2;\r\n    attack(unit: IUnit): void {\r\n        this.claw(unit);\r\n    }\r\n\r\n    alive(): boolean {\r\n        return true;\r\n    }\r\n\r\n    claw(unit: IUnit): void {\r\n        unit.hurt(2);\r\n    }\r\n\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n\r\n    hitpointBar(): string {\r\n        if (this.hitpoints === 2) {\r\n            return \"full\";\r\n        }\r\n        return \"not full\";\r\n    }\r\n}"},"src/folder_1/18_kata.ts":{"language":"typescript","mutants":[{"id":"167","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":31},"start":{"column":31,"line":29}}},{"id":"173","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":48},"start":{"column":31,"line":46}}},{"id":"185","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":26,"line":66},"start":{"column":16,"line":66}}},{"id":"154","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["55","56","57"],"location":{"end":{"column":29,"line":8},"start":{"column":27,"line":8}}},{"id":"155","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["55","56","57"],"location":{"end":{"column":6,"line":13},"start":{"column":31,"line":9}}},{"id":"156","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":3,"killedBy":["57"],"coveredBy":["55","56","57"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"157","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["55","56","57"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"158","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["55","56"],"location":{"end":{"column":10,"line":12},"start":{"column":45,"line":10}}},{"id":"159","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["55"],"coveredBy":["55"],"location":{"end":{"column":6,"line":17},"start":{"column":22,"line":15}}},{"id":"160","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["55"],"coveredBy":["55"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"162","mutatorName":"EqualityOperator","replacement":"this.hitpoints >= 0","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["55"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"161","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["55"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"163","mutatorName":"EqualityOperator","replacement":"this.hitpoints <"+"= 0","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["55"],"coveredBy":["55"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"164","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["55","56"],"location":{"end":{"column":6,"line":21},"start":{"column":28,"line":19}}},{"id":"165","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["55"],"coveredBy":["55","56"],"location":{"end":{"column":6,"line":25},"start":{"column":32,"line":23}}},{"id":"166","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["55"],"coveredBy":["55","56"],"location":{"end":{"column":33,"line":24},"start":{"column":9,"line":24}}},{"id":"168","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["55"],"coveredBy":["55"],"location":{"end":{"column":6,"line":35},"start":{"column":22,"line":33}}},{"id":"169","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected false to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["55"],"coveredBy":["55"],"location":{"end":{"column":20,"line":34},"start":{"column":16,"line":34}}},{"id":"170","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["55"],"coveredBy":["55"],"location":{"end":{"column":6,"line":39},"start":{"column":30,"line":37}}},{"id":"171","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["55"],"location":{"end":{"column":6,"line":42},"start":{"column":32,"line":40}}},{"id":"172","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["55"],"location":{"end":{"column":33,"line":41},"start":{"column":9,"line":41}}},{"id":"174","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["56"],"coveredBy":["56"],"location":{"end":{"column":6,"line":52},"start":{"column":22,"line":50}}},{"id":"175","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected false to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["56"],"coveredBy":["56"],"location":{"end":{"column":20,"line":51},"start":{"column":16,"line":51}}},{"id":"176","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["56"],"location":{"end":{"column":6,"line":56},"start":{"column":29,"line":54}}},{"id":"177","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["56"],"location":{"end":{"column":6,"line":60},"start":{"column":32,"line":58}}},{"id":"178","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["56"],"location":{"end":{"column":33,"line":59},"start":{"column":9,"line":59}}},{"id":"180","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["57"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"179","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["57"],"coveredBy":["57"],"location":{"end":{"column":6,"line":67},"start":{"column":27,"line":62}}},{"id":"181","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["57"],"coveredBy":["57"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"182","mutatorName":"EqualityOperator","replacement":"this.hitpoints !== 2","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["57"],"coveredBy":["57"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"183","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["57"],"coveredBy":["57"],"location":{"end":{"column":10,"line":65},"start":{"column":35,"line":63}}},{"id":"184","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected '' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["57"],"coveredBy":["57"],"location":{"end":{"column":26,"line":64},"start":{"column":20,"line":64}}}],"source":"﻿interface IUnit {\r\n    attack(unit: IUnit): void;\r\n    alive(): boolean;\r\n    hurt(damage: number): void;\r\n}\r\nexport class Zergling implements IUnit {\r\n    hitpoints = 1;\r\n    closeUnits: IUnit[] = [];\r\n    attack(unit: IUnit): void {\r\n        if (this.closeUnits.includes(unit)) {\r\n            unit.hurt(1);\r\n        }\r\n    }\r\n\r\n    alive(): boolean {\r\n        return this.hitpoints > 0;\r\n    }\r\n\r\n    run(unit: IUnit): void {\r\n        this.closeUnits.push(unit);\r\n    }\r\n\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n}\r\nexport class Marine implements IUnit {\r\n    hitpoints = 2;\r\n    attack(unit: IUnit): void {\r\n        this.shoot(unit);\r\n    }\r\n\r\n    alive(): boolean {\r\n        return true;\r\n    }\r\n\r\n    shoot(unit: IUnit): void {\r\n        unit.hurt(1);\r\n    }\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n}\r\nexport class Zealot implements IUnit {\r\n    hitpoints = 2;\r\n    attack(unit: IUnit): void {\r\n        this.claw(unit);\r\n    }\r\n\r\n    alive(): boolean {\r\n        return true;\r\n    }\r\n\r\n    claw(unit: IUnit): void {\r\n        unit.hurt(2);\r\n    }\r\n\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n\r\n    hitpointBar(): string {\r\n        if (this.hitpoints === 2) {\r\n            return \"full\";\r\n        }\r\n        return \"not full\";\r\n    }\r\n}"},"src/folder_1/3_kata.ts":{"language":"typescript","mutants":[{"id":"229","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":31},"start":{"column":31,"line":29}}},{"id":"235","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":48},"start":{"column":31,"line":46}}},{"id":"247","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":26,"line":66},"start":{"column":16,"line":66}}},{"id":"217","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["69","70","71"],"location":{"end":{"column":6,"line":13},"start":{"column":31,"line":9}}},{"id":"216","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["69","70","71"],"location":{"end":{"column":29,"line":8},"start":{"column":27,"line":8}}},{"id":"218","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":3,"killedBy":["71"],"coveredBy":["69","70","71"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"219","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["69","70","71"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"220","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["69","70"],"location":{"end":{"column":10,"line":12},"start":{"column":45,"line":10}}},{"id":"221","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["69"],"coveredBy":["69"],"location":{"end":{"column":6,"line":17},"start":{"column":22,"line":15}}},{"id":"222","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["69"],"coveredBy":["69"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"223","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["69"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"224","mutatorName":"EqualityOperator","replacement":"this.hitpoints >= 0","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["69"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"225","mutatorName":"EqualityOperator","replacement":"this.hitpoints <"+"= 0","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["69"],"coveredBy":["69"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"226","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["69","70"],"location":{"end":{"column":6,"line":21},"start":{"column":28,"line":19}}},{"id":"227","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["69"],"coveredBy":["69","70"],"location":{"end":{"column":6,"line":25},"start":{"column":32,"line":23}}},{"id":"228","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["69"],"coveredBy":["69","70"],"location":{"end":{"column":33,"line":24},"start":{"column":9,"line":24}}},{"id":"230","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["69"],"coveredBy":["69"],"location":{"end":{"column":6,"line":35},"start":{"column":22,"line":33}}},{"id":"231","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected false to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["69"],"coveredBy":["69"],"location":{"end":{"column":20,"line":34},"start":{"column":16,"line":34}}},{"id":"232","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["69"],"coveredBy":["69"],"location":{"end":{"column":6,"line":39},"start":{"column":30,"line":37}}},{"id":"233","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["69"],"location":{"end":{"column":6,"line":42},"start":{"column":32,"line":40}}},{"id":"234","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["69"],"location":{"end":{"column":33,"line":41},"start":{"column":9,"line":41}}},{"id":"236","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["70"],"coveredBy":["70"],"location":{"end":{"column":6,"line":52},"start":{"column":22,"line":50}}},{"id":"237","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected false to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["70"],"coveredBy":["70"],"location":{"end":{"column":20,"line":51},"start":{"column":16,"line":51}}},{"id":"238","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["70"],"location":{"end":{"column":6,"line":56},"start":{"column":29,"line":54}}},{"id":"239","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["70"],"location":{"end":{"column":6,"line":60},"start":{"column":32,"line":58}}},{"id":"240","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["70"],"location":{"end":{"column":33,"line":59},"start":{"column":9,"line":59}}},{"id":"241","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["71"],"coveredBy":["71"],"location":{"end":{"column":6,"line":67},"start":{"column":27,"line":62}}},{"id":"242","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["71"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"244","mutatorName":"EqualityOperator","replacement":"this.hitpoints !== 2","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["71"],"coveredBy":["71"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"243","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["71"],"coveredBy":["71"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"245","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["71"],"coveredBy":["71"],"location":{"end":{"column":10,"line":65},"start":{"column":35,"line":63}}},{"id":"246","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected '' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["71"],"coveredBy":["71"],"location":{"end":{"column":26,"line":64},"start":{"column":20,"line":64}}}],"source":"﻿interface IUnit {\r\n    attack(unit: IUnit): void;\r\n    alive(): boolean;\r\n    hurt(damage: number): void;\r\n}\r\nexport class Zergling implements IUnit {\r\n    hitpoints = 1;\r\n    closeUnits: IUnit[] = [];\r\n    attack(unit: IUnit): void {\r\n        if (this.closeUnits.includes(unit)) {\r\n            unit.hurt(1);\r\n        }\r\n    }\r\n\r\n    alive(): boolean {\r\n        return this.hitpoints > 0;\r\n    }\r\n\r\n    run(unit: IUnit): void {\r\n        this.closeUnits.push(unit);\r\n    }\r\n\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n}\r\nexport class Marine implements IUnit {\r\n    hitpoints = 2;\r\n    attack(unit: IUnit): void {\r\n        this.shoot(unit);\r\n    }\r\n\r\n    alive(): boolean {\r\n        return true;\r\n    }\r\n\r\n    shoot(unit: IUnit): void {\r\n        unit.hurt(1);\r\n    }\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n}\r\nexport class Zealot implements IUnit {\r\n    hitpoints = 2;\r\n    attack(unit: IUnit): void {\r\n        this.claw(unit);\r\n    }\r\n\r\n    alive(): boolean {\r\n        return true;\r\n    }\r\n\r\n    claw(unit: IUnit): void {\r\n        unit.hurt(2);\r\n    }\r\n\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n\r\n    hitpointBar(): string {\r\n        if (this.hitpoints === 2) {\r\n            return \"full\";\r\n        }\r\n        return \"not full\";\r\n    }\r\n}"},"src/folder_1/6_kata.ts":{"language":"typescript","mutants":[{"id":"291","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":31},"start":{"column":31,"line":29}}},{"id":"297","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":48},"start":{"column":31,"line":46}}},{"id":"309","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":26,"line":66},"start":{"column":16,"line":66}}},{"id":"278","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["87","88","89"],"location":{"end":{"column":29,"line":8},"start":{"column":27,"line":8}}},{"id":"279","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["87","88","89"],"location":{"end":{"column":6,"line":13},"start":{"column":31,"line":9}}},{"id":"280","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":3,"killedBy":["89"],"coveredBy":["87","88","89"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"281","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["87","88","89"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"282","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["87","88"],"location":{"end":{"column":10,"line":12},"start":{"column":45,"line":10}}},{"id":"283","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["87"],"coveredBy":["87"],"location":{"end":{"column":6,"line":17},"start":{"column":22,"line":15}}},{"id":"284","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["87"],"coveredBy":["87"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"285","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["87"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"286","mutatorName":"EqualityOperator","replacement":"this.hitpoints >= 0","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["87"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"288","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["87","88"],"location":{"end":{"column":6,"line":21},"start":{"column":28,"line":19}}},{"id":"287","mutatorName":"EqualityOperator","replacement":"this.hitpoints <"+"= 0","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["87"],"coveredBy":["87"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"289","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["87"],"coveredBy":["87","88"],"location":{"end":{"column":6,"line":25},"start":{"column":32,"line":23}}},{"id":"290","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["87"],"coveredBy":["87","88"],"location":{"end":{"column":33,"line":24},"start":{"column":9,"line":24}}},{"id":"292","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["87"],"coveredBy":["87"],"location":{"end":{"column":6,"line":35},"start":{"column":22,"line":33}}},{"id":"293","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected false to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["87"],"coveredBy":["87"],"location":{"end":{"column":20,"line":34},"start":{"column":16,"line":34}}},{"id":"294","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["87"],"coveredBy":["87"],"location":{"end":{"column":6,"line":39},"start":{"column":30,"line":37}}},{"id":"295","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["87"],"location":{"end":{"column":6,"line":42},"start":{"column":32,"line":40}}},{"id":"296","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["87"],"location":{"end":{"column":33,"line":41},"start":{"column":9,"line":41}}},{"id":"298","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["88"],"coveredBy":["88"],"location":{"end":{"column":6,"line":52},"start":{"column":22,"line":50}}},{"id":"299","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected false to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["88"],"coveredBy":["88"],"location":{"end":{"column":20,"line":51},"start":{"column":16,"line":51}}},{"id":"300","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["88"],"location":{"end":{"column":6,"line":56},"start":{"column":29,"line":54}}},{"id":"302","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["88"],"location":{"end":{"column":33,"line":59},"start":{"column":9,"line":59}}},{"id":"301","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["88"],"location":{"end":{"column":6,"line":60},"start":{"column":32,"line":58}}},{"id":"303","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["89"],"coveredBy":["89"],"location":{"end":{"column":6,"line":67},"start":{"column":27,"line":62}}},{"id":"304","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["89"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"305","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["89"],"coveredBy":["89"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"306","mutatorName":"EqualityOperator","replacement":"this.hitpoints !== 2","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["89"],"coveredBy":["89"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"307","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["89"],"coveredBy":["89"],"location":{"end":{"column":10,"line":65},"start":{"column":35,"line":63}}},{"id":"308","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected '' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["89"],"coveredBy":["89"],"location":{"end":{"column":26,"line":64},"start":{"column":20,"line":64}}}],"source":"﻿interface IUnit {\r\n    attack(unit: IUnit): void;\r\n    alive(): boolean;\r\n    hurt(damage: number): void;\r\n}\r\nexport class Zergling implements IUnit {\r\n    hitpoints = 1;\r\n    closeUnits: IUnit[] = [];\r\n    attack(unit: IUnit): void {\r\n        if (this.closeUnits.includes(unit)) {\r\n            unit.hurt(1);\r\n        }\r\n    }\r\n\r\n    alive(): boolean {\r\n        return this.hitpoints > 0;\r\n    }\r\n\r\n    run(unit: IUnit): void {\r\n        this.closeUnits.push(unit);\r\n    }\r\n\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n}\r\nexport class Marine implements IUnit {\r\n    hitpoints = 2;\r\n    attack(unit: IUnit): void {\r\n        this.shoot(unit);\r\n    }\r\n\r\n    alive(): boolean {\r\n        return true;\r\n    }\r\n\r\n    shoot(unit: IUnit): void {\r\n        unit.hurt(1);\r\n    }\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n}\r\nexport class Zealot implements IUnit {\r\n    hitpoints = 2;\r\n    attack(unit: IUnit): void {\r\n        this.claw(unit);\r\n    }\r\n\r\n    alive(): boolean {\r\n        return true;\r\n    }\r\n\r\n    claw(unit: IUnit): void {\r\n        unit.hurt(2);\r\n    }\r\n\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n\r\n    hitpointBar(): string {\r\n        if (this.hitpoints === 2) {\r\n            return \"full\";\r\n        }\r\n        return \"not full\";\r\n    }\r\n}"},"src/folder_1/9_kata.ts":{"language":"typescript","mutants":[{"id":"353","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":31},"start":{"column":31,"line":29}}},{"id":"359","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":48},"start":{"column":31,"line":46}}},{"id":"371","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":26,"line":66},"start":{"column":16,"line":66}}},{"id":"340","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["105","106","107"],"location":{"end":{"column":29,"line":8},"start":{"column":27,"line":8}}},{"id":"342","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":3,"killedBy":["107"],"coveredBy":["105","106","107"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"341","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["105","106","107"],"location":{"end":{"column":6,"line":13},"start":{"column":31,"line":9}}},{"id":"343","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["105","106","107"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"344","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["105","106"],"location":{"end":{"column":10,"line":12},"start":{"column":45,"line":10}}},{"id":"345","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["105"],"coveredBy":["105"],"location":{"end":{"column":6,"line":17},"start":{"column":22,"line":15}}},{"id":"346","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["105"],"coveredBy":["105"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"347","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["105"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"348","mutatorName":"EqualityOperator","replacement":"this.hitpoints >= 0","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["105"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"349","mutatorName":"EqualityOperator","replacement":"this.hitpoints <"+"= 0","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["105"],"coveredBy":["105"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"350","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["105","106"],"location":{"end":{"column":6,"line":21},"start":{"column":28,"line":19}}},{"id":"351","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["105"],"coveredBy":["105","106"],"location":{"end":{"column":6,"line":25},"start":{"column":32,"line":23}}},{"id":"352","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["105"],"coveredBy":["105","106"],"location":{"end":{"column":33,"line":24},"start":{"column":9,"line":24}}},{"id":"354","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["105"],"coveredBy":["105"],"location":{"end":{"column":6,"line":35},"start":{"column":22,"line":33}}},{"id":"355","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected false to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["105"],"coveredBy":["105"],"location":{"end":{"column":20,"line":34},"start":{"column":16,"line":34}}},{"id":"356","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["105"],"coveredBy":["105"],"location":{"end":{"column":6,"line":39},"start":{"column":30,"line":37}}},{"id":"358","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["105"],"location":{"end":{"column":33,"line":41},"start":{"column":9,"line":41}}},{"id":"357","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["105"],"location":{"end":{"column":6,"line":42},"start":{"column":32,"line":40}}},{"id":"361","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected false to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["106"],"coveredBy":["106"],"location":{"end":{"column":20,"line":51},"start":{"column":16,"line":51}}},{"id":"360","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["106"],"coveredBy":["106"],"location":{"end":{"column":6,"line":52},"start":{"column":22,"line":50}}},{"id":"362","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["106"],"location":{"end":{"column":6,"line":56},"start":{"column":29,"line":54}}},{"id":"363","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["106"],"location":{"end":{"column":6,"line":60},"start":{"column":32,"line":58}}},{"id":"364","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["106"],"location":{"end":{"column":33,"line":59},"start":{"column":9,"line":59}}},{"id":"365","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["107"],"coveredBy":["107"],"location":{"end":{"column":6,"line":67},"start":{"column":27,"line":62}}},{"id":"366","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["107"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"367","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["107"],"coveredBy":["107"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"369","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["107"],"coveredBy":["107"],"location":{"end":{"column":10,"line":65},"start":{"column":35,"line":63}}},{"id":"368","mutatorName":"EqualityOperator","replacement":"this.hitpoints !== 2","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["107"],"coveredBy":["107"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"370","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected '' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["107"],"coveredBy":["107"],"location":{"end":{"column":26,"line":64},"start":{"column":20,"line":64}}}],"source":"﻿interface IUnit {\r\n    attack(unit: IUnit): void;\r\n    alive(): boolean;\r\n    hurt(damage: number): void;\r\n}\r\nexport class Zergling implements IUnit {\r\n    hitpoints = 1;\r\n    closeUnits: IUnit[] = [];\r\n    attack(unit: IUnit): void {\r\n        if (this.closeUnits.includes(unit)) {\r\n            unit.hurt(1);\r\n        }\r\n    }\r\n\r\n    alive(): boolean {\r\n        return this.hitpoints > 0;\r\n    }\r\n\r\n    run(unit: IUnit): void {\r\n        this.closeUnits.push(unit);\r\n    }\r\n\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n}\r\nexport class Marine implements IUnit {\r\n    hitpoints = 2;\r\n    attack(unit: IUnit): void {\r\n        this.shoot(unit);\r\n    }\r\n\r\n    alive(): boolean {\r\n        return true;\r\n    }\r\n\r\n    shoot(unit: IUnit): void {\r\n        unit.hurt(1);\r\n    }\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n}\r\nexport class Zealot implements IUnit {\r\n    hitpoints = 2;\r\n    attack(unit: IUnit): void {\r\n        this.claw(unit);\r\n    }\r\n\r\n    alive(): boolean {\r\n        return true;\r\n    }\r\n\r\n    claw(unit: IUnit): void {\r\n        unit.hurt(2);\r\n    }\r\n\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n\r\n    hitpointBar(): string {\r\n        if (this.hitpoints === 2) {\r\n            return \"full\";\r\n        }\r\n        return \"not full\";\r\n    }\r\n}"},"src/folder_1/10_kata.ts":{"language":"typescript","mutants":[{"id":"1","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"' World' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["4"],"coveredBy":["4","5","6","7"],"location":{"end":{"column":18,"line":2},"start":{"column":11,"line":2}}},{"id":"2","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"'Hello ' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["4"],"coveredBy":["4","6","7"],"location":{"end":{"column":18,"line":3},"start":{"column":11,"line":3}}},{"id":"3","mutatorName":"BlockStatement","replacement":"{}","statusReason":"undefined == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["4"],"coveredBy":["4"],"location":{"end":{"column":2,"line":8},"start":{"column":38,"line":6}}},{"id":"4","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"'HelloWorld' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["4"],"coveredBy":["4"],"location":{"end":{"column":54,"line":7},"start":{"column":51,"line":7}}},{"id":"0","mutatorName":"BlockStatement","replacement":"{}","statusReason":"'' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["4"],"coveredBy":["4","5","6","7"],"location":{"end":{"column":2,"line":4},"start":{"column":40,"line":1}}}],"source":"export function* helloWorldGenerator() {\n    yield 'Hello';\n    yield 'World';\n}\n\nexport default function HelloWorld() {\n    return Array.from(helloWorldGenerator()).join(' ');\n}\n"},"src/folder_1/11_kata.ts":{"language":"typescript","mutants":[{"id":"5","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["8"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"6","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"7","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"8","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"9","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"10","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["18"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"11","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["17"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"12","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["16"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"13","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["15"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"14","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"15","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"16","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"17","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"18","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"19","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"20","mutatorName":"EqualityOperator","replacement":"totalCost <"+" volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"21","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["14"],"coveredBy":["14","15","16","17","18"],"location":{"end":{"column":10,"line":16},"start":{"column":34,"line":13}}},{"id":"22","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 - discount)","statusReason":"expected 1113.4020618556704 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["14"],"coveredBy":["14","15","16","17","18"],"location":{"end":{"column":51,"line":14},"start":{"column":25,"line":14}}},{"id":"23","mutatorName":"ArithmeticOperator","replacement":"1 + discount","statusReason":"expected 1112.4 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["14"],"coveredBy":["14","15","16","17","18"],"location":{"end":{"column":50,"line":14},"start":{"column":38,"line":14}}},{"id":"24","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected 4976.1 to equal 5130","status":"Killed","static":false,"testsCompleted":2,"killedBy":["15"],"coveredBy":["14","15","16","17","18"],"location":{"end":{"column":24,"line":15},"start":{"column":20,"line":15}}},{"id":"26","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["8"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"27","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"28","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"25","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"29","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}],"source":"﻿\r\n\r\nexport const input = (commands) => {\r\n    let totalCost = +commands[0] * +commands[1];\r\n    const volumeDiscount = [\r\n        { volume: 50000, discount: 0.15 },\r\n        { volume: 10000, discount: 0.10 },\r\n        { volume: 7000, discount: 0.07 },\r\n        { volume: 5000, discount: 0.05 },\r\n        { volume: 1000, discount: 0.03 },\r\n    ]\r\n    volumeDiscount.some(({volume, discount}, idx) => {\r\n        if (totalCost >= volume) {\r\n            totalCost = totalCost * (1 - discount)\r\n            return true;\r\n        }\r\n        return false;\r\n    })\r\n    const stateTaxes = {\r\n        UT: 6.85,\r\n        NV: 8.00,\r\n        TX: 6.25,\r\n        AL: 4.00,\r\n        CA: 8.25,\r\n    }\r\n    return totalCost * (1 + stateTaxes[commands[2]] / 100);\r\n}"},"src/folder_1/13_kata.ts":{"language":"typescript","mutants":[{"id":"62","mutatorName":"BlockStatement","replacement":"{}","statusReason":"'' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["22"],"coveredBy":["22","23","24","25"],"location":{"end":{"column":2,"line":4},"start":{"column":40,"line":1}}},{"id":"63","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"' World' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["22"],"coveredBy":["22","23","24","25"],"location":{"end":{"column":18,"line":2},"start":{"column":11,"line":2}}},{"id":"64","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"'Hello ' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["22"],"coveredBy":["22","24","25"],"location":{"end":{"column":18,"line":3},"start":{"column":11,"line":3}}},{"id":"65","mutatorName":"BlockStatement","replacement":"{}","statusReason":"undefined == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["22"],"coveredBy":["22"],"location":{"end":{"column":2,"line":8},"start":{"column":38,"line":6}}},{"id":"66","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"'HelloWorld' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["22"],"coveredBy":["22"],"location":{"end":{"column":54,"line":7},"start":{"column":51,"line":7}}}],"source":"export function* helloWorldGenerator() {\n    yield 'Hello';\n    yield 'World';\n}\n\nexport default function HelloWorld() {\n    return Array.from(helloWorldGenerator()).join(' ');\n}\n"},"src/folder_1/14_kata.ts":{"language":"typescript","mutants":[{"id":"68","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"67","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["26"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"69","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"70","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"71","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"72","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["36"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"73","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["35"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"74","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["34"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"75","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["33"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"76","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"77","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"78","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"80","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"81","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"79","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"82","mutatorName":"EqualityOperator","replacement":"totalCost <"+" volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"83","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["32"],"coveredBy":["32","33","34","35","36"],"location":{"end":{"column":10,"line":16},"start":{"column":34,"line":13}}},{"id":"85","mutatorName":"ArithmeticOperator","replacement":"1 + discount","statusReason":"expected 1112.4 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["32"],"coveredBy":["32","33","34","35","36"],"location":{"end":{"column":50,"line":14},"start":{"column":38,"line":14}}},{"id":"84","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 - discount)","statusReason":"expected 1113.4020618556704 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["32"],"coveredBy":["32","33","34","35","36"],"location":{"end":{"column":51,"line":14},"start":{"column":25,"line":14}}},{"id":"86","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected 4976.1 to equal 5130","status":"Killed","static":false,"testsCompleted":2,"killedBy":["33"],"coveredBy":["32","33","34","35","36"],"location":{"end":{"column":24,"line":15},"start":{"column":20,"line":15}}},{"id":"88","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["26"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"87","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"89","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"90","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"91","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}],"source":"﻿\r\n\r\nexport const input = (commands) => {\r\n    let totalCost = +commands[0] * +commands[1];\r\n    const volumeDiscount = [\r\n        { volume: 50000, discount: 0.15 },\r\n        { volume: 10000, discount: 0.10 },\r\n        { volume: 7000, discount: 0.07 },\r\n        { volume: 5000, discount: 0.05 },\r\n        { volume: 1000, discount: 0.03 },\r\n    ]\r\n    volumeDiscount.some(({volume, discount}, idx) => {\r\n        if (totalCost >= volume) {\r\n            totalCost = totalCost * (1 - discount)\r\n            return true;\r\n        }\r\n        return false;\r\n    })\r\n    const stateTaxes = {\r\n        UT: 6.85,\r\n        NV: 8.00,\r\n        TX: 6.25,\r\n        AL: 4.00,\r\n        CA: 8.25,\r\n    }\r\n    return totalCost * (1 + stateTaxes[commands[2]] / 100);\r\n}"},"src/folder_1/16_kata.ts":{"language":"typescript","mutants":[{"id":"124","mutatorName":"BlockStatement","replacement":"{}","statusReason":"'' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["40"],"coveredBy":["40","41","42","43"],"location":{"end":{"column":2,"line":4},"start":{"column":40,"line":1}}},{"id":"125","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"' World' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["40"],"coveredBy":["40","41","42","43"],"location":{"end":{"column":18,"line":2},"start":{"column":11,"line":2}}},{"id":"126","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"'Hello ' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["40"],"coveredBy":["40","42","43"],"location":{"end":{"column":18,"line":3},"start":{"column":11,"line":3}}},{"id":"127","mutatorName":"BlockStatement","replacement":"{}","statusReason":"undefined == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["40"],"coveredBy":["40"],"location":{"end":{"column":2,"line":8},"start":{"column":38,"line":6}}},{"id":"128","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"'HelloWorld' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["40"],"coveredBy":["40"],"location":{"end":{"column":54,"line":7},"start":{"column":51,"line":7}}}],"source":"export function* helloWorldGenerator() {\n    yield 'Hello';\n    yield 'World';\n}\n\nexport default function HelloWorld() {\n    return Array.from(helloWorldGenerator()).join(' ');\n}\n"},"src/folder_1/17_kata.ts":{"language":"typescript","mutants":[{"id":"129","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["44"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"130","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"131","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"132","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"133","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"134","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["54"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"135","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["53"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"136","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["52"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"137","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["51"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"138","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"139","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"140","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"141","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"142","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"144","mutatorName":"EqualityOperator","replacement":"totalCost <"+" volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"143","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"145","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["50"],"coveredBy":["50","51","52","53","54"],"location":{"end":{"column":10,"line":16},"start":{"column":34,"line":13}}},{"id":"146","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 - discount)","statusReason":"expected 1113.4020618556704 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["50"],"coveredBy":["50","51","52","53","54"],"location":{"end":{"column":51,"line":14},"start":{"column":25,"line":14}}},{"id":"147","mutatorName":"ArithmeticOperator","replacement":"1 + discount","statusReason":"expected 1112.4 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["50"],"coveredBy":["50","51","52","53","54"],"location":{"end":{"column":50,"line":14},"start":{"column":38,"line":14}}},{"id":"148","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected 4976.1 to equal 5130","status":"Killed","static":false,"testsCompleted":2,"killedBy":["51"],"coveredBy":["50","51","52","53","54"],"location":{"end":{"column":24,"line":15},"start":{"column":20,"line":15}}},{"id":"150","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["44"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"149","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"151","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"152","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"153","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}],"source":"﻿\r\n\r\nexport const input = (commands) => {\r\n    let totalCost = +commands[0] * +commands[1];\r\n    const volumeDiscount = [\r\n        { volume: 50000, discount: 0.15 },\r\n        { volume: 10000, discount: 0.10 },\r\n        { volume: 7000, discount: 0.07 },\r\n        { volume: 5000, discount: 0.05 },\r\n        { volume: 1000, discount: 0.03 },\r\n    ]\r\n    volumeDiscount.some(({volume, discount}, idx) => {\r\n        if (totalCost >= volume) {\r\n            totalCost = totalCost * (1 - discount)\r\n            return true;\r\n        }\r\n        return false;\r\n    })\r\n    const stateTaxes = {\r\n        UT: 6.85,\r\n        NV: 8.00,\r\n        TX: 6.25,\r\n        AL: 4.00,\r\n        CA: 8.25,\r\n    }\r\n    return totalCost * (1 + stateTaxes[commands[2]] / 100);\r\n}"},"src/folder_1/1_kata.ts":{"language":"typescript","mutants":[{"id":"187","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"' World' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0","1","2","3"],"location":{"end":{"column":18,"line":2},"start":{"column":11,"line":2}}},{"id":"186","mutatorName":"BlockStatement","replacement":"{}","statusReason":"'' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0","1","2","3"],"location":{"end":{"column":2,"line":4},"start":{"column":40,"line":1}}},{"id":"188","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"'Hello ' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0","2","3"],"location":{"end":{"column":18,"line":3},"start":{"column":11,"line":3}}},{"id":"189","mutatorName":"BlockStatement","replacement":"{}","statusReason":"undefined == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0"],"location":{"end":{"column":2,"line":8},"start":{"column":38,"line":6}}},{"id":"190","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"'HelloWorld' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0"],"location":{"end":{"column":54,"line":7},"start":{"column":51,"line":7}}}],"source":"export function* helloWorldGenerator() {\n    yield 'Hello';\n    yield 'World';\n}\n\nexport default function HelloWorld() {\n    return Array.from(helloWorldGenerator()).join(' ');\n}\n"},"src/folder_1/2_kata.ts":{"language":"typescript","mutants":[{"id":"191","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["58"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"192","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"193","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"194","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"195","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"196","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["68"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"197","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["67"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"198","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["66"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"199","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["65"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"200","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"202","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"201","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"203","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"204","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"205","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"206","mutatorName":"EqualityOperator","replacement":"totalCost <"+" volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"207","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["64"],"coveredBy":["64","65","66","67","68"],"location":{"end":{"column":10,"line":16},"start":{"column":34,"line":13}}},{"id":"209","mutatorName":"ArithmeticOperator","replacement":"1 + discount","statusReason":"expected 1112.4 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["64"],"coveredBy":["64","65","66","67","68"],"location":{"end":{"column":50,"line":14},"start":{"column":38,"line":14}}},{"id":"208","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 - discount)","statusReason":"expected 1113.4020618556704 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["64"],"coveredBy":["64","65","66","67","68"],"location":{"end":{"column":51,"line":14},"start":{"column":25,"line":14}}},{"id":"210","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected 4976.1 to equal 5130","status":"Killed","static":false,"testsCompleted":2,"killedBy":["65"],"coveredBy":["64","65","66","67","68"],"location":{"end":{"column":24,"line":15},"start":{"column":20,"line":15}}},{"id":"212","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["58"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"211","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"213","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"214","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"215","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}],"source":"﻿\r\n\r\nexport const input = (commands) => {\r\n    let totalCost = +commands[0] * +commands[1];\r\n    const volumeDiscount = [\r\n        { volume: 50000, discount: 0.15 },\r\n        { volume: 10000, discount: 0.10 },\r\n        { volume: 7000, discount: 0.07 },\r\n        { volume: 5000, discount: 0.05 },\r\n        { volume: 1000, discount: 0.03 },\r\n    ]\r\n    volumeDiscount.some(({volume, discount}, idx) => {\r\n        if (totalCost >= volume) {\r\n            totalCost = totalCost * (1 - discount)\r\n            return true;\r\n        }\r\n        return false;\r\n    })\r\n    const stateTaxes = {\r\n        UT: 6.85,\r\n        NV: 8.00,\r\n        TX: 6.25,\r\n        AL: 4.00,\r\n        CA: 8.25,\r\n    }\r\n    return totalCost * (1 + stateTaxes[commands[2]] / 100);\r\n}"},"src/folder_1/4_kata.ts":{"language":"typescript","mutants":[{"id":"248","mutatorName":"BlockStatement","replacement":"{}","statusReason":"'' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["72"],"coveredBy":["72","73","74","75"],"location":{"end":{"column":2,"line":4},"start":{"column":40,"line":1}}},{"id":"250","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"'Hello ' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["72"],"coveredBy":["72","74","75"],"location":{"end":{"column":18,"line":3},"start":{"column":11,"line":3}}},{"id":"249","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"' World' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["72"],"coveredBy":["72","73","74","75"],"location":{"end":{"column":18,"line":2},"start":{"column":11,"line":2}}},{"id":"251","mutatorName":"BlockStatement","replacement":"{}","statusReason":"undefined == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["72"],"coveredBy":["72"],"location":{"end":{"column":2,"line":8},"start":{"column":38,"line":6}}},{"id":"252","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"'HelloWorld' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["72"],"coveredBy":["72"],"location":{"end":{"column":54,"line":7},"start":{"column":51,"line":7}}}],"source":"export function* helloWorldGenerator() {\n    yield 'Hello';\n    yield 'World';\n}\n\nexport default function HelloWorld() {\n    return Array.from(helloWorldGenerator()).join(' ');\n}"},"src/folder_1/5_kata.ts":{"language":"typescript","mutants":[{"id":"253","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["76"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"255","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"254","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"256","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"257","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"258","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["86"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"259","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["85"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"260","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["84"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"261","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["83"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"262","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"263","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"265","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"264","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"266","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"267","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"268","mutatorName":"EqualityOperator","replacement":"totalCost <"+" volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"269","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["82"],"coveredBy":["82","83","84","85","86"],"location":{"end":{"column":10,"line":16},"start":{"column":34,"line":13}}},{"id":"270","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 - discount)","statusReason":"expected 1113.4020618556704 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["82"],"coveredBy":["82","83","84","85","86"],"location":{"end":{"column":51,"line":14},"start":{"column":25,"line":14}}},{"id":"271","mutatorName":"ArithmeticOperator","replacement":"1 + discount","statusReason":"expected 1112.4 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["82"],"coveredBy":["82","83","84","85","86"],"location":{"end":{"column":50,"line":14},"start":{"column":38,"line":14}}},{"id":"272","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected 4976.1 to equal 5130","status":"Killed","static":false,"testsCompleted":2,"killedBy":["83"],"coveredBy":["82","83","84","85","86"],"location":{"end":{"column":24,"line":15},"start":{"column":20,"line":15}}},{"id":"273","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"274","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["76"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"275","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"276","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"277","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}],"source":"﻿\r\n\r\nexport const input = (commands) => {\r\n    let totalCost = +commands[0] * +commands[1];\r\n    const volumeDiscount = [\r\n        { volume: 50000, discount: 0.15 },\r\n        { volume: 10000, discount: 0.10 },\r\n        { volume: 7000, discount: 0.07 },\r\n        { volume: 5000, discount: 0.05 },\r\n        { volume: 1000, discount: 0.03 },\r\n    ]\r\n    volumeDiscount.some(({volume, discount}, idx) => {\r\n        if (totalCost >= volume) {\r\n            totalCost = totalCost * (1 - discount)\r\n            return true;\r\n        }\r\n        return false;\r\n    })\r\n    const stateTaxes = {\r\n        UT: 6.85,\r\n        NV: 8.00,\r\n        TX: 6.25,\r\n        AL: 4.00,\r\n        CA: 8.25,\r\n    }\r\n    return totalCost * (1 + stateTaxes[commands[2]] / 100);\r\n}"},"src/folder_1/7_kata.ts":{"language":"typescript","mutants":[{"id":"310","mutatorName":"BlockStatement","replacement":"{}","statusReason":"'' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["90"],"coveredBy":["90","91","92","93"],"location":{"end":{"column":2,"line":4},"start":{"column":40,"line":1}}},{"id":"311","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"' World' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["90"],"coveredBy":["90","91","92","93"],"location":{"end":{"column":18,"line":2},"start":{"column":11,"line":2}}},{"id":"313","mutatorName":"BlockStatement","replacement":"{}","statusReason":"undefined == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["90"],"coveredBy":["90"],"location":{"end":{"column":2,"line":8},"start":{"column":38,"line":6}}},{"id":"312","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"'Hello ' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["90"],"coveredBy":["90","92","93"],"location":{"end":{"column":18,"line":3},"start":{"column":11,"line":3}}},{"id":"314","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"'HelloWorld' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["90"],"coveredBy":["90"],"location":{"end":{"column":54,"line":7},"start":{"column":51,"line":7}}}],"source":"export function* helloWorldGenerator() {\n    yield 'Hello';\n    yield 'World';\n}\n\nexport default function HelloWorld() {\n    return Array.from(helloWorldGenerator()).join(' ');\n}\n"},"src/folder_1/8_kata.ts":{"language":"typescript","mutants":[{"id":"315","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["94"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"316","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"317","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"318","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"319","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"320","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["104"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"321","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["103"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"322","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["102"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"324","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"323","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["101"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"326","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"325","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"327","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"328","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"329","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"330","mutatorName":"EqualityOperator","replacement":"totalCost <"+" volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"331","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["100"],"coveredBy":["100","101","102","103","104"],"location":{"end":{"column":10,"line":16},"start":{"column":34,"line":13}}},{"id":"332","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 - discount)","statusReason":"expected 1113.4020618556704 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["100"],"coveredBy":["100","101","102","103","104"],"location":{"end":{"column":51,"line":14},"start":{"column":25,"line":14}}},{"id":"333","mutatorName":"ArithmeticOperator","replacement":"1 + discount","statusReason":"expected 1112.4 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["100"],"coveredBy":["100","101","102","103","104"],"location":{"end":{"column":50,"line":14},"start":{"column":38,"line":14}}},{"id":"334","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected 4976.1 to equal 5130","status":"Killed","static":false,"testsCompleted":2,"killedBy":["101"],"coveredBy":["100","101","102","103","104"],"location":{"end":{"column":24,"line":15},"start":{"column":20,"line":15}}},{"id":"335","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"336","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["94"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"337","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"338","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"339","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}],"source":"﻿\r\n\r\nexport const input = (commands) => {\r\n    let totalCost = +commands[0] * +commands[1];\r\n    const volumeDiscount = [\r\n        { volume: 50000, discount: 0.15 },\r\n        { volume: 10000, discount: 0.10 },\r\n        { volume: 7000, discount: 0.07 },\r\n        { volume: 5000, discount: 0.05 },\r\n        { volume: 1000, discount: 0.03 },\r\n    ]\r\n    volumeDiscount.some(({volume, discount}, idx) => {\r\n        if (totalCost >= volume) {\r\n            totalCost = totalCost * (1 - discount)\r\n            return true;\r\n        }\r\n        return false;\r\n    })\r\n    const stateTaxes = {\r\n        UT: 6.85,\r\n        NV: 8.00,\r\n        TX: 6.25,\r\n        AL: 4.00,\r\n        CA: 8.25,\r\n    }\r\n    return totalCost * (1 + stateTaxes[commands[2]] / 100);\r\n}"}},"schemaVersion":"1.0","thresholds":{"high":80,"low":60,"break":null},"testFiles":{"dist/test/folder_1/test_kata_1.spec.js":{"tests":[{"id":"0","name":"hello world kata should return hello world"},{"id":"1","name":"hello world kata should use a generator function that returns hello"},{"id":"2","name":"hello world kata should use a generator function that returns world on second call"},{"id":"3","name":"hello world kata should use a generator function that returns done after three calls"}],"source":"import assert from \"node:assert\";\nimport HelloWorld, { helloWorldGenerator } from '../../src/folder_1/1_kata.js';\ndescribe('hello world kata', function () {\n    it('should return hello world', function () {\n        assert.equal(HelloWorld(), \"Hello World\");\n    });\n    it('should use a generator function that returns hello', () => {\n        let firstCall = helloWorldGenerator().next();\n        assert.equal(firstCall.value, 'Hello');\n        assert.equal(firstCall.done, false);\n    });\n    it('should use a generator function that returns world on second call', () => {\n        let sequence = helloWorldGenerator();\n        sequence.next();\n        let secondCall = sequence.next();\n        assert.equal(secondCall.value, 'World');\n        assert.equal(secondCall.done, false);\n    });\n    it('should use a generator function that returns done after three calls', () => {\n        let sequence = helloWorldGenerator();\n        const firstCall = sequence.next();\n        const secondCall = sequence.next();\n        const thirdCall = sequence.next();\n        assert.equal(thirdCall.done, true);\n    });\n});\n"},"dist/test/folder_1/test_kata_10.spec.js":{"tests":[{"id":"4","name":"hello world kata four should return hello world"},{"id":"5","name":"hello world kata four should use a generator function that returns hello"},{"id":"6","name":"hello world kata four should use a generator function that returns world on second call"},{"id":"7","name":"hello world kata four should use a generator function that returns done after three calls"}],"source":"import assert from \"node:assert\";\nimport HelloWorld, { helloWorldGenerator } from '../../src/folder_1/10_kata.js';\ndescribe('hello world kata four', function () {\n    it('should return hello world', function () {\n        assert.equal(HelloWorld(), \"Hello World\");\n    });\n    it('should use a generator function that returns hello', () => {\n        let firstCall = helloWorldGenerator().next();\n        assert.equal(firstCall.value, 'Hello');\n        assert.equal(firstCall.done, false);\n    });\n    it('should use a generator function that returns world on second call', () => {\n        let sequence = helloWorldGenerator();\n        sequence.next();\n        let secondCall = sequence.next();\n        assert.equal(secondCall.value, 'World');\n        assert.equal(secondCall.done, false);\n    });\n    it('should use a generator function that returns done after three calls', () => {\n        let sequence = helloWorldGenerator();\n        const firstCall = sequence.next();\n        const secondCall = sequence.next();\n        const thirdCall = sequence.next();\n        assert.equal(thirdCall.done, true);\n    });\n});\n"},"dist/test/folder_1/test_kata_11.spec.js":{"tests":[{"id":"8","name":"kata two four given 0 items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"9","name":"kata two four given 1 item and a NV state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"10","name":"kata two four given 1 item and a UT state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"11","name":"kata two four given 1 item and a TX state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"12","name":"kata two four given 1 item and a AL state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"13","name":"kata two four given 1 item and a CA state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"14","name":"kata two four given 1000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"15","name":"kata two four given 5000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"16","name":"kata two four given 7000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"17","name":"kata two four given 10000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"18","name":"kata two four given 50000 of items can accept an input of how many items, cost per item, state code, and calculate total value"}],"source":"import { assert } from 'chai';\nimport { input } from \"../../src/folder_1/11_kata.js\";\ndescribe('kata two four', function () {\n    it('given 0 items can accept an input of how many items, cost per item, state code, and calculate total value', function () {\n        const commands = [\n            \"0\",\n            \"5\",\n            \"NV\"\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, 0);\n    });\n    [\n        { state: \"NV\", multiplier: 1.08 },\n        { state: \"UT\", multiplier: 1.0685 },\n        { state: \"TX\", multiplier: 1.0625 },\n        { state: \"AL\", multiplier: 1.0400 },\n        { state: \"CA\", multiplier: 1.0825 },\n    ].forEach(({ state, multiplier }) => it(`given 1 item and a ${state} state code can accept an input of how many items, cost per item, state code, ` +\n        'and calculate total value', function () {\n        const commands = [\n            \"1\",\n            \"5\",\n            state\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, 5 * multiplier);\n    }));\n    [\n        { amount: \"1000\", discount: 0.03 },\n        { amount: \"5000\", discount: 0.05 },\n        { amount: \"7000\", discount: 0.07 },\n        { amount: \"10000\", discount: 0.10 },\n        { amount: \"50000\", discount: 0.15 },\n    ].forEach(({ amount, discount }) => it(`given ${amount} of items can accept an input of how many items, cost per item, state code, and calculate total value`, function () {\n        const commands = [\n            \"1\",\n            amount,\n            \"NV\"\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, +amount * (1 - discount) * (1.08));\n    }));\n});\n"},"dist/test/folder_1/test_kata_12.spec.js":{"tests":[{"id":"19","name":"can do battle four the vile zerg zergling will battle the epic terran marine"},{"id":"20","name":"can do battle four the vile zerg zergling will battle the epic protos zealot"},{"id":"21","name":"can do battle four the vile zerg zergling cannot hit a unit it has not run at"}],"source":"import { assert } from \"chai\";\nimport { Zergling, Marine, Zealot } from '../../src/folder_1/12_kata.js';\ndescribe('can do battle four', () => {\n    it('the vile zerg zergling will battle the epic terran marine', () => {\n        const marine = new Marine();\n        const zergling = new Zergling();\n        zergling.run(marine);\n        marine.shoot(zergling);\n        zergling.attack(marine);\n        marine.shoot(zergling);\n        assert.equal(marine.alive(), true);\n        assert.equal(zergling.alive(), false);\n    });\n    it('the vile zerg zergling will battle the epic protos zealot', () => {\n        const zealot = new Zealot();\n        const zergling = new Zergling();\n        zergling.run(zealot);\n        zealot.claw(zergling);\n        zergling.attack(zealot);\n        zealot.claw(zergling);\n        assert.equal(zealot.alive(), true);\n    });\n    it('the vile zerg zergling cannot hit a unit it has not run at', () => {\n        const zealot = new Zealot();\n        const zergling = new Zergling();\n        zergling.attack(zealot);\n        assert.equal(zealot.hitpointBar(), \"full\");\n    });\n});\n"},"dist/test/folder_1/test_kata_13.spec.js":{"tests":[{"id":"22","name":"hello world kata five should return hello world"},{"id":"23","name":"hello world kata five should use a generator function that returns hello"},{"id":"24","name":"hello world kata five should use a generator function that returns world on second call"},{"id":"25","name":"hello world kata five should use a generator function that returns done after three calls"}],"source":"import assert from \"node:assert\";\nimport HelloWorld, { helloWorldGenerator } from '../../src/folder_1/13_kata.js';\ndescribe('hello world kata five', function () {\n    it('should return hello world', function () {\n        assert.equal(HelloWorld(), \"Hello World\");\n    });\n    it('should use a generator function that returns hello', () => {\n        let firstCall = helloWorldGenerator().next();\n        assert.equal(firstCall.value, 'Hello');\n        assert.equal(firstCall.done, false);\n    });\n    it('should use a generator function that returns world on second call', () => {\n        let sequence = helloWorldGenerator();\n        sequence.next();\n        let secondCall = sequence.next();\n        assert.equal(secondCall.value, 'World');\n        assert.equal(secondCall.done, false);\n    });\n    it('should use a generator function that returns done after three calls', () => {\n        let sequence = helloWorldGenerator();\n        const firstCall = sequence.next();\n        const secondCall = sequence.next();\n        const thirdCall = sequence.next();\n        assert.equal(thirdCall.done, true);\n    });\n});\n"},"dist/test/folder_1/test_kata_14.spec.js":{"tests":[{"id":"26","name":"kata two five given 0 items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"27","name":"kata two five given 1 item and a NV state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"28","name":"kata two five given 1 item and a UT state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"29","name":"kata two five given 1 item and a TX state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"30","name":"kata two five given 1 item and a AL state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"31","name":"kata two five given 1 item and a CA state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"32","name":"kata two five given 1000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"33","name":"kata two five given 5000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"34","name":"kata two five given 7000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"35","name":"kata two five given 10000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"36","name":"kata two five given 50000 of items can accept an input of how many items, cost per item, state code, and calculate total value"}],"source":"import { assert } from 'chai';\nimport { input } from \"../../src/folder_1/14_kata.js\";\ndescribe('kata two five', function () {\n    it('given 0 items can accept an input of how many items, cost per item, state code, and calculate total value', function () {\n        const commands = [\n            \"0\",\n            \"5\",\n            \"NV\"\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, 0);\n    });\n    [\n        { state: \"NV\", multiplier: 1.08 },\n        { state: \"UT\", multiplier: 1.0685 },\n        { state: \"TX\", multiplier: 1.0625 },\n        { state: \"AL\", multiplier: 1.0400 },\n        { state: \"CA\", multiplier: 1.0825 },\n    ].forEach(({ state, multiplier }) => it(`given 1 item and a ${state} state code can accept an input of how many items, cost per item, state code, ` +\n        'and calculate total value', function () {\n        const commands = [\n            \"1\",\n            \"5\",\n            state\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, 5 * multiplier);\n    }));\n    [\n        { amount: \"1000\", discount: 0.03 },\n        { amount: \"5000\", discount: 0.05 },\n        { amount: \"7000\", discount: 0.07 },\n        { amount: \"10000\", discount: 0.10 },\n        { amount: \"50000\", discount: 0.15 },\n    ].forEach(({ amount, discount }) => it(`given ${amount} of items can accept an input of how many items, cost per item, state code, and calculate total value`, function () {\n        const commands = [\n            \"1\",\n            amount,\n            \"NV\"\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, +amount * (1 - discount) * (1.08));\n    }));\n});\n"},"dist/test/folder_1/test_kata_15.spec.js":{"tests":[{"id":"37","name":"can do battle five the vile zerg zergling will battle the epic terran marine"},{"id":"38","name":"can do battle five the vile zerg zergling will battle the epic protos zealot"},{"id":"39","name":"can do battle five the vile zerg zergling cannot hit a unit it has not run at"}],"source":"import { assert } from \"chai\";\nimport { Zergling, Marine, Zealot } from '../../src/folder_1/15_kata.js';\ndescribe('can do battle five', () => {\n    it('the vile zerg zergling will battle the epic terran marine', () => {\n        const marine = new Marine();\n        const zergling = new Zergling();\n        zergling.run(marine);\n        marine.shoot(zergling);\n        zergling.attack(marine);\n        marine.shoot(zergling);\n        assert.equal(marine.alive(), true);\n        assert.equal(zergling.alive(), false);\n    });\n    it('the vile zerg zergling will battle the epic protos zealot', () => {\n        const zealot = new Zealot();\n        const zergling = new Zergling();\n        zergling.run(zealot);\n        zealot.claw(zergling);\n        zergling.attack(zealot);\n        zealot.claw(zergling);\n        assert.equal(zealot.alive(), true);\n    });\n    it('the vile zerg zergling cannot hit a unit it has not run at', () => {\n        const zealot = new Zealot();\n        const zergling = new Zergling();\n        zergling.attack(zealot);\n        assert.equal(zealot.hitpointBar(), \"full\");\n    });\n});\n"},"dist/test/folder_1/test_kata_16.spec.js":{"tests":[{"id":"40","name":"hello world kata six should return hello world"},{"id":"41","name":"hello world kata six should use a generator function that returns hello"},{"id":"42","name":"hello world kata six should use a generator function that returns world on second call"},{"id":"43","name":"hello world kata six should use a generator function that returns done after three calls"}],"source":"import assert from \"node:assert\";\nimport HelloWorld, { helloWorldGenerator } from '../../src/folder_1/16_kata.js';\ndescribe('hello world kata six', function () {\n    it('should return hello world', function () {\n        assert.equal(HelloWorld(), \"Hello World\");\n    });\n    it('should use a generator function that returns hello', () => {\n        let firstCall = helloWorldGenerator().next();\n        assert.equal(firstCall.value, 'Hello');\n        assert.equal(firstCall.done, false);\n    });\n    it('should use a generator function that returns world on second call', () => {\n        let sequence = helloWorldGenerator();\n        sequence.next();\n        let secondCall = sequence.next();\n        assert.equal(secondCall.value, 'World');\n        assert.equal(secondCall.done, false);\n    });\n    it('should use a generator function that returns done after three calls', () => {\n        let sequence = helloWorldGenerator();\n        const firstCall = sequence.next();\n        const secondCall = sequence.next();\n        const thirdCall = sequence.next();\n        assert.equal(thirdCall.done, true);\n    });\n});\n"},"dist/test/folder_1/test_kata_17.spec.js":{"tests":[{"id":"44","name":"kata two six given 0 items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"45","name":"kata two six given 1 item and a NV state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"46","name":"kata two six given 1 item and a UT state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"47","name":"kata two six given 1 item and a TX state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"48","name":"kata two six given 1 item and a AL state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"49","name":"kata two six given 1 item and a CA state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"50","name":"kata two six given 1000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"51","name":"kata two six given 5000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"52","name":"kata two six given 7000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"53","name":"kata two six given 10000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"54","name":"kata two six given 50000 of items can accept an input of how many items, cost per item, state code, and calculate total value"}],"source":"import { assert } from 'chai';\nimport { input } from \"../../src/folder_1/17_kata.js\";\ndescribe('kata two six', function () {\n    it('given 0 items can accept an input of how many items, cost per item, state code, and calculate total value', function () {\n        const commands = [\n            \"0\",\n            \"5\",\n            \"NV\"\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, 0);\n    });\n    [\n        { state: \"NV\", multiplier: 1.08 },\n        { state: \"UT\", multiplier: 1.0685 },\n        { state: \"TX\", multiplier: 1.0625 },\n        { state: \"AL\", multiplier: 1.0400 },\n        { state: \"CA\", multiplier: 1.0825 },\n    ].forEach(({ state, multiplier }) => it(`given 1 item and a ${state} state code can accept an input of how many items, cost per item, state code, ` +\n        'and calculate total value', function () {\n        const commands = [\n            \"1\",\n            \"5\",\n            state\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, 5 * multiplier);\n    }));\n    [\n        { amount: \"1000\", discount: 0.03 },\n        { amount: \"5000\", discount: 0.05 },\n        { amount: \"7000\", discount: 0.07 },\n        { amount: \"10000\", discount: 0.10 },\n        { amount: \"50000\", discount: 0.15 },\n    ].forEach(({ amount, discount }) => it(`given ${amount} of items can accept an input of how many items, cost per item, state code, and calculate total value`, function () {\n        const commands = [\n            \"1\",\n            amount,\n            \"NV\"\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, +amount * (1 - discount) * (1.08));\n    }));\n});\n"},"dist/test/folder_1/test_kata_18.spec.js":{"tests":[{"id":"55","name":"can do battle six the vile zerg zergling will battle the epic terran marine"},{"id":"56","name":"can do battle six the vile zerg zergling will battle the epic protos zealot"},{"id":"57","name":"can do battle six the vile zerg zergling cannot hit a unit it has not run at"}],"source":"import { assert } from \"chai\";\nimport { Zergling, Marine, Zealot } from '../../src/folder_1/18_kata.js';\ndescribe('can do battle six', () => {\n    it('the vile zerg zergling will battle the epic terran marine', () => {\n        const marine = new Marine();\n        const zergling = new Zergling();\n        zergling.run(marine);\n        marine.shoot(zergling);\n        zergling.attack(marine);\n        marine.shoot(zergling);\n        assert.equal(marine.alive(), true);\n        assert.equal(zergling.alive(), false);\n    });\n    it('the vile zerg zergling will battle the epic protos zealot', () => {\n        const zealot = new Zealot();\n        const zergling = new Zergling();\n        zergling.run(zealot);\n        zealot.claw(zergling);\n        zergling.attack(zealot);\n        zealot.claw(zergling);\n        assert.equal(zealot.alive(), true);\n    });\n    it('the vile zerg zergling cannot hit a unit it has not run at', () => {\n        const zealot = new Zealot();\n        const zergling = new Zergling();\n        zergling.attack(zealot);\n        assert.equal(zealot.hitpointBar(), \"full\");\n    });\n});\n"},"dist/test/folder_1/test_kata_2.spec.js":{"tests":[{"id":"58","name":"kata two given 0 items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"59","name":"kata two given 1 item and a NV state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"60","name":"kata two given 1 item and a UT state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"61","name":"kata two given 1 item and a TX state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"62","name":"kata two given 1 item and a AL state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"63","name":"kata two given 1 item and a CA state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"64","name":"kata two given 1000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"65","name":"kata two given 5000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"66","name":"kata two given 7000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"67","name":"kata two given 10000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"68","name":"kata two given 50000 of items can accept an input of how many items, cost per item, state code, and calculate total value"}],"source":"import { assert } from 'chai';\nimport { input } from \"../../src/folder_1/2_kata.js\";\ndescribe('kata two', function () {\n    it('given 0 items can accept an input of how many items, cost per item, state code, and calculate total value', function () {\n        const commands = [\n            \"0\",\n            \"5\",\n            \"NV\"\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, 0);\n    });\n    [\n        { state: \"NV\", multiplier: 1.08 },\n        { state: \"UT\", multiplier: 1.0685 },\n        { state: \"TX\", multiplier: 1.0625 },\n        { state: \"AL\", multiplier: 1.0400 },\n        { state: \"CA\", multiplier: 1.0825 },\n    ].forEach(({ state, multiplier }) => it(`given 1 item and a ${state} state code can accept an input of how many items, cost per item, state code, ` +\n        'and calculate total value', function () {\n        const commands = [\n            \"1\",\n            \"5\",\n            state\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, 5 * multiplier);\n    }));\n    [\n        { amount: \"1000\", discount: 0.03 },\n        { amount: \"5000\", discount: 0.05 },\n        { amount: \"7000\", discount: 0.07 },\n        { amount: \"10000\", discount: 0.10 },\n        { amount: \"50000\", discount: 0.15 },\n    ].forEach(({ amount, discount }) => it(`given ${amount} of items can accept an input of how many items, cost per item, state code, and calculate total value`, function () {\n        const commands = [\n            \"1\",\n            amount,\n            \"NV\"\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, +amount * (1 - discount) * (1.08));\n    }));\n});\n"},"dist/test/folder_1/test_kata_3.spec.js":{"tests":[{"id":"69","name":"can do battle the vile zerg zergling will battle the epic terran marine"},{"id":"70","name":"can do battle the vile zerg zergling will battle the epic protos zealot"},{"id":"71","name":"can do battle the vile zerg zergling cannot hit a unit it has not run at"}],"source":"import { assert } from \"chai\";\nimport { Zergling, Marine, Zealot } from '../../src/folder_1/3_kata.js';\ndescribe('can do battle', () => {\n    it('the vile zerg zergling will battle the epic terran marine', () => {\n        const marine = new Marine();\n        const zergling = new Zergling();\n        zergling.run(marine);\n        marine.shoot(zergling);\n        zergling.attack(marine);\n        marine.shoot(zergling);\n        assert.equal(marine.alive(), true);\n        assert.equal(zergling.alive(), false);\n    });\n    it('the vile zerg zergling will battle the epic protos zealot', () => {\n        const zealot = new Zealot();\n        const zergling = new Zergling();\n        zergling.run(zealot);\n        zealot.claw(zergling);\n        zergling.attack(zealot);\n        zealot.claw(zergling);\n        assert.equal(zealot.alive(), true);\n    });\n    it('the vile zerg zergling cannot hit a unit it has not run at', () => {\n        const zealot = new Zealot();\n        const zergling = new Zergling();\n        zergling.attack(zealot);\n        assert.equal(zealot.hitpointBar(), \"full\");\n    });\n});\n"},"dist/test/folder_1/test_kata_4.spec.js":{"tests":[{"id":"72","name":"hello world kata two should return hello world"},{"id":"73","name":"hello world kata two should use a generator function that returns hello"},{"id":"74","name":"hello world kata two should use a generator function that returns world on second call"},{"id":"75","name":"hello world kata two should use a generator function that returns done after three calls"}],"source":"import assert from \"node:assert\";\nimport HelloWorld, { helloWorldGenerator } from '../../src/folder_1/4_kata.js';\ndescribe('hello world kata two', function () {\n    it('should return hello world', function () {\n        assert.equal(HelloWorld(), \"Hello World\");\n    });\n    it('should use a generator function that returns hello', () => {\n        let firstCall = helloWorldGenerator().next();\n        assert.equal(firstCall.value, 'Hello');\n        assert.equal(firstCall.done, false);\n    });\n    it('should use a generator function that returns world on second call', () => {\n        let sequence = helloWorldGenerator();\n        sequence.next();\n        let secondCall = sequence.next();\n        assert.equal(secondCall.value, 'World');\n        assert.equal(secondCall.done, false);\n    });\n    it('should use a generator function that returns done after three calls', () => {\n        let sequence = helloWorldGenerator();\n        const firstCall = sequence.next();\n        const secondCall = sequence.next();\n        const thirdCall = sequence.next();\n        assert.equal(thirdCall.done, true);\n    });\n});\n"},"dist/test/folder_1/test_kata_5.spec.js":{"tests":[{"id":"76","name":"kata two two given 0 items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"77","name":"kata two two given 1 item and a NV state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"78","name":"kata two two given 1 item and a UT state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"79","name":"kata two two given 1 item and a TX state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"80","name":"kata two two given 1 item and a AL state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"81","name":"kata two two given 1 item and a CA state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"82","name":"kata two two given 1000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"83","name":"kata two two given 5000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"84","name":"kata two two given 7000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"85","name":"kata two two given 10000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"86","name":"kata two two given 50000 of items can accept an input of how many items, cost per item, state code, and calculate total value"}],"source":"import { assert } from 'chai';\nimport { input } from \"../../src/folder_1/5_kata.js\";\ndescribe('kata two two', function () {\n    it('given 0 items can accept an input of how many items, cost per item, state code, and calculate total value', function () {\n        const commands = [\n            \"0\",\n            \"5\",\n            \"NV\"\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, 0);\n    });\n    [\n        { state: \"NV\", multiplier: 1.08 },\n        { state: \"UT\", multiplier: 1.0685 },\n        { state: \"TX\", multiplier: 1.0625 },\n        { state: \"AL\", multiplier: 1.0400 },\n        { state: \"CA\", multiplier: 1.0825 },\n    ].forEach(({ state, multiplier }) => it(`given 1 item and a ${state} state code can accept an input of how many items, cost per item, state code, ` +\n        'and calculate total value', function () {\n        const commands = [\n            \"1\",\n            \"5\",\n            state\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, 5 * multiplier);\n    }));\n    [\n        { amount: \"1000\", discount: 0.03 },\n        { amount: \"5000\", discount: 0.05 },\n        { amount: \"7000\", discount: 0.07 },\n        { amount: \"10000\", discount: 0.10 },\n        { amount: \"50000\", discount: 0.15 },\n    ].forEach(({ amount, discount }) => it(`given ${amount} of items can accept an input of how many items, cost per item, state code, and calculate total value`, function () {\n        const commands = [\n            \"1\",\n            amount,\n            \"NV\"\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, +amount * (1 - discount) * (1.08));\n    }));\n});\n"},"dist/test/folder_1/test_kata_6.spec.js":{"tests":[{"id":"87","name":"can do battle two the vile zerg zergling will battle the epic terran marine"},{"id":"88","name":"can do battle two the vile zerg zergling will battle the epic protos zealot"},{"id":"89","name":"can do battle two the vile zerg zergling cannot hit a unit it has not run at"}],"source":"import { assert } from \"chai\";\nimport { Zergling, Marine, Zealot } from '../../src/folder_1/6_kata.js';\ndescribe('can do battle two', () => {\n    it('the vile zerg zergling will battle the epic terran marine', () => {\n        const marine = new Marine();\n        const zergling = new Zergling();\n        zergling.run(marine);\n        marine.shoot(zergling);\n        zergling.attack(marine);\n        marine.shoot(zergling);\n        assert.equal(marine.alive(), true);\n        assert.equal(zergling.alive(), false);\n    });\n    it('the vile zerg zergling will battle the epic protos zealot', () => {\n        const zealot = new Zealot();\n        const zergling = new Zergling();\n        zergling.run(zealot);\n        zealot.claw(zergling);\n        zergling.attack(zealot);\n        zealot.claw(zergling);\n        assert.equal(zealot.alive(), true);\n    });\n    it('the vile zerg zergling cannot hit a unit it has not run at', () => {\n        const zealot = new Zealot();\n        const zergling = new Zergling();\n        zergling.attack(zealot);\n        assert.equal(zealot.hitpointBar(), \"full\");\n    });\n});\n"},"dist/test/folder_1/test_kata_7.spec.js":{"tests":[{"id":"90","name":"hello world kata three should return hello world"},{"id":"91","name":"hello world kata three should use a generator function that returns hello"},{"id":"92","name":"hello world kata three should use a generator function that returns world on second call"},{"id":"93","name":"hello world kata three should use a generator function that returns done after three calls"}],"source":"import assert from \"node:assert\";\nimport HelloWorld, { helloWorldGenerator } from '../../src/folder_1/7_kata.js';\ndescribe('hello world kata three', function () {\n    it('should return hello world', function () {\n        assert.equal(HelloWorld(), \"Hello World\");\n    });\n    it('should use a generator function that returns hello', () => {\n        let firstCall = helloWorldGenerator().next();\n        assert.equal(firstCall.value, 'Hello');\n        assert.equal(firstCall.done, false);\n    });\n    it('should use a generator function that returns world on second call', () => {\n        let sequence = helloWorldGenerator();\n        sequence.next();\n        let secondCall = sequence.next();\n        assert.equal(secondCall.value, 'World');\n        assert.equal(secondCall.done, false);\n    });\n    it('should use a generator function that returns done after three calls', () => {\n        let sequence = helloWorldGenerator();\n        const firstCall = sequence.next();\n        const secondCall = sequence.next();\n        const thirdCall = sequence.next();\n        assert.equal(thirdCall.done, true);\n    });\n});\n"},"dist/test/folder_1/test_kata_8.spec.js":{"tests":[{"id":"94","name":"kata two three given 0 items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"95","name":"kata two three given 1 item and a NV state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"96","name":"kata two three given 1 item and a UT state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"97","name":"kata two three given 1 item and a TX state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"98","name":"kata two three given 1 item and a AL state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"99","name":"kata two three given 1 item and a CA state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"100","name":"kata two three given 1000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"101","name":"kata two three given 5000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"102","name":"kata two three given 7000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"103","name":"kata two three given 10000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"104","name":"kata two three given 50000 of items can accept an input of how many items, cost per item, state code, and calculate total value"}],"source":"import { assert } from 'chai';\nimport { input } from \"../../src/folder_1/8_kata.js\";\ndescribe('kata two three', function () {\n    it('given 0 items can accept an input of how many items, cost per item, state code, and calculate total value', function () {\n        const commands = [\n            \"0\",\n            \"5\",\n            \"NV\"\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, 0);\n    });\n    [\n        { state: \"NV\", multiplier: 1.08 },\n        { state: \"UT\", multiplier: 1.0685 },\n        { state: \"TX\", multiplier: 1.0625 },\n        { state: \"AL\", multiplier: 1.0400 },\n        { state: \"CA\", multiplier: 1.0825 },\n    ].forEach(({ state, multiplier }) => it(`given 1 item and a ${state} state code can accept an input of how many items, cost per item, state code, ` +\n        'and calculate total value', function () {\n        const commands = [\n            \"1\",\n            \"5\",\n            state\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, 5 * multiplier);\n    }));\n    [\n        { amount: \"1000\", discount: 0.03 },\n        { amount: \"5000\", discount: 0.05 },\n        { amount: \"7000\", discount: 0.07 },\n        { amount: \"10000\", discount: 0.10 },\n        { amount: \"50000\", discount: 0.15 },\n    ].forEach(({ amount, discount }) => it(`given ${amount} of items can accept an input of how many items, cost per item, state code, and calculate total value`, function () {\n        const commands = [\n            \"1\",\n            amount,\n            \"NV\"\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, +amount * (1 - discount) * (1.08));\n    }));\n});\n"},"dist/test/folder_1/test_kata_9.spec.js":{"tests":[{"id":"105","name":"can do battle three the vile zerg zergling will battle the epic terran marine"},{"id":"106","name":"can do battle three the vile zerg zergling will battle the epic protos zealot"},{"id":"107","name":"can do battle three the vile zerg zergling cannot hit a unit it has not run at"}],"source":"import { assert } from \"chai\";\nimport { Zergling, Marine, Zealot } from '../../src/folder_1/9_kata.js';\ndescribe('can do battle three', () => {\n    it('the vile zerg zergling will battle the epic terran marine', () => {\n        const marine = new Marine();\n        const zergling = new Zergling();\n        zergling.run(marine);\n        marine.shoot(zergling);\n        zergling.attack(marine);\n        marine.shoot(zergling);\n        assert.equal(marine.alive(), true);\n        assert.equal(zergling.alive(), false);\n    });\n    it('the vile zerg zergling will battle the epic protos zealot', () => {\n        const zealot = new Zealot();\n        const zergling = new Zergling();\n        zergling.run(zealot);\n        zealot.claw(zergling);\n        zergling.attack(zealot);\n        zealot.claw(zergling);\n        assert.equal(zealot.alive(), true);\n    });\n    it('the vile zerg zergling cannot hit a unit it has not run at', () => {\n        const zealot = new Zealot();\n        const zergling = new Zergling();\n        zergling.attack(zealot);\n        assert.equal(zealot.hitpointBar(), \"full\");\n    });\n});\n"}},"projectRoot":"C:\\Users\\evano\\WebstormProjects\\JavascriptKata","config":{"$schema":"./node_modules/@stryker-mutator/core/schema/stryker-schema.json","_comment":"This config was generated using 'stryker init'. Please take a look at: https://stryker-mutator.io/docs/stryker-js/configuration/ for more information.","packageManager":"npm","reporters":["html","json","clear-text","progress"],"tsconfigFile":"tsconfig.json","testRunner":"mocha","testRunner_comment":"Take a look at https://stryker-mutator.io/docs/stryker-js/mocha-runner for information about the mocha plugin.","coverageAnalysis":"perTest","buildCommand":"npm run build","mochaOptions":{"spec":["dist/**/*.spec.js"]},"allowConsoleColors":true,"checkers":[],"checkerNodeArgs":[],"commandRunner":{"command":"npm test"},"clearTextReporter":{"allowColor":true,"allowEmojis":false,"logTests":true,"maxTestsToLog":3,"reportTests":true,"reportMutants":true,"reportScoreTable":true,"skipFull":false},"dashboard":{"baseUrl":"https://dashboard.stryker-mutator.io/api/reports","reportType":"full"},"dryRunOnly":false,"eventReporter":{"baseDir":"reports/mutation/events"},"ignorePatterns":[],"ignoreStatic":false,"incremental":false,"incrementalFile":"reports/stryker-incremental.json","force":false,"fileLogLevel":"off","inPlace":false,"logLevel":"info","maxConcurrentTestRunners":9007199254740991,"maxTestRunnerReuse":0,"mutate":["{src,lib}/**/!(*.+(s|S)pec|*.+(t|T)est).+(cjs|mjs|js|ts|mts|cts|jsx|tsx|html|vue|svelte)","!{src,lib}/**/__tests__/**/*.+(cjs|mjs|js|ts|mts|cts|jsx|tsx|html|vue|svelte)"],"mutator":{"plugins":null,"excludedMutations":[]},"plugins":["@stryker-mutator/*"],"appendPlugins":[],"htmlReporter":{"fileName":"reports/mutation/mutation.html"},"jsonReporter":{"fileName":"reports/mutation/mutation.json"},"disableTypeChecks":true,"symlinkNodeModules":true,"tempDirName":".stryker-tmp","cleanTempDir":true,"testRunnerNodeArgs":[],"thresholds":{"high":80,"low":60,"break":null},"timeoutFactor":1.5,"timeoutMS":5000,"dryRunTimeoutMinutes":5,"warnings":true,"disableBail":false,"allowEmpty":false,"ignorers":[]},"framework":{"name":"StrykerJS","version":"9.0.1","branding":{"homepageUrl":"https://stryker-mutator.io","imageUrl":"data:image/svg+xml;utf8,%3Csvg viewBox='0 0 1458 1458' xmlns='http://www.w3.org/2000/svg' fill-rule='evenodd' clip-rule='evenodd' stroke-linejoin='round' stroke-miterlimit='2'%3E%3Cpath fill='none' d='M0 0h1458v1458H0z'/%3E%3CclipPath id='a'%3E%3Cpath d='M0 0h1458v1458H0z'/%3E%3C/clipPath%3E%3Cg clip-path='url(%23a)'%3E%3Cpath d='M1458 729c0 402.655-326.345 729-729 729S0 1131.655 0 729C0 326.445 326.345 0 729 0s729 326.345 729 729' fill='%23e74c3c' fill-rule='nonzero'/%3E%3Cpath d='M778.349 1456.15L576.6 1254.401l233-105 85-78.668v-64.332l-257-257-44-187-50-208 251.806-82.793L1076.6 389.401l380.14 379.15c-19.681 367.728-311.914 663.049-678.391 687.599z' fill-opacity='.3'/%3E%3Cpath d='M753.4 329.503c41.79 0 74.579 7.83 97.925 25.444 23.571 18.015 41.69 43.956 55.167 77.097l11.662 28.679 165.733-58.183-14.137-32.13c-26.688-60.655-64.896-108.61-114.191-144.011-49.329-35.423-117.458-54.302-204.859-54.302-50.78 0-95.646 7.376-134.767 21.542-40.093 14.671-74.09 34.79-102.239 60.259-28.84 26.207-50.646 57.06-65.496 92.701-14.718 35.052-22.101 72.538-22.101 112.401 0 72.536 20.667 133.294 61.165 182.704 38.624 47.255 98.346 88.037 179.861 121.291 42.257 17.475 78.715 33.125 109.227 46.994 27.193 12.361 49.294 26.124 66.157 41.751 15.309 14.186 26.497 30.584 33.63 49.258 7.721 20.214 11.16 45.69 11.16 76.402 0 28.021-4.251 51.787-13.591 71.219-8.832 18.374-20.171 33.178-34.523 44.219-14.787 11.374-31.193 19.591-49.393 24.466-19.68 5.359-39.14 7.993-58.69 7.993-29.359 0-54.387-3.407-75.182-10.747-20.112-7.013-37.144-16.144-51.259-27.486-13.618-11.009-24.971-23.766-33.744-38.279-9.64-15.8-17.272-31.924-23.032-48.408l-10.965-31.376-161.669 60.585 10.734 30.124c10.191 28.601 24.197 56.228 42.059 82.748 18.208 27.144 41.322 51.369 69.525 72.745 27.695 21.075 60.904 38.218 99.481 51.041 37.777 12.664 82.004 19.159 132.552 19.159 49.998 0 95.818-8.321 137.611-24.622 42.228-16.471 78.436-38.992 108.835-67.291 30.719-28.597 54.631-62.103 71.834-100.642 17.263-38.56 25.923-79.392 25.923-122.248 0-54.339-8.368-100.37-24.208-138.32-16.29-38.759-38.252-71.661-65.948-98.797-26.965-26.418-58.269-48.835-93.858-67.175-33.655-17.241-69.196-33.11-106.593-47.533-35.934-13.429-65.822-26.601-89.948-39.525-22.153-11.868-40.009-24.21-53.547-37.309-11.429-11.13-19.83-23.678-24.718-37.664-5.413-15.49-7.98-33.423-7.98-53.577 0-40.883 11.293-71.522 37.086-90.539 28.443-20.825 64.985-30.658 109.311-30.658z' fill='%23f1c40f' fill-rule='nonzero'/%3E%3Cpath d='M720 0h18v113h-18zM1458 738v-18h-113v18h113zM720 1345h18v113h-18zM113 738v-18H0v18h113z'/%3E%3C/g%3E%3C/svg%3E"},"dependencies":{"@stryker-mutator/mocha-runner":"9.0.1","mocha":"11.7.1","typescript":"5.8.3"}}};
       function updateTheme() {
         document.body.style.backgroundColor = app.themeBackgroundColor;
       }
diff --git a/reports/mutation/mutation.json b/reports/mutation/mutation.json
index 7704446..b129c58 100644
--- a/reports/mutation/mutation.json
+++ b/reports/mutation/mutation.json
@@ -1 +1 @@
-{"files":{"src/3_kata.ts":{"language":"typescript","mutants":[{"id":"43","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":31},"start":{"column":31,"line":29}}},{"id":"49","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":48},"start":{"column":31,"line":46}}},{"id":"61","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":26,"line":66},"start":{"column":16,"line":66}}},{"id":"30","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["15","16","17"],"location":{"end":{"column":29,"line":8},"start":{"column":27,"line":8}}},{"id":"32","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":3,"killedBy":["17"],"coveredBy":["15","16","17"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"31","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["15","16","17"],"location":{"end":{"column":6,"line":13},"start":{"column":31,"line":9}}},{"id":"33","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["15","16","17"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"34","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["15","16"],"location":{"end":{"column":10,"line":12},"start":{"column":45,"line":10}}},{"id":"35","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["15"],"coveredBy":["15"],"location":{"end":{"column":6,"line":17},"start":{"column":22,"line":15}}},{"id":"36","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["15"],"coveredBy":["15"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"37","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["15"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"38","mutatorName":"EqualityOperator","replacement":"this.hitpoints >= 0","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["15"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"39","mutatorName":"EqualityOperator","replacement":"this.hitpoints <= 0","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["15"],"coveredBy":["15"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"40","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["15","16"],"location":{"end":{"column":6,"line":21},"start":{"column":28,"line":19}}},{"id":"41","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["15"],"coveredBy":["15","16"],"location":{"end":{"column":6,"line":25},"start":{"column":32,"line":23}}},{"id":"42","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["15"],"coveredBy":["15","16"],"location":{"end":{"column":33,"line":24},"start":{"column":9,"line":24}}},{"id":"44","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["15"],"coveredBy":["15"],"location":{"end":{"column":6,"line":35},"start":{"column":22,"line":33}}},{"id":"45","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected false to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["15"],"coveredBy":["15"],"location":{"end":{"column":20,"line":34},"start":{"column":16,"line":34}}},{"id":"46","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["15"],"coveredBy":["15"],"location":{"end":{"column":6,"line":39},"start":{"column":30,"line":37}}},{"id":"47","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["15"],"location":{"end":{"column":6,"line":42},"start":{"column":32,"line":40}}},{"id":"48","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["15"],"location":{"end":{"column":33,"line":41},"start":{"column":9,"line":41}}},{"id":"50","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["16"],"coveredBy":["16"],"location":{"end":{"column":6,"line":52},"start":{"column":22,"line":50}}},{"id":"51","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected false to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["16"],"coveredBy":["16"],"location":{"end":{"column":20,"line":51},"start":{"column":16,"line":51}}},{"id":"52","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["16"],"location":{"end":{"column":6,"line":56},"start":{"column":29,"line":54}}},{"id":"53","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["16"],"location":{"end":{"column":6,"line":60},"start":{"column":32,"line":58}}},{"id":"54","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["16"],"location":{"end":{"column":33,"line":59},"start":{"column":9,"line":59}}},{"id":"56","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["17"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"55","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["17"],"coveredBy":["17"],"location":{"end":{"column":6,"line":67},"start":{"column":27,"line":62}}},{"id":"57","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["17"],"coveredBy":["17"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"58","mutatorName":"EqualityOperator","replacement":"this.hitpoints !== 2","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["17"],"coveredBy":["17"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"59","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["17"],"coveredBy":["17"],"location":{"end":{"column":10,"line":65},"start":{"column":35,"line":63}}},{"id":"60","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected '' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["17"],"coveredBy":["17"],"location":{"end":{"column":26,"line":64},"start":{"column":20,"line":64}}}],"source":"﻿interface IUnit {\r\n    attack(unit: IUnit): void;\r\n    alive(): boolean;\r\n    hurt(damage: number): void;\r\n}\r\nexport class Zergling implements IUnit {\r\n    hitpoints = 1;\r\n    closeUnits: IUnit[] = [];\r\n    attack(unit: IUnit): void {\r\n        if (this.closeUnits.includes(unit)) {\r\n            unit.hurt(1);\r\n        }\r\n    }\r\n\r\n    alive(): boolean {\r\n        return this.hitpoints > 0;\r\n    }\r\n\r\n    run(unit: IUnit): void {\r\n        this.closeUnits.push(unit);\r\n    }\r\n\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n}\r\nexport class Marine implements IUnit {\r\n    hitpoints = 2;\r\n    attack(unit: IUnit): void {\r\n        this.shoot(unit);\r\n    }\r\n\r\n    alive(): boolean {\r\n        return true;\r\n    }\r\n\r\n    shoot(unit: IUnit): void {\r\n        unit.hurt(1);\r\n    }\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n}\r\nexport class Zealot implements IUnit {\r\n    hitpoints = 2;\r\n    attack(unit: IUnit): void {\r\n        this.claw(unit);\r\n    }\r\n\r\n    alive(): boolean {\r\n        return true;\r\n    }\r\n\r\n    claw(unit: IUnit): void {\r\n        unit.hurt(2);\r\n    }\r\n\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n\r\n    hitpointBar(): string {\r\n        if (this.hitpoints === 2) {\r\n            return \"full\";\r\n        }\r\n        return \"not full\";\r\n    }\r\n}"},"src/1_kata.ts":{"language":"typescript","mutants":[{"id":"1","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"' World' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0","1","2","3"],"location":{"end":{"column":18,"line":2},"start":{"column":11,"line":2}}},{"id":"2","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"'Hello ' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0","2","3"],"location":{"end":{"column":18,"line":3},"start":{"column":11,"line":3}}},{"id":"3","mutatorName":"BlockStatement","replacement":"{}","statusReason":"undefined == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0"],"location":{"end":{"column":2,"line":8},"start":{"column":38,"line":6}}},{"id":"4","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"'HelloWorld' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0"],"location":{"end":{"column":54,"line":7},"start":{"column":51,"line":7}}},{"id":"0","mutatorName":"BlockStatement","replacement":"{}","statusReason":"'' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0","1","2","3"],"location":{"end":{"column":2,"line":4},"start":{"column":40,"line":1}}}],"source":"export function* helloWorldGenerator() {\n    yield 'Hello';\n    yield 'World';\n}\n\nexport default function HelloWorld() {\n    return Array.from(helloWorldGenerator()).join(' ');\n}\n"},"src/2_kata.ts":{"language":"typescript","mutants":[{"id":"5","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["4"],"coveredBy":["4","5","6","7","8","9","10","11","12","13","14"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"6","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["5"],"coveredBy":["4","5","6","7","8","9","10","11","12","13","14"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"7","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["5"],"coveredBy":["4","5","6","7","8","9","10","11","12","13","14"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"8","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["5"],"coveredBy":["4","5","6","7","8","9","10","11","12","13","14"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"9","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["10"],"coveredBy":["4","5","6","7","8","9","10","11","12","13","14"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"10","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["14"],"coveredBy":["4","5","6","7","8","9","10","11","12","13","14"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"12","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["12"],"coveredBy":["4","5","6","7","8","9","10","11","12","13","14"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"13","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["11"],"coveredBy":["4","5","6","7","8","9","10","11","12","13","14"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"11","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["13"],"coveredBy":["4","5","6","7","8","9","10","11","12","13","14"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"14","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["10"],"coveredBy":["4","5","6","7","8","9","10","11","12","13","14"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"15","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["10"],"coveredBy":["4","5","6","7","8","9","10","11","12","13","14"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"16","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["10"],"coveredBy":["4","5","6","7","8","9","10","11","12","13","14"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"17","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["5"],"coveredBy":["4","5","6","7","8","9","10","11","12","13","14"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"18","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["10"],"coveredBy":["4","5","6","7","8","9","10","11","12","13","14"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"19","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["10"],"coveredBy":["4","5","6","7","8","9","10","11","12","13","14"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"20","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["5"],"coveredBy":["4","5","6","7","8","9","10","11","12","13","14"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"22","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 - discount)","statusReason":"expected 1113.4020618556704 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["10"],"coveredBy":["10","11","12","13","14"],"location":{"end":{"column":51,"line":14},"start":{"column":25,"line":14}}},{"id":"21","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["10"],"coveredBy":["10","11","12","13","14"],"location":{"end":{"column":10,"line":16},"start":{"column":34,"line":13}}},{"id":"23","mutatorName":"ArithmeticOperator","replacement":"1 + discount","statusReason":"expected 1112.4 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["10"],"coveredBy":["10","11","12","13","14"],"location":{"end":{"column":50,"line":14},"start":{"column":38,"line":14}}},{"id":"24","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected 4976.1 to equal 5130","status":"Killed","static":false,"testsCompleted":2,"killedBy":["11"],"coveredBy":["10","11","12","13","14"],"location":{"end":{"column":24,"line":15},"start":{"column":20,"line":15}}},{"id":"26","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["4"],"coveredBy":["4","5","6","7","8","9","10","11","12","13","14"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"25","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["10"],"coveredBy":["4","5","6","7","8","9","10","11","12","13"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"27","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["5"],"coveredBy":["4","5","6","7","8","9","10","11","12","13","14"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"28","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["5"],"coveredBy":["4","5","6","7","8","9","10","11","12","13","14"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"29","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["5"],"coveredBy":["4","5","6","7","8","9","10","11","12","13","14"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}],"source":"﻿\r\n\r\nexport const input = (commands) => {\r\n    let totalCost = +commands[0] * +commands[1];\r\n    const volumeDiscount = [\r\n        { volume: 50000, discount: 0.15 },\r\n        { volume: 10000, discount: 0.10 },\r\n        { volume: 7000, discount: 0.07 },\r\n        { volume: 5000, discount: 0.05 },\r\n        { volume: 1000, discount: 0.03 },\r\n    ]\r\n    volumeDiscount.some(({volume, discount}, idx) => {\r\n        if (totalCost >= volume) {\r\n            totalCost = totalCost * (1 - discount)\r\n            return true;\r\n        }\r\n        return false;\r\n    })\r\n    const stateTaxes = {\r\n        UT: 6.85,\r\n        NV: 8.00,\r\n        TX: 6.25,\r\n        AL: 4.00,\r\n        CA: 8.25,\r\n    }\r\n    return totalCost * (1 + stateTaxes[commands[2]] / 100);\r\n}"}},"schemaVersion":"1.0","thresholds":{"high":80,"low":60,"break":null},"testFiles":{"dist/test/test_kata_1.spec.js":{"tests":[{"id":"0","name":"hello world kata should return hello world"},{"id":"1","name":"hello world kata should use a generator function that returns hello"},{"id":"2","name":"hello world kata should use a generator function that returns world on second call"},{"id":"3","name":"hello world kata should use a generator function that returns done after three calls"}],"source":"import assert from \"node:assert\";\nimport HelloWorld, { helloWorldGenerator } from '../src/1_kata.js';\ndescribe('hello world kata', function () {\n    it('should return hello world', function () {\n        assert.equal(HelloWorld(), \"Hello World\");\n    });\n    it('should use a generator function that returns hello', () => {\n        let firstCall = helloWorldGenerator().next();\n        assert.equal(firstCall.value, 'Hello');\n        assert.equal(firstCall.done, false);\n    });\n    it('should use a generator function that returns world on second call', () => {\n        let sequence = helloWorldGenerator();\n        sequence.next();\n        let secondCall = sequence.next();\n        assert.equal(secondCall.value, 'World');\n        assert.equal(secondCall.done, false);\n    });\n    it('should use a generator function that returns done after three calls', () => {\n        let sequence = helloWorldGenerator();\n        const firstCall = sequence.next();\n        const secondCall = sequence.next();\n        const thirdCall = sequence.next();\n        assert.equal(thirdCall.done, true);\n    });\n});\n"},"dist/test/test_kata_2.spec.js":{"tests":[{"id":"4","name":"kata two given 0 items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"5","name":"kata two given 1 item and a NV state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"6","name":"kata two given 1 item and a UT state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"7","name":"kata two given 1 item and a TX state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"8","name":"kata two given 1 item and a AL state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"9","name":"kata two given 1 item and a CA state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"10","name":"kata two given 1000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"11","name":"kata two given 5000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"12","name":"kata two given 7000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"13","name":"kata two given 10000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"14","name":"kata two given 50000 of items can accept an input of how many items, cost per item, state code, and calculate total value"}],"source":"import { assert } from 'chai';\nimport { input } from \"../src/2_kata.js\";\ndescribe('kata two', function () {\n    it('given 0 items can accept an input of how many items, cost per item, state code, and calculate total value', function () {\n        const commands = [\n            \"0\",\n            \"5\",\n            \"NV\"\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, 0);\n    });\n    [\n        { state: \"NV\", multiplier: 1.08 },\n        { state: \"UT\", multiplier: 1.0685 },\n        { state: \"TX\", multiplier: 1.0625 },\n        { state: \"AL\", multiplier: 1.0400 },\n        { state: \"CA\", multiplier: 1.0825 },\n    ].forEach(({ state, multiplier }) => it(`given 1 item and a ${state} state code can accept an input of how many items, cost per item, state code, ` +\n        'and calculate total value', function () {\n        const commands = [\n            \"1\",\n            \"5\",\n            state\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, 5 * multiplier);\n    }));\n    [\n        { amount: \"1000\", discount: 0.03 },\n        { amount: \"5000\", discount: 0.05 },\n        { amount: \"7000\", discount: 0.07 },\n        { amount: \"10000\", discount: 0.10 },\n        { amount: \"50000\", discount: 0.15 },\n    ].forEach(({ amount, discount }) => it(`given ${amount} of items can accept an input of how many items, cost per item, state code, and calculate total value`, function () {\n        const commands = [\n            \"1\",\n            amount,\n            \"NV\"\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, +amount * (1 - discount) * (1.08));\n    }));\n});\n"},"dist/test/test_kata_3.spec.js":{"tests":[{"id":"15","name":"can do battle the vile zerg zergling will battle the epic terran marine"},{"id":"16","name":"can do battle the vile zerg zergling will battle the epic protos zealot"},{"id":"17","name":"can do battle the vile zerg zergling cannot hit a unit it has not run at"}],"source":"import { assert } from \"chai\";\nimport { Zergling, Marine, Zealot } from '../src/3_kata.js';\ndescribe('can do battle', () => {\n    it('the vile zerg zergling will battle the epic terran marine', () => {\n        const marine = new Marine();\n        const zergling = new Zergling();\n        zergling.run(marine);\n        marine.shoot(zergling);\n        zergling.attack(marine);\n        marine.shoot(zergling);\n        assert.equal(marine.alive(), true);\n        assert.equal(zergling.alive(), false);\n    });\n    it('the vile zerg zergling will battle the epic protos zealot', () => {\n        const zealot = new Zealot();\n        const zergling = new Zergling();\n        zergling.run(zealot);\n        zealot.claw(zergling);\n        zergling.attack(zealot);\n        zealot.claw(zergling);\n        assert.equal(zealot.alive(), true);\n    });\n    it('the vile zerg zergling cannot hit a unit it has not run at', () => {\n        const zealot = new Zealot();\n        const zergling = new Zergling();\n        zergling.attack(zealot);\n        assert.equal(zealot.hitpointBar(), \"full\");\n    });\n});\n"}},"projectRoot":"C:\\Users\\evano\\WebstormProjects\\JavascriptKata","config":{"$schema":"./node_modules/@stryker-mutator/core/schema/stryker-schema.json","_comment":"This config was generated using 'stryker init'. Please take a look at: https://stryker-mutator.io/docs/stryker-js/configuration/ for more information.","packageManager":"npm","reporters":["html","json","clear-text","progress"],"tsconfigFile":"tsconfig.json","testRunner":"mocha","testRunner_comment":"Take a look at https://stryker-mutator.io/docs/stryker-js/mocha-runner for information about the mocha plugin.","coverageAnalysis":"perTest","buildCommand":"npm run build","mochaOptions":{"spec":["dist/**/*.spec.js"]},"allowConsoleColors":true,"checkers":[],"checkerNodeArgs":[],"commandRunner":{"command":"npm test"},"clearTextReporter":{"allowColor":true,"allowEmojis":false,"logTests":true,"maxTestsToLog":3,"reportTests":true,"reportMutants":true,"reportScoreTable":true,"skipFull":false},"dashboard":{"baseUrl":"https://dashboard.stryker-mutator.io/api/reports","reportType":"full"},"dryRunOnly":false,"eventReporter":{"baseDir":"reports/mutation/events"},"ignorePatterns":[],"ignoreStatic":false,"incremental":false,"incrementalFile":"reports/stryker-incremental.json","force":false,"fileLogLevel":"off","inPlace":false,"logLevel":"info","maxConcurrentTestRunners":9007199254740991,"maxTestRunnerReuse":0,"mutate":["{src,lib}/**/!(*.+(s|S)pec|*.+(t|T)est).+(cjs|mjs|js|ts|mts|cts|jsx|tsx|html|vue|svelte)","!{src,lib}/**/__tests__/**/*.+(cjs|mjs|js|ts|mts|cts|jsx|tsx|html|vue|svelte)"],"mutator":{"plugins":null,"excludedMutations":[]},"plugins":["@stryker-mutator/*"],"appendPlugins":[],"htmlReporter":{"fileName":"reports/mutation/mutation.html"},"jsonReporter":{"fileName":"reports/mutation/mutation.json"},"disableTypeChecks":true,"symlinkNodeModules":true,"tempDirName":".stryker-tmp","cleanTempDir":true,"testRunnerNodeArgs":[],"thresholds":{"high":80,"low":60,"break":null},"timeoutFactor":1.5,"timeoutMS":5000,"dryRunTimeoutMinutes":5,"warnings":true,"disableBail":false,"allowEmpty":false,"ignorers":[]},"framework":{"name":"StrykerJS","version":"9.0.1","branding":{"homepageUrl":"https://stryker-mutator.io","imageUrl":"data:image/svg+xml;utf8,%3Csvg viewBox='0 0 1458 1458' xmlns='http://www.w3.org/2000/svg' fill-rule='evenodd' clip-rule='evenodd' stroke-linejoin='round' stroke-miterlimit='2'%3E%3Cpath fill='none' d='M0 0h1458v1458H0z'/%3E%3CclipPath id='a'%3E%3Cpath d='M0 0h1458v1458H0z'/%3E%3C/clipPath%3E%3Cg clip-path='url(%23a)'%3E%3Cpath d='M1458 729c0 402.655-326.345 729-729 729S0 1131.655 0 729C0 326.445 326.345 0 729 0s729 326.345 729 729' fill='%23e74c3c' fill-rule='nonzero'/%3E%3Cpath d='M778.349 1456.15L576.6 1254.401l233-105 85-78.668v-64.332l-257-257-44-187-50-208 251.806-82.793L1076.6 389.401l380.14 379.15c-19.681 367.728-311.914 663.049-678.391 687.599z' fill-opacity='.3'/%3E%3Cpath d='M753.4 329.503c41.79 0 74.579 7.83 97.925 25.444 23.571 18.015 41.69 43.956 55.167 77.097l11.662 28.679 165.733-58.183-14.137-32.13c-26.688-60.655-64.896-108.61-114.191-144.011-49.329-35.423-117.458-54.302-204.859-54.302-50.78 0-95.646 7.376-134.767 21.542-40.093 14.671-74.09 34.79-102.239 60.259-28.84 26.207-50.646 57.06-65.496 92.701-14.718 35.052-22.101 72.538-22.101 112.401 0 72.536 20.667 133.294 61.165 182.704 38.624 47.255 98.346 88.037 179.861 121.291 42.257 17.475 78.715 33.125 109.227 46.994 27.193 12.361 49.294 26.124 66.157 41.751 15.309 14.186 26.497 30.584 33.63 49.258 7.721 20.214 11.16 45.69 11.16 76.402 0 28.021-4.251 51.787-13.591 71.219-8.832 18.374-20.171 33.178-34.523 44.219-14.787 11.374-31.193 19.591-49.393 24.466-19.68 5.359-39.14 7.993-58.69 7.993-29.359 0-54.387-3.407-75.182-10.747-20.112-7.013-37.144-16.144-51.259-27.486-13.618-11.009-24.971-23.766-33.744-38.279-9.64-15.8-17.272-31.924-23.032-48.408l-10.965-31.376-161.669 60.585 10.734 30.124c10.191 28.601 24.197 56.228 42.059 82.748 18.208 27.144 41.322 51.369 69.525 72.745 27.695 21.075 60.904 38.218 99.481 51.041 37.777 12.664 82.004 19.159 132.552 19.159 49.998 0 95.818-8.321 137.611-24.622 42.228-16.471 78.436-38.992 108.835-67.291 30.719-28.597 54.631-62.103 71.834-100.642 17.263-38.56 25.923-79.392 25.923-122.248 0-54.339-8.368-100.37-24.208-138.32-16.29-38.759-38.252-71.661-65.948-98.797-26.965-26.418-58.269-48.835-93.858-67.175-33.655-17.241-69.196-33.11-106.593-47.533-35.934-13.429-65.822-26.601-89.948-39.525-22.153-11.868-40.009-24.21-53.547-37.309-11.429-11.13-19.83-23.678-24.718-37.664-5.413-15.49-7.98-33.423-7.98-53.577 0-40.883 11.293-71.522 37.086-90.539 28.443-20.825 64.985-30.658 109.311-30.658z' fill='%23f1c40f' fill-rule='nonzero'/%3E%3Cpath d='M720 0h18v113h-18zM1458 738v-18h-113v18h113zM720 1345h18v113h-18zM113 738v-18H0v18h113z'/%3E%3C/g%3E%3C/svg%3E"},"dependencies":{"@stryker-mutator/mocha-runner":"9.0.1","mocha":"11.7.1","typescript":"5.8.3"}}}
\ No newline at end of file
+{"files":{"src/folder_1/12_kata.ts":{"language":"typescript","mutants":[{"id":"43","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":31},"start":{"column":31,"line":29}}},{"id":"49","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":48},"start":{"column":31,"line":46}}},{"id":"61","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":26,"line":66},"start":{"column":16,"line":66}}},{"id":"31","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["19","20","21"],"location":{"end":{"column":6,"line":13},"start":{"column":31,"line":9}}},{"id":"30","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["19","20","21"],"location":{"end":{"column":29,"line":8},"start":{"column":27,"line":8}}},{"id":"33","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["19","20","21"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"32","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":3,"killedBy":["21"],"coveredBy":["19","20","21"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"35","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["19"],"coveredBy":["19"],"location":{"end":{"column":6,"line":17},"start":{"column":22,"line":15}}},{"id":"34","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["19","20"],"location":{"end":{"column":10,"line":12},"start":{"column":45,"line":10}}},{"id":"36","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["19"],"coveredBy":["19"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"37","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["19"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"38","mutatorName":"EqualityOperator","replacement":"this.hitpoints >= 0","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["19"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"40","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["19","20"],"location":{"end":{"column":6,"line":21},"start":{"column":28,"line":19}}},{"id":"39","mutatorName":"EqualityOperator","replacement":"this.hitpoints <= 0","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["19"],"coveredBy":["19"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"41","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["19"],"coveredBy":["19","20"],"location":{"end":{"column":6,"line":25},"start":{"column":32,"line":23}}},{"id":"42","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["19"],"coveredBy":["19","20"],"location":{"end":{"column":33,"line":24},"start":{"column":9,"line":24}}},{"id":"44","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["19"],"coveredBy":["19"],"location":{"end":{"column":6,"line":35},"start":{"column":22,"line":33}}},{"id":"46","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["19"],"coveredBy":["19"],"location":{"end":{"column":6,"line":39},"start":{"column":30,"line":37}}},{"id":"45","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected false to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["19"],"coveredBy":["19"],"location":{"end":{"column":20,"line":34},"start":{"column":16,"line":34}}},{"id":"47","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["19"],"location":{"end":{"column":6,"line":42},"start":{"column":32,"line":40}}},{"id":"50","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["20"],"coveredBy":["20"],"location":{"end":{"column":6,"line":52},"start":{"column":22,"line":50}}},{"id":"48","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["19"],"location":{"end":{"column":33,"line":41},"start":{"column":9,"line":41}}},{"id":"51","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected false to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["20"],"coveredBy":["20"],"location":{"end":{"column":20,"line":51},"start":{"column":16,"line":51}}},{"id":"52","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["20"],"location":{"end":{"column":6,"line":56},"start":{"column":29,"line":54}}},{"id":"53","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["20"],"location":{"end":{"column":6,"line":60},"start":{"column":32,"line":58}}},{"id":"54","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["20"],"location":{"end":{"column":33,"line":59},"start":{"column":9,"line":59}}},{"id":"55","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["21"],"coveredBy":["21"],"location":{"end":{"column":6,"line":67},"start":{"column":27,"line":62}}},{"id":"56","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["21"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"57","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["21"],"coveredBy":["21"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"58","mutatorName":"EqualityOperator","replacement":"this.hitpoints !== 2","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["21"],"coveredBy":["21"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"59","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["21"],"coveredBy":["21"],"location":{"end":{"column":10,"line":65},"start":{"column":35,"line":63}}},{"id":"60","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected '' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["21"],"coveredBy":["21"],"location":{"end":{"column":26,"line":64},"start":{"column":20,"line":64}}}],"source":"﻿interface IUnit {\r\n    attack(unit: IUnit): void;\r\n    alive(): boolean;\r\n    hurt(damage: number): void;\r\n}\r\nexport class Zergling implements IUnit {\r\n    hitpoints = 1;\r\n    closeUnits: IUnit[] = [];\r\n    attack(unit: IUnit): void {\r\n        if (this.closeUnits.includes(unit)) {\r\n            unit.hurt(1);\r\n        }\r\n    }\r\n\r\n    alive(): boolean {\r\n        return this.hitpoints > 0;\r\n    }\r\n\r\n    run(unit: IUnit): void {\r\n        this.closeUnits.push(unit);\r\n    }\r\n\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n}\r\nexport class Marine implements IUnit {\r\n    hitpoints = 2;\r\n    attack(unit: IUnit): void {\r\n        this.shoot(unit);\r\n    }\r\n\r\n    alive(): boolean {\r\n        return true;\r\n    }\r\n\r\n    shoot(unit: IUnit): void {\r\n        unit.hurt(1);\r\n    }\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n}\r\nexport class Zealot implements IUnit {\r\n    hitpoints = 2;\r\n    attack(unit: IUnit): void {\r\n        this.claw(unit);\r\n    }\r\n\r\n    alive(): boolean {\r\n        return true;\r\n    }\r\n\r\n    claw(unit: IUnit): void {\r\n        unit.hurt(2);\r\n    }\r\n\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n\r\n    hitpointBar(): string {\r\n        if (this.hitpoints === 2) {\r\n            return \"full\";\r\n        }\r\n        return \"not full\";\r\n    }\r\n}"},"src/folder_1/15_kata.ts":{"language":"typescript","mutants":[{"id":"105","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":31},"start":{"column":31,"line":29}}},{"id":"111","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":48},"start":{"column":31,"line":46}}},{"id":"123","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":26,"line":66},"start":{"column":16,"line":66}}},{"id":"92","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["37","38","39"],"location":{"end":{"column":29,"line":8},"start":{"column":27,"line":8}}},{"id":"93","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["37","38","39"],"location":{"end":{"column":6,"line":13},"start":{"column":31,"line":9}}},{"id":"94","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":3,"killedBy":["39"],"coveredBy":["37","38","39"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"95","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["37","38","39"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"97","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["37"],"coveredBy":["37"],"location":{"end":{"column":6,"line":17},"start":{"column":22,"line":15}}},{"id":"96","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["37","38"],"location":{"end":{"column":10,"line":12},"start":{"column":45,"line":10}}},{"id":"98","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["37"],"coveredBy":["37"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"99","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["37"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"100","mutatorName":"EqualityOperator","replacement":"this.hitpoints >= 0","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["37"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"101","mutatorName":"EqualityOperator","replacement":"this.hitpoints <= 0","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["37"],"coveredBy":["37"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"102","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["37","38"],"location":{"end":{"column":6,"line":21},"start":{"column":28,"line":19}}},{"id":"103","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["37"],"coveredBy":["37","38"],"location":{"end":{"column":6,"line":25},"start":{"column":32,"line":23}}},{"id":"106","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["37"],"coveredBy":["37"],"location":{"end":{"column":6,"line":35},"start":{"column":22,"line":33}}},{"id":"104","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["37"],"coveredBy":["37","38"],"location":{"end":{"column":33,"line":24},"start":{"column":9,"line":24}}},{"id":"107","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected false to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["37"],"coveredBy":["37"],"location":{"end":{"column":20,"line":34},"start":{"column":16,"line":34}}},{"id":"108","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["37"],"coveredBy":["37"],"location":{"end":{"column":6,"line":39},"start":{"column":30,"line":37}}},{"id":"109","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["37"],"location":{"end":{"column":6,"line":42},"start":{"column":32,"line":40}}},{"id":"110","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["37"],"location":{"end":{"column":33,"line":41},"start":{"column":9,"line":41}}},{"id":"112","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["38"],"coveredBy":["38"],"location":{"end":{"column":6,"line":52},"start":{"column":22,"line":50}}},{"id":"113","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected false to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["38"],"coveredBy":["38"],"location":{"end":{"column":20,"line":51},"start":{"column":16,"line":51}}},{"id":"114","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["38"],"location":{"end":{"column":6,"line":56},"start":{"column":29,"line":54}}},{"id":"115","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["38"],"location":{"end":{"column":6,"line":60},"start":{"column":32,"line":58}}},{"id":"116","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["38"],"location":{"end":{"column":33,"line":59},"start":{"column":9,"line":59}}},{"id":"117","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["39"],"coveredBy":["39"],"location":{"end":{"column":6,"line":67},"start":{"column":27,"line":62}}},{"id":"118","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["39"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"119","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["39"],"coveredBy":["39"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"120","mutatorName":"EqualityOperator","replacement":"this.hitpoints !== 2","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["39"],"coveredBy":["39"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"121","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["39"],"coveredBy":["39"],"location":{"end":{"column":10,"line":65},"start":{"column":35,"line":63}}},{"id":"122","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected '' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["39"],"coveredBy":["39"],"location":{"end":{"column":26,"line":64},"start":{"column":20,"line":64}}}],"source":"﻿interface IUnit {\r\n    attack(unit: IUnit): void;\r\n    alive(): boolean;\r\n    hurt(damage: number): void;\r\n}\r\nexport class Zergling implements IUnit {\r\n    hitpoints = 1;\r\n    closeUnits: IUnit[] = [];\r\n    attack(unit: IUnit): void {\r\n        if (this.closeUnits.includes(unit)) {\r\n            unit.hurt(1);\r\n        }\r\n    }\r\n\r\n    alive(): boolean {\r\n        return this.hitpoints > 0;\r\n    }\r\n\r\n    run(unit: IUnit): void {\r\n        this.closeUnits.push(unit);\r\n    }\r\n\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n}\r\nexport class Marine implements IUnit {\r\n    hitpoints = 2;\r\n    attack(unit: IUnit): void {\r\n        this.shoot(unit);\r\n    }\r\n\r\n    alive(): boolean {\r\n        return true;\r\n    }\r\n\r\n    shoot(unit: IUnit): void {\r\n        unit.hurt(1);\r\n    }\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n}\r\nexport class Zealot implements IUnit {\r\n    hitpoints = 2;\r\n    attack(unit: IUnit): void {\r\n        this.claw(unit);\r\n    }\r\n\r\n    alive(): boolean {\r\n        return true;\r\n    }\r\n\r\n    claw(unit: IUnit): void {\r\n        unit.hurt(2);\r\n    }\r\n\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n\r\n    hitpointBar(): string {\r\n        if (this.hitpoints === 2) {\r\n            return \"full\";\r\n        }\r\n        return \"not full\";\r\n    }\r\n}"},"src/folder_1/18_kata.ts":{"language":"typescript","mutants":[{"id":"167","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":31},"start":{"column":31,"line":29}}},{"id":"173","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":48},"start":{"column":31,"line":46}}},{"id":"185","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":26,"line":66},"start":{"column":16,"line":66}}},{"id":"154","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["55","56","57"],"location":{"end":{"column":29,"line":8},"start":{"column":27,"line":8}}},{"id":"155","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["55","56","57"],"location":{"end":{"column":6,"line":13},"start":{"column":31,"line":9}}},{"id":"156","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":3,"killedBy":["57"],"coveredBy":["55","56","57"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"157","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["55","56","57"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"158","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["55","56"],"location":{"end":{"column":10,"line":12},"start":{"column":45,"line":10}}},{"id":"159","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["55"],"coveredBy":["55"],"location":{"end":{"column":6,"line":17},"start":{"column":22,"line":15}}},{"id":"160","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["55"],"coveredBy":["55"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"162","mutatorName":"EqualityOperator","replacement":"this.hitpoints >= 0","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["55"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"161","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["55"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"163","mutatorName":"EqualityOperator","replacement":"this.hitpoints <= 0","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["55"],"coveredBy":["55"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"164","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["55","56"],"location":{"end":{"column":6,"line":21},"start":{"column":28,"line":19}}},{"id":"165","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["55"],"coveredBy":["55","56"],"location":{"end":{"column":6,"line":25},"start":{"column":32,"line":23}}},{"id":"166","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["55"],"coveredBy":["55","56"],"location":{"end":{"column":33,"line":24},"start":{"column":9,"line":24}}},{"id":"168","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["55"],"coveredBy":["55"],"location":{"end":{"column":6,"line":35},"start":{"column":22,"line":33}}},{"id":"169","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected false to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["55"],"coveredBy":["55"],"location":{"end":{"column":20,"line":34},"start":{"column":16,"line":34}}},{"id":"170","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["55"],"coveredBy":["55"],"location":{"end":{"column":6,"line":39},"start":{"column":30,"line":37}}},{"id":"171","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["55"],"location":{"end":{"column":6,"line":42},"start":{"column":32,"line":40}}},{"id":"172","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["55"],"location":{"end":{"column":33,"line":41},"start":{"column":9,"line":41}}},{"id":"174","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["56"],"coveredBy":["56"],"location":{"end":{"column":6,"line":52},"start":{"column":22,"line":50}}},{"id":"175","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected false to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["56"],"coveredBy":["56"],"location":{"end":{"column":20,"line":51},"start":{"column":16,"line":51}}},{"id":"176","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["56"],"location":{"end":{"column":6,"line":56},"start":{"column":29,"line":54}}},{"id":"177","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["56"],"location":{"end":{"column":6,"line":60},"start":{"column":32,"line":58}}},{"id":"178","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["56"],"location":{"end":{"column":33,"line":59},"start":{"column":9,"line":59}}},{"id":"180","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["57"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"179","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["57"],"coveredBy":["57"],"location":{"end":{"column":6,"line":67},"start":{"column":27,"line":62}}},{"id":"181","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["57"],"coveredBy":["57"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"182","mutatorName":"EqualityOperator","replacement":"this.hitpoints !== 2","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["57"],"coveredBy":["57"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"183","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["57"],"coveredBy":["57"],"location":{"end":{"column":10,"line":65},"start":{"column":35,"line":63}}},{"id":"184","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected '' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["57"],"coveredBy":["57"],"location":{"end":{"column":26,"line":64},"start":{"column":20,"line":64}}}],"source":"﻿interface IUnit {\r\n    attack(unit: IUnit): void;\r\n    alive(): boolean;\r\n    hurt(damage: number): void;\r\n}\r\nexport class Zergling implements IUnit {\r\n    hitpoints = 1;\r\n    closeUnits: IUnit[] = [];\r\n    attack(unit: IUnit): void {\r\n        if (this.closeUnits.includes(unit)) {\r\n            unit.hurt(1);\r\n        }\r\n    }\r\n\r\n    alive(): boolean {\r\n        return this.hitpoints > 0;\r\n    }\r\n\r\n    run(unit: IUnit): void {\r\n        this.closeUnits.push(unit);\r\n    }\r\n\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n}\r\nexport class Marine implements IUnit {\r\n    hitpoints = 2;\r\n    attack(unit: IUnit): void {\r\n        this.shoot(unit);\r\n    }\r\n\r\n    alive(): boolean {\r\n        return true;\r\n    }\r\n\r\n    shoot(unit: IUnit): void {\r\n        unit.hurt(1);\r\n    }\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n}\r\nexport class Zealot implements IUnit {\r\n    hitpoints = 2;\r\n    attack(unit: IUnit): void {\r\n        this.claw(unit);\r\n    }\r\n\r\n    alive(): boolean {\r\n        return true;\r\n    }\r\n\r\n    claw(unit: IUnit): void {\r\n        unit.hurt(2);\r\n    }\r\n\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n\r\n    hitpointBar(): string {\r\n        if (this.hitpoints === 2) {\r\n            return \"full\";\r\n        }\r\n        return \"not full\";\r\n    }\r\n}"},"src/folder_1/3_kata.ts":{"language":"typescript","mutants":[{"id":"229","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":31},"start":{"column":31,"line":29}}},{"id":"235","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":48},"start":{"column":31,"line":46}}},{"id":"247","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":26,"line":66},"start":{"column":16,"line":66}}},{"id":"217","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["69","70","71"],"location":{"end":{"column":6,"line":13},"start":{"column":31,"line":9}}},{"id":"216","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["69","70","71"],"location":{"end":{"column":29,"line":8},"start":{"column":27,"line":8}}},{"id":"218","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":3,"killedBy":["71"],"coveredBy":["69","70","71"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"219","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["69","70","71"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"220","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["69","70"],"location":{"end":{"column":10,"line":12},"start":{"column":45,"line":10}}},{"id":"221","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["69"],"coveredBy":["69"],"location":{"end":{"column":6,"line":17},"start":{"column":22,"line":15}}},{"id":"222","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["69"],"coveredBy":["69"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"223","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["69"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"224","mutatorName":"EqualityOperator","replacement":"this.hitpoints >= 0","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["69"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"225","mutatorName":"EqualityOperator","replacement":"this.hitpoints <= 0","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["69"],"coveredBy":["69"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"226","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["69","70"],"location":{"end":{"column":6,"line":21},"start":{"column":28,"line":19}}},{"id":"227","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["69"],"coveredBy":["69","70"],"location":{"end":{"column":6,"line":25},"start":{"column":32,"line":23}}},{"id":"228","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["69"],"coveredBy":["69","70"],"location":{"end":{"column":33,"line":24},"start":{"column":9,"line":24}}},{"id":"230","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["69"],"coveredBy":["69"],"location":{"end":{"column":6,"line":35},"start":{"column":22,"line":33}}},{"id":"231","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected false to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["69"],"coveredBy":["69"],"location":{"end":{"column":20,"line":34},"start":{"column":16,"line":34}}},{"id":"232","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["69"],"coveredBy":["69"],"location":{"end":{"column":6,"line":39},"start":{"column":30,"line":37}}},{"id":"233","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["69"],"location":{"end":{"column":6,"line":42},"start":{"column":32,"line":40}}},{"id":"234","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["69"],"location":{"end":{"column":33,"line":41},"start":{"column":9,"line":41}}},{"id":"236","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["70"],"coveredBy":["70"],"location":{"end":{"column":6,"line":52},"start":{"column":22,"line":50}}},{"id":"237","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected false to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["70"],"coveredBy":["70"],"location":{"end":{"column":20,"line":51},"start":{"column":16,"line":51}}},{"id":"238","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["70"],"location":{"end":{"column":6,"line":56},"start":{"column":29,"line":54}}},{"id":"239","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["70"],"location":{"end":{"column":6,"line":60},"start":{"column":32,"line":58}}},{"id":"240","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["70"],"location":{"end":{"column":33,"line":59},"start":{"column":9,"line":59}}},{"id":"241","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["71"],"coveredBy":["71"],"location":{"end":{"column":6,"line":67},"start":{"column":27,"line":62}}},{"id":"242","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["71"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"244","mutatorName":"EqualityOperator","replacement":"this.hitpoints !== 2","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["71"],"coveredBy":["71"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"243","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["71"],"coveredBy":["71"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"245","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["71"],"coveredBy":["71"],"location":{"end":{"column":10,"line":65},"start":{"column":35,"line":63}}},{"id":"246","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected '' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["71"],"coveredBy":["71"],"location":{"end":{"column":26,"line":64},"start":{"column":20,"line":64}}}],"source":"﻿interface IUnit {\r\n    attack(unit: IUnit): void;\r\n    alive(): boolean;\r\n    hurt(damage: number): void;\r\n}\r\nexport class Zergling implements IUnit {\r\n    hitpoints = 1;\r\n    closeUnits: IUnit[] = [];\r\n    attack(unit: IUnit): void {\r\n        if (this.closeUnits.includes(unit)) {\r\n            unit.hurt(1);\r\n        }\r\n    }\r\n\r\n    alive(): boolean {\r\n        return this.hitpoints > 0;\r\n    }\r\n\r\n    run(unit: IUnit): void {\r\n        this.closeUnits.push(unit);\r\n    }\r\n\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n}\r\nexport class Marine implements IUnit {\r\n    hitpoints = 2;\r\n    attack(unit: IUnit): void {\r\n        this.shoot(unit);\r\n    }\r\n\r\n    alive(): boolean {\r\n        return true;\r\n    }\r\n\r\n    shoot(unit: IUnit): void {\r\n        unit.hurt(1);\r\n    }\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n}\r\nexport class Zealot implements IUnit {\r\n    hitpoints = 2;\r\n    attack(unit: IUnit): void {\r\n        this.claw(unit);\r\n    }\r\n\r\n    alive(): boolean {\r\n        return true;\r\n    }\r\n\r\n    claw(unit: IUnit): void {\r\n        unit.hurt(2);\r\n    }\r\n\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n\r\n    hitpointBar(): string {\r\n        if (this.hitpoints === 2) {\r\n            return \"full\";\r\n        }\r\n        return \"not full\";\r\n    }\r\n}"},"src/folder_1/6_kata.ts":{"language":"typescript","mutants":[{"id":"291","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":31},"start":{"column":31,"line":29}}},{"id":"297","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":48},"start":{"column":31,"line":46}}},{"id":"309","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":26,"line":66},"start":{"column":16,"line":66}}},{"id":"278","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["87","88","89"],"location":{"end":{"column":29,"line":8},"start":{"column":27,"line":8}}},{"id":"279","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["87","88","89"],"location":{"end":{"column":6,"line":13},"start":{"column":31,"line":9}}},{"id":"280","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":3,"killedBy":["89"],"coveredBy":["87","88","89"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"281","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["87","88","89"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"282","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["87","88"],"location":{"end":{"column":10,"line":12},"start":{"column":45,"line":10}}},{"id":"283","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["87"],"coveredBy":["87"],"location":{"end":{"column":6,"line":17},"start":{"column":22,"line":15}}},{"id":"284","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["87"],"coveredBy":["87"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"285","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["87"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"286","mutatorName":"EqualityOperator","replacement":"this.hitpoints >= 0","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["87"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"288","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["87","88"],"location":{"end":{"column":6,"line":21},"start":{"column":28,"line":19}}},{"id":"287","mutatorName":"EqualityOperator","replacement":"this.hitpoints <= 0","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["87"],"coveredBy":["87"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"289","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["87"],"coveredBy":["87","88"],"location":{"end":{"column":6,"line":25},"start":{"column":32,"line":23}}},{"id":"290","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["87"],"coveredBy":["87","88"],"location":{"end":{"column":33,"line":24},"start":{"column":9,"line":24}}},{"id":"292","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["87"],"coveredBy":["87"],"location":{"end":{"column":6,"line":35},"start":{"column":22,"line":33}}},{"id":"293","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected false to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["87"],"coveredBy":["87"],"location":{"end":{"column":20,"line":34},"start":{"column":16,"line":34}}},{"id":"294","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["87"],"coveredBy":["87"],"location":{"end":{"column":6,"line":39},"start":{"column":30,"line":37}}},{"id":"295","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["87"],"location":{"end":{"column":6,"line":42},"start":{"column":32,"line":40}}},{"id":"296","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["87"],"location":{"end":{"column":33,"line":41},"start":{"column":9,"line":41}}},{"id":"298","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["88"],"coveredBy":["88"],"location":{"end":{"column":6,"line":52},"start":{"column":22,"line":50}}},{"id":"299","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected false to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["88"],"coveredBy":["88"],"location":{"end":{"column":20,"line":51},"start":{"column":16,"line":51}}},{"id":"300","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["88"],"location":{"end":{"column":6,"line":56},"start":{"column":29,"line":54}}},{"id":"302","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["88"],"location":{"end":{"column":33,"line":59},"start":{"column":9,"line":59}}},{"id":"301","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["88"],"location":{"end":{"column":6,"line":60},"start":{"column":32,"line":58}}},{"id":"303","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["89"],"coveredBy":["89"],"location":{"end":{"column":6,"line":67},"start":{"column":27,"line":62}}},{"id":"304","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["89"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"305","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["89"],"coveredBy":["89"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"306","mutatorName":"EqualityOperator","replacement":"this.hitpoints !== 2","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["89"],"coveredBy":["89"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"307","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["89"],"coveredBy":["89"],"location":{"end":{"column":10,"line":65},"start":{"column":35,"line":63}}},{"id":"308","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected '' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["89"],"coveredBy":["89"],"location":{"end":{"column":26,"line":64},"start":{"column":20,"line":64}}}],"source":"﻿interface IUnit {\r\n    attack(unit: IUnit): void;\r\n    alive(): boolean;\r\n    hurt(damage: number): void;\r\n}\r\nexport class Zergling implements IUnit {\r\n    hitpoints = 1;\r\n    closeUnits: IUnit[] = [];\r\n    attack(unit: IUnit): void {\r\n        if (this.closeUnits.includes(unit)) {\r\n            unit.hurt(1);\r\n        }\r\n    }\r\n\r\n    alive(): boolean {\r\n        return this.hitpoints > 0;\r\n    }\r\n\r\n    run(unit: IUnit): void {\r\n        this.closeUnits.push(unit);\r\n    }\r\n\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n}\r\nexport class Marine implements IUnit {\r\n    hitpoints = 2;\r\n    attack(unit: IUnit): void {\r\n        this.shoot(unit);\r\n    }\r\n\r\n    alive(): boolean {\r\n        return true;\r\n    }\r\n\r\n    shoot(unit: IUnit): void {\r\n        unit.hurt(1);\r\n    }\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n}\r\nexport class Zealot implements IUnit {\r\n    hitpoints = 2;\r\n    attack(unit: IUnit): void {\r\n        this.claw(unit);\r\n    }\r\n\r\n    alive(): boolean {\r\n        return true;\r\n    }\r\n\r\n    claw(unit: IUnit): void {\r\n        unit.hurt(2);\r\n    }\r\n\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n\r\n    hitpointBar(): string {\r\n        if (this.hitpoints === 2) {\r\n            return \"full\";\r\n        }\r\n        return \"not full\";\r\n    }\r\n}"},"src/folder_1/9_kata.ts":{"language":"typescript","mutants":[{"id":"353","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":31},"start":{"column":31,"line":29}}},{"id":"359","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":48},"start":{"column":31,"line":46}}},{"id":"371","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":26,"line":66},"start":{"column":16,"line":66}}},{"id":"340","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["105","106","107"],"location":{"end":{"column":29,"line":8},"start":{"column":27,"line":8}}},{"id":"342","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":3,"killedBy":["107"],"coveredBy":["105","106","107"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"341","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["105","106","107"],"location":{"end":{"column":6,"line":13},"start":{"column":31,"line":9}}},{"id":"343","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["105","106","107"],"location":{"end":{"column":43,"line":10},"start":{"column":13,"line":10}}},{"id":"344","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["105","106"],"location":{"end":{"column":10,"line":12},"start":{"column":45,"line":10}}},{"id":"345","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["105"],"coveredBy":["105"],"location":{"end":{"column":6,"line":17},"start":{"column":22,"line":15}}},{"id":"346","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["105"],"coveredBy":["105"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"347","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["105"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"348","mutatorName":"EqualityOperator","replacement":"this.hitpoints >= 0","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["105"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"349","mutatorName":"EqualityOperator","replacement":"this.hitpoints <= 0","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["105"],"coveredBy":["105"],"location":{"end":{"column":34,"line":16},"start":{"column":16,"line":16}}},{"id":"350","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["105","106"],"location":{"end":{"column":6,"line":21},"start":{"column":28,"line":19}}},{"id":"351","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["105"],"coveredBy":["105","106"],"location":{"end":{"column":6,"line":25},"start":{"column":32,"line":23}}},{"id":"352","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["105"],"coveredBy":["105","106"],"location":{"end":{"column":33,"line":24},"start":{"column":9,"line":24}}},{"id":"354","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["105"],"coveredBy":["105"],"location":{"end":{"column":6,"line":35},"start":{"column":22,"line":33}}},{"id":"355","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected false to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["105"],"coveredBy":["105"],"location":{"end":{"column":20,"line":34},"start":{"column":16,"line":34}}},{"id":"356","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected true to equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["105"],"coveredBy":["105"],"location":{"end":{"column":6,"line":39},"start":{"column":30,"line":37}}},{"id":"358","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["105"],"location":{"end":{"column":33,"line":41},"start":{"column":9,"line":41}}},{"id":"357","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["105"],"location":{"end":{"column":6,"line":42},"start":{"column":32,"line":40}}},{"id":"361","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected false to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["106"],"coveredBy":["106"],"location":{"end":{"column":20,"line":51},"start":{"column":16,"line":51}}},{"id":"360","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["106"],"coveredBy":["106"],"location":{"end":{"column":6,"line":52},"start":{"column":22,"line":50}}},{"id":"362","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["106"],"location":{"end":{"column":6,"line":56},"start":{"column":29,"line":54}}},{"id":"363","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["106"],"location":{"end":{"column":6,"line":60},"start":{"column":32,"line":58}}},{"id":"364","mutatorName":"AssignmentOperator","replacement":"this.hitpoints += damage","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["106"],"location":{"end":{"column":33,"line":59},"start":{"column":9,"line":59}}},{"id":"365","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["107"],"coveredBy":["107"],"location":{"end":{"column":6,"line":67},"start":{"column":27,"line":62}}},{"id":"366","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["107"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"367","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["107"],"coveredBy":["107"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"369","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["107"],"coveredBy":["107"],"location":{"end":{"column":10,"line":65},"start":{"column":35,"line":63}}},{"id":"368","mutatorName":"EqualityOperator","replacement":"this.hitpoints !== 2","statusReason":"expected 'not full' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["107"],"coveredBy":["107"],"location":{"end":{"column":33,"line":63},"start":{"column":13,"line":63}}},{"id":"370","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected '' to equal 'full'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["107"],"coveredBy":["107"],"location":{"end":{"column":26,"line":64},"start":{"column":20,"line":64}}}],"source":"﻿interface IUnit {\r\n    attack(unit: IUnit): void;\r\n    alive(): boolean;\r\n    hurt(damage: number): void;\r\n}\r\nexport class Zergling implements IUnit {\r\n    hitpoints = 1;\r\n    closeUnits: IUnit[] = [];\r\n    attack(unit: IUnit): void {\r\n        if (this.closeUnits.includes(unit)) {\r\n            unit.hurt(1);\r\n        }\r\n    }\r\n\r\n    alive(): boolean {\r\n        return this.hitpoints > 0;\r\n    }\r\n\r\n    run(unit: IUnit): void {\r\n        this.closeUnits.push(unit);\r\n    }\r\n\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n}\r\nexport class Marine implements IUnit {\r\n    hitpoints = 2;\r\n    attack(unit: IUnit): void {\r\n        this.shoot(unit);\r\n    }\r\n\r\n    alive(): boolean {\r\n        return true;\r\n    }\r\n\r\n    shoot(unit: IUnit): void {\r\n        unit.hurt(1);\r\n    }\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n}\r\nexport class Zealot implements IUnit {\r\n    hitpoints = 2;\r\n    attack(unit: IUnit): void {\r\n        this.claw(unit);\r\n    }\r\n\r\n    alive(): boolean {\r\n        return true;\r\n    }\r\n\r\n    claw(unit: IUnit): void {\r\n        unit.hurt(2);\r\n    }\r\n\r\n    hurt(damage: number): void {\r\n        this.hitpoints -= damage;\r\n    }\r\n\r\n    hitpointBar(): string {\r\n        if (this.hitpoints === 2) {\r\n            return \"full\";\r\n        }\r\n        return \"not full\";\r\n    }\r\n}"},"src/folder_1/10_kata.ts":{"language":"typescript","mutants":[{"id":"1","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"' World' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["4"],"coveredBy":["4","5","6","7"],"location":{"end":{"column":18,"line":2},"start":{"column":11,"line":2}}},{"id":"2","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"'Hello ' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["4"],"coveredBy":["4","6","7"],"location":{"end":{"column":18,"line":3},"start":{"column":11,"line":3}}},{"id":"3","mutatorName":"BlockStatement","replacement":"{}","statusReason":"undefined == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["4"],"coveredBy":["4"],"location":{"end":{"column":2,"line":8},"start":{"column":38,"line":6}}},{"id":"4","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"'HelloWorld' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["4"],"coveredBy":["4"],"location":{"end":{"column":54,"line":7},"start":{"column":51,"line":7}}},{"id":"0","mutatorName":"BlockStatement","replacement":"{}","statusReason":"'' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["4"],"coveredBy":["4","5","6","7"],"location":{"end":{"column":2,"line":4},"start":{"column":40,"line":1}}}],"source":"export function* helloWorldGenerator() {\n    yield 'Hello';\n    yield 'World';\n}\n\nexport default function HelloWorld() {\n    return Array.from(helloWorldGenerator()).join(' ');\n}\n"},"src/folder_1/11_kata.ts":{"language":"typescript","mutants":[{"id":"5","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["8"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"6","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"7","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"8","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"9","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"10","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["18"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"11","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["17"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"12","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["16"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"13","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["15"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"14","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"15","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"16","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"17","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"18","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"19","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"20","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"21","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["14"],"coveredBy":["14","15","16","17","18"],"location":{"end":{"column":10,"line":16},"start":{"column":34,"line":13}}},{"id":"22","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 - discount)","statusReason":"expected 1113.4020618556704 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["14"],"coveredBy":["14","15","16","17","18"],"location":{"end":{"column":51,"line":14},"start":{"column":25,"line":14}}},{"id":"23","mutatorName":"ArithmeticOperator","replacement":"1 + discount","statusReason":"expected 1112.4 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["14"],"coveredBy":["14","15","16","17","18"],"location":{"end":{"column":50,"line":14},"start":{"column":38,"line":14}}},{"id":"24","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected 4976.1 to equal 5130","status":"Killed","static":false,"testsCompleted":2,"killedBy":["15"],"coveredBy":["14","15","16","17","18"],"location":{"end":{"column":24,"line":15},"start":{"column":20,"line":15}}},{"id":"26","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["8"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"27","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"28","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"25","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["14"],"coveredBy":["8","9","10","11","12","13","14","15","16","17"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"29","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["9"],"coveredBy":["8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}],"source":"﻿\r\n\r\nexport const input = (commands) => {\r\n    let totalCost = +commands[0] * +commands[1];\r\n    const volumeDiscount = [\r\n        { volume: 50000, discount: 0.15 },\r\n        { volume: 10000, discount: 0.10 },\r\n        { volume: 7000, discount: 0.07 },\r\n        { volume: 5000, discount: 0.05 },\r\n        { volume: 1000, discount: 0.03 },\r\n    ]\r\n    volumeDiscount.some(({volume, discount}, idx) => {\r\n        if (totalCost >= volume) {\r\n            totalCost = totalCost * (1 - discount)\r\n            return true;\r\n        }\r\n        return false;\r\n    })\r\n    const stateTaxes = {\r\n        UT: 6.85,\r\n        NV: 8.00,\r\n        TX: 6.25,\r\n        AL: 4.00,\r\n        CA: 8.25,\r\n    }\r\n    return totalCost * (1 + stateTaxes[commands[2]] / 100);\r\n}"},"src/folder_1/13_kata.ts":{"language":"typescript","mutants":[{"id":"62","mutatorName":"BlockStatement","replacement":"{}","statusReason":"'' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["22"],"coveredBy":["22","23","24","25"],"location":{"end":{"column":2,"line":4},"start":{"column":40,"line":1}}},{"id":"63","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"' World' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["22"],"coveredBy":["22","23","24","25"],"location":{"end":{"column":18,"line":2},"start":{"column":11,"line":2}}},{"id":"64","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"'Hello ' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["22"],"coveredBy":["22","24","25"],"location":{"end":{"column":18,"line":3},"start":{"column":11,"line":3}}},{"id":"65","mutatorName":"BlockStatement","replacement":"{}","statusReason":"undefined == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["22"],"coveredBy":["22"],"location":{"end":{"column":2,"line":8},"start":{"column":38,"line":6}}},{"id":"66","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"'HelloWorld' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["22"],"coveredBy":["22"],"location":{"end":{"column":54,"line":7},"start":{"column":51,"line":7}}}],"source":"export function* helloWorldGenerator() {\n    yield 'Hello';\n    yield 'World';\n}\n\nexport default function HelloWorld() {\n    return Array.from(helloWorldGenerator()).join(' ');\n}\n"},"src/folder_1/14_kata.ts":{"language":"typescript","mutants":[{"id":"68","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"67","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["26"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"69","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"70","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"71","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"72","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["36"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"73","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["35"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"74","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["34"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"75","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["33"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"76","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"77","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"78","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"80","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"81","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"79","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"82","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"83","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["32"],"coveredBy":["32","33","34","35","36"],"location":{"end":{"column":10,"line":16},"start":{"column":34,"line":13}}},{"id":"85","mutatorName":"ArithmeticOperator","replacement":"1 + discount","statusReason":"expected 1112.4 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["32"],"coveredBy":["32","33","34","35","36"],"location":{"end":{"column":50,"line":14},"start":{"column":38,"line":14}}},{"id":"84","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 - discount)","statusReason":"expected 1113.4020618556704 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["32"],"coveredBy":["32","33","34","35","36"],"location":{"end":{"column":51,"line":14},"start":{"column":25,"line":14}}},{"id":"86","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected 4976.1 to equal 5130","status":"Killed","static":false,"testsCompleted":2,"killedBy":["33"],"coveredBy":["32","33","34","35","36"],"location":{"end":{"column":24,"line":15},"start":{"column":20,"line":15}}},{"id":"88","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["26"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"87","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["32"],"coveredBy":["26","27","28","29","30","31","32","33","34","35"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"89","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"90","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"91","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27","28","29","30","31","32","33","34","35","36"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}],"source":"﻿\r\n\r\nexport const input = (commands) => {\r\n    let totalCost = +commands[0] * +commands[1];\r\n    const volumeDiscount = [\r\n        { volume: 50000, discount: 0.15 },\r\n        { volume: 10000, discount: 0.10 },\r\n        { volume: 7000, discount: 0.07 },\r\n        { volume: 5000, discount: 0.05 },\r\n        { volume: 1000, discount: 0.03 },\r\n    ]\r\n    volumeDiscount.some(({volume, discount}, idx) => {\r\n        if (totalCost >= volume) {\r\n            totalCost = totalCost * (1 - discount)\r\n            return true;\r\n        }\r\n        return false;\r\n    })\r\n    const stateTaxes = {\r\n        UT: 6.85,\r\n        NV: 8.00,\r\n        TX: 6.25,\r\n        AL: 4.00,\r\n        CA: 8.25,\r\n    }\r\n    return totalCost * (1 + stateTaxes[commands[2]] / 100);\r\n}"},"src/folder_1/16_kata.ts":{"language":"typescript","mutants":[{"id":"124","mutatorName":"BlockStatement","replacement":"{}","statusReason":"'' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["40"],"coveredBy":["40","41","42","43"],"location":{"end":{"column":2,"line":4},"start":{"column":40,"line":1}}},{"id":"125","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"' World' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["40"],"coveredBy":["40","41","42","43"],"location":{"end":{"column":18,"line":2},"start":{"column":11,"line":2}}},{"id":"126","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"'Hello ' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["40"],"coveredBy":["40","42","43"],"location":{"end":{"column":18,"line":3},"start":{"column":11,"line":3}}},{"id":"127","mutatorName":"BlockStatement","replacement":"{}","statusReason":"undefined == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["40"],"coveredBy":["40"],"location":{"end":{"column":2,"line":8},"start":{"column":38,"line":6}}},{"id":"128","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"'HelloWorld' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["40"],"coveredBy":["40"],"location":{"end":{"column":54,"line":7},"start":{"column":51,"line":7}}}],"source":"export function* helloWorldGenerator() {\n    yield 'Hello';\n    yield 'World';\n}\n\nexport default function HelloWorld() {\n    return Array.from(helloWorldGenerator()).join(' ');\n}\n"},"src/folder_1/17_kata.ts":{"language":"typescript","mutants":[{"id":"129","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["44"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"130","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"131","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"132","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"133","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"134","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["54"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"135","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["53"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"136","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["52"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"137","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["51"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"138","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"139","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"140","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"141","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"142","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"144","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"143","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"145","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["50"],"coveredBy":["50","51","52","53","54"],"location":{"end":{"column":10,"line":16},"start":{"column":34,"line":13}}},{"id":"146","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 - discount)","statusReason":"expected 1113.4020618556704 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["50"],"coveredBy":["50","51","52","53","54"],"location":{"end":{"column":51,"line":14},"start":{"column":25,"line":14}}},{"id":"147","mutatorName":"ArithmeticOperator","replacement":"1 + discount","statusReason":"expected 1112.4 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["50"],"coveredBy":["50","51","52","53","54"],"location":{"end":{"column":50,"line":14},"start":{"column":38,"line":14}}},{"id":"148","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected 4976.1 to equal 5130","status":"Killed","static":false,"testsCompleted":2,"killedBy":["51"],"coveredBy":["50","51","52","53","54"],"location":{"end":{"column":24,"line":15},"start":{"column":20,"line":15}}},{"id":"150","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["44"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"149","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["50"],"coveredBy":["44","45","46","47","48","49","50","51","52","53"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"151","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"152","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"153","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["45"],"coveredBy":["44","45","46","47","48","49","50","51","52","53","54"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}],"source":"﻿\r\n\r\nexport const input = (commands) => {\r\n    let totalCost = +commands[0] * +commands[1];\r\n    const volumeDiscount = [\r\n        { volume: 50000, discount: 0.15 },\r\n        { volume: 10000, discount: 0.10 },\r\n        { volume: 7000, discount: 0.07 },\r\n        { volume: 5000, discount: 0.05 },\r\n        { volume: 1000, discount: 0.03 },\r\n    ]\r\n    volumeDiscount.some(({volume, discount}, idx) => {\r\n        if (totalCost >= volume) {\r\n            totalCost = totalCost * (1 - discount)\r\n            return true;\r\n        }\r\n        return false;\r\n    })\r\n    const stateTaxes = {\r\n        UT: 6.85,\r\n        NV: 8.00,\r\n        TX: 6.25,\r\n        AL: 4.00,\r\n        CA: 8.25,\r\n    }\r\n    return totalCost * (1 + stateTaxes[commands[2]] / 100);\r\n}"},"src/folder_1/1_kata.ts":{"language":"typescript","mutants":[{"id":"187","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"' World' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0","1","2","3"],"location":{"end":{"column":18,"line":2},"start":{"column":11,"line":2}}},{"id":"186","mutatorName":"BlockStatement","replacement":"{}","statusReason":"'' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0","1","2","3"],"location":{"end":{"column":2,"line":4},"start":{"column":40,"line":1}}},{"id":"188","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"'Hello ' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0","2","3"],"location":{"end":{"column":18,"line":3},"start":{"column":11,"line":3}}},{"id":"189","mutatorName":"BlockStatement","replacement":"{}","statusReason":"undefined == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0"],"location":{"end":{"column":2,"line":8},"start":{"column":38,"line":6}}},{"id":"190","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"'HelloWorld' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0"],"location":{"end":{"column":54,"line":7},"start":{"column":51,"line":7}}}],"source":"export function* helloWorldGenerator() {\n    yield 'Hello';\n    yield 'World';\n}\n\nexport default function HelloWorld() {\n    return Array.from(helloWorldGenerator()).join(' ');\n}\n"},"src/folder_1/2_kata.ts":{"language":"typescript","mutants":[{"id":"191","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["58"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"192","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"193","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"194","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"195","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"196","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["68"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"197","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["67"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"198","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["66"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"199","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["65"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"200","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"202","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"201","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"203","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"204","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"205","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"206","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"207","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["64"],"coveredBy":["64","65","66","67","68"],"location":{"end":{"column":10,"line":16},"start":{"column":34,"line":13}}},{"id":"209","mutatorName":"ArithmeticOperator","replacement":"1 + discount","statusReason":"expected 1112.4 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["64"],"coveredBy":["64","65","66","67","68"],"location":{"end":{"column":50,"line":14},"start":{"column":38,"line":14}}},{"id":"208","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 - discount)","statusReason":"expected 1113.4020618556704 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["64"],"coveredBy":["64","65","66","67","68"],"location":{"end":{"column":51,"line":14},"start":{"column":25,"line":14}}},{"id":"210","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected 4976.1 to equal 5130","status":"Killed","static":false,"testsCompleted":2,"killedBy":["65"],"coveredBy":["64","65","66","67","68"],"location":{"end":{"column":24,"line":15},"start":{"column":20,"line":15}}},{"id":"212","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["58"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"211","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["64"],"coveredBy":["58","59","60","61","62","63","64","65","66","67"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"213","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"214","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"215","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["59"],"coveredBy":["58","59","60","61","62","63","64","65","66","67","68"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}],"source":"﻿\r\n\r\nexport const input = (commands) => {\r\n    let totalCost = +commands[0] * +commands[1];\r\n    const volumeDiscount = [\r\n        { volume: 50000, discount: 0.15 },\r\n        { volume: 10000, discount: 0.10 },\r\n        { volume: 7000, discount: 0.07 },\r\n        { volume: 5000, discount: 0.05 },\r\n        { volume: 1000, discount: 0.03 },\r\n    ]\r\n    volumeDiscount.some(({volume, discount}, idx) => {\r\n        if (totalCost >= volume) {\r\n            totalCost = totalCost * (1 - discount)\r\n            return true;\r\n        }\r\n        return false;\r\n    })\r\n    const stateTaxes = {\r\n        UT: 6.85,\r\n        NV: 8.00,\r\n        TX: 6.25,\r\n        AL: 4.00,\r\n        CA: 8.25,\r\n    }\r\n    return totalCost * (1 + stateTaxes[commands[2]] / 100);\r\n}"},"src/folder_1/4_kata.ts":{"language":"typescript","mutants":[{"id":"248","mutatorName":"BlockStatement","replacement":"{}","statusReason":"'' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["72"],"coveredBy":["72","73","74","75"],"location":{"end":{"column":2,"line":4},"start":{"column":40,"line":1}}},{"id":"250","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"'Hello ' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["72"],"coveredBy":["72","74","75"],"location":{"end":{"column":18,"line":3},"start":{"column":11,"line":3}}},{"id":"249","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"' World' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["72"],"coveredBy":["72","73","74","75"],"location":{"end":{"column":18,"line":2},"start":{"column":11,"line":2}}},{"id":"251","mutatorName":"BlockStatement","replacement":"{}","statusReason":"undefined == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["72"],"coveredBy":["72"],"location":{"end":{"column":2,"line":8},"start":{"column":38,"line":6}}},{"id":"252","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"'HelloWorld' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["72"],"coveredBy":["72"],"location":{"end":{"column":54,"line":7},"start":{"column":51,"line":7}}}],"source":"export function* helloWorldGenerator() {\n    yield 'Hello';\n    yield 'World';\n}\n\nexport default function HelloWorld() {\n    return Array.from(helloWorldGenerator()).join(' ');\n}"},"src/folder_1/5_kata.ts":{"language":"typescript","mutants":[{"id":"253","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["76"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"255","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"254","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"256","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"257","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"258","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["86"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"259","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["85"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"260","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["84"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"261","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["83"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"262","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"263","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"265","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"264","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"266","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"267","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"268","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"269","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["82"],"coveredBy":["82","83","84","85","86"],"location":{"end":{"column":10,"line":16},"start":{"column":34,"line":13}}},{"id":"270","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 - discount)","statusReason":"expected 1113.4020618556704 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["82"],"coveredBy":["82","83","84","85","86"],"location":{"end":{"column":51,"line":14},"start":{"column":25,"line":14}}},{"id":"271","mutatorName":"ArithmeticOperator","replacement":"1 + discount","statusReason":"expected 1112.4 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["82"],"coveredBy":["82","83","84","85","86"],"location":{"end":{"column":50,"line":14},"start":{"column":38,"line":14}}},{"id":"272","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected 4976.1 to equal 5130","status":"Killed","static":false,"testsCompleted":2,"killedBy":["83"],"coveredBy":["82","83","84","85","86"],"location":{"end":{"column":24,"line":15},"start":{"column":20,"line":15}}},{"id":"273","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["82"],"coveredBy":["76","77","78","79","80","81","82","83","84","85"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"274","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["76"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"275","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"276","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"277","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["77"],"coveredBy":["76","77","78","79","80","81","82","83","84","85","86"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}],"source":"﻿\r\n\r\nexport const input = (commands) => {\r\n    let totalCost = +commands[0] * +commands[1];\r\n    const volumeDiscount = [\r\n        { volume: 50000, discount: 0.15 },\r\n        { volume: 10000, discount: 0.10 },\r\n        { volume: 7000, discount: 0.07 },\r\n        { volume: 5000, discount: 0.05 },\r\n        { volume: 1000, discount: 0.03 },\r\n    ]\r\n    volumeDiscount.some(({volume, discount}, idx) => {\r\n        if (totalCost >= volume) {\r\n            totalCost = totalCost * (1 - discount)\r\n            return true;\r\n        }\r\n        return false;\r\n    })\r\n    const stateTaxes = {\r\n        UT: 6.85,\r\n        NV: 8.00,\r\n        TX: 6.25,\r\n        AL: 4.00,\r\n        CA: 8.25,\r\n    }\r\n    return totalCost * (1 + stateTaxes[commands[2]] / 100);\r\n}"},"src/folder_1/7_kata.ts":{"language":"typescript","mutants":[{"id":"310","mutatorName":"BlockStatement","replacement":"{}","statusReason":"'' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["90"],"coveredBy":["90","91","92","93"],"location":{"end":{"column":2,"line":4},"start":{"column":40,"line":1}}},{"id":"311","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"' World' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["90"],"coveredBy":["90","91","92","93"],"location":{"end":{"column":18,"line":2},"start":{"column":11,"line":2}}},{"id":"313","mutatorName":"BlockStatement","replacement":"{}","statusReason":"undefined == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["90"],"coveredBy":["90"],"location":{"end":{"column":2,"line":8},"start":{"column":38,"line":6}}},{"id":"312","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"'Hello ' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["90"],"coveredBy":["90","92","93"],"location":{"end":{"column":18,"line":3},"start":{"column":11,"line":3}}},{"id":"314","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"'HelloWorld' == 'Hello World'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["90"],"coveredBy":["90"],"location":{"end":{"column":54,"line":7},"start":{"column":51,"line":7}}}],"source":"export function* helloWorldGenerator() {\n    yield 'Hello';\n    yield 'World';\n}\n\nexport default function HelloWorld() {\n    return Array.from(helloWorldGenerator()).join(' ');\n}\n"},"src/folder_1/8_kata.ts":{"language":"typescript","mutants":[{"id":"315","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["94"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":2,"line":27},"start":{"column":36,"line":3}}},{"id":"316","mutatorName":"ArithmeticOperator","replacement":"+commands[0] / +commands[1]","statusReason":"expected 0.21600000000000003 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":48,"line":4},"start":{"column":21,"line":4}}},{"id":"317","mutatorName":"UnaryOperator","replacement":"-commands[0]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":33,"line":4},"start":{"column":21,"line":4}}},{"id":"318","mutatorName":"UnaryOperator","replacement":"-commands[1]","statusReason":"expected -5.4 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":48,"line":4},"start":{"column":36,"line":4}}},{"id":"319","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":6,"line":11},"start":{"column":28,"line":5}}},{"id":"320","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 48600 to equal 45900","status":"Killed","static":false,"testsCompleted":11,"killedBy":["104"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":42,"line":6},"start":{"column":9,"line":6}}},{"id":"321","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 10044 to equal 9720","status":"Killed","static":false,"testsCompleted":10,"killedBy":["103"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":42,"line":7},"start":{"column":9,"line":7}}},{"id":"322","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 7182.000000000001 to equal 7030.8","status":"Killed","static":false,"testsCompleted":9,"killedBy":["102"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":41,"line":8},"start":{"column":9,"line":8}}},{"id":"324","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":41,"line":10},"start":{"column":9,"line":10}}},{"id":"323","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 5238 to equal 5130","status":"Killed","static":false,"testsCompleted":8,"killedBy":["101"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":41,"line":9},"start":{"column":9,"line":9}}},{"id":"326","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":6,"line":18},"start":{"column":54,"line":12}}},{"id":"325","mutatorName":"MethodExpression","replacement":"volumeDiscount.every(({\n  volume,\n  discount\n}, idx) => {\n  if (totalCost >= volume) {\n    totalCost = totalCost * (1 - discount);\n    return true;\n  }\n  return false;\n})","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":7,"line":18},"start":{"column":5,"line":12}}},{"id":"327","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"328","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"329","mutatorName":"EqualityOperator","replacement":"totalCost > volume","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"330","mutatorName":"EqualityOperator","replacement":"totalCost < volume","statusReason":"expected 4.59 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":32,"line":13},"start":{"column":13,"line":13}}},{"id":"331","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["100"],"coveredBy":["100","101","102","103","104"],"location":{"end":{"column":10,"line":16},"start":{"column":34,"line":13}}},{"id":"332","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 - discount)","statusReason":"expected 1113.4020618556704 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["100"],"coveredBy":["100","101","102","103","104"],"location":{"end":{"column":51,"line":14},"start":{"column":25,"line":14}}},{"id":"333","mutatorName":"ArithmeticOperator","replacement":"1 + discount","statusReason":"expected 1112.4 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":1,"killedBy":["100"],"coveredBy":["100","101","102","103","104"],"location":{"end":{"column":50,"line":14},"start":{"column":38,"line":14}}},{"id":"334","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected 4976.1 to equal 5130","status":"Killed","static":false,"testsCompleted":2,"killedBy":["101"],"coveredBy":["100","101","102","103","104"],"location":{"end":{"column":24,"line":15},"start":{"column":20,"line":15}}},{"id":"335","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 1080 to equal 1047.6000000000001","status":"Killed","static":false,"testsCompleted":7,"killedBy":["100"],"coveredBy":["94","95","96","97","98","99","100","101","102","103"],"location":{"end":{"column":21,"line":17},"start":{"column":16,"line":17}}},{"id":"336","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to equal +0","status":"Killed","static":false,"testsCompleted":1,"killedBy":["94"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":6,"line":25},"start":{"column":24,"line":19}}},{"id":"337","mutatorName":"ArithmeticOperator","replacement":"totalCost / (1 + stateTaxes[commands[2]] / 100)","statusReason":"expected 4.62962962962963 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":59,"line":26},"start":{"column":12,"line":26}}},{"id":"338","mutatorName":"ArithmeticOperator","replacement":"1 - stateTaxes[commands[2]] / 100","statusReason":"expected 4.6000000000000005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":58,"line":26},"start":{"column":25,"line":26}}},{"id":"339","mutatorName":"ArithmeticOperator","replacement":"stateTaxes[commands[2]] * 100","statusReason":"expected 4005 to equal 5.4","status":"Killed","static":false,"testsCompleted":2,"killedBy":["95"],"coveredBy":["94","95","96","97","98","99","100","101","102","103","104"],"location":{"end":{"column":58,"line":26},"start":{"column":29,"line":26}}}],"source":"﻿\r\n\r\nexport const input = (commands) => {\r\n    let totalCost = +commands[0] * +commands[1];\r\n    const volumeDiscount = [\r\n        { volume: 50000, discount: 0.15 },\r\n        { volume: 10000, discount: 0.10 },\r\n        { volume: 7000, discount: 0.07 },\r\n        { volume: 5000, discount: 0.05 },\r\n        { volume: 1000, discount: 0.03 },\r\n    ]\r\n    volumeDiscount.some(({volume, discount}, idx) => {\r\n        if (totalCost >= volume) {\r\n            totalCost = totalCost * (1 - discount)\r\n            return true;\r\n        }\r\n        return false;\r\n    })\r\n    const stateTaxes = {\r\n        UT: 6.85,\r\n        NV: 8.00,\r\n        TX: 6.25,\r\n        AL: 4.00,\r\n        CA: 8.25,\r\n    }\r\n    return totalCost * (1 + stateTaxes[commands[2]] / 100);\r\n}"}},"schemaVersion":"1.0","thresholds":{"high":80,"low":60,"break":null},"testFiles":{"dist/test/folder_1/test_kata_1.spec.js":{"tests":[{"id":"0","name":"hello world kata should return hello world"},{"id":"1","name":"hello world kata should use a generator function that returns hello"},{"id":"2","name":"hello world kata should use a generator function that returns world on second call"},{"id":"3","name":"hello world kata should use a generator function that returns done after three calls"}],"source":"import assert from \"node:assert\";\nimport HelloWorld, { helloWorldGenerator } from '../../src/folder_1/1_kata.js';\ndescribe('hello world kata', function () {\n    it('should return hello world', function () {\n        assert.equal(HelloWorld(), \"Hello World\");\n    });\n    it('should use a generator function that returns hello', () => {\n        let firstCall = helloWorldGenerator().next();\n        assert.equal(firstCall.value, 'Hello');\n        assert.equal(firstCall.done, false);\n    });\n    it('should use a generator function that returns world on second call', () => {\n        let sequence = helloWorldGenerator();\n        sequence.next();\n        let secondCall = sequence.next();\n        assert.equal(secondCall.value, 'World');\n        assert.equal(secondCall.done, false);\n    });\n    it('should use a generator function that returns done after three calls', () => {\n        let sequence = helloWorldGenerator();\n        const firstCall = sequence.next();\n        const secondCall = sequence.next();\n        const thirdCall = sequence.next();\n        assert.equal(thirdCall.done, true);\n    });\n});\n"},"dist/test/folder_1/test_kata_10.spec.js":{"tests":[{"id":"4","name":"hello world kata four should return hello world"},{"id":"5","name":"hello world kata four should use a generator function that returns hello"},{"id":"6","name":"hello world kata four should use a generator function that returns world on second call"},{"id":"7","name":"hello world kata four should use a generator function that returns done after three calls"}],"source":"import assert from \"node:assert\";\nimport HelloWorld, { helloWorldGenerator } from '../../src/folder_1/10_kata.js';\ndescribe('hello world kata four', function () {\n    it('should return hello world', function () {\n        assert.equal(HelloWorld(), \"Hello World\");\n    });\n    it('should use a generator function that returns hello', () => {\n        let firstCall = helloWorldGenerator().next();\n        assert.equal(firstCall.value, 'Hello');\n        assert.equal(firstCall.done, false);\n    });\n    it('should use a generator function that returns world on second call', () => {\n        let sequence = helloWorldGenerator();\n        sequence.next();\n        let secondCall = sequence.next();\n        assert.equal(secondCall.value, 'World');\n        assert.equal(secondCall.done, false);\n    });\n    it('should use a generator function that returns done after three calls', () => {\n        let sequence = helloWorldGenerator();\n        const firstCall = sequence.next();\n        const secondCall = sequence.next();\n        const thirdCall = sequence.next();\n        assert.equal(thirdCall.done, true);\n    });\n});\n"},"dist/test/folder_1/test_kata_11.spec.js":{"tests":[{"id":"8","name":"kata two four given 0 items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"9","name":"kata two four given 1 item and a NV state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"10","name":"kata two four given 1 item and a UT state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"11","name":"kata two four given 1 item and a TX state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"12","name":"kata two four given 1 item and a AL state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"13","name":"kata two four given 1 item and a CA state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"14","name":"kata two four given 1000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"15","name":"kata two four given 5000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"16","name":"kata two four given 7000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"17","name":"kata two four given 10000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"18","name":"kata two four given 50000 of items can accept an input of how many items, cost per item, state code, and calculate total value"}],"source":"import { assert } from 'chai';\nimport { input } from \"../../src/folder_1/11_kata.js\";\ndescribe('kata two four', function () {\n    it('given 0 items can accept an input of how many items, cost per item, state code, and calculate total value', function () {\n        const commands = [\n            \"0\",\n            \"5\",\n            \"NV\"\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, 0);\n    });\n    [\n        { state: \"NV\", multiplier: 1.08 },\n        { state: \"UT\", multiplier: 1.0685 },\n        { state: \"TX\", multiplier: 1.0625 },\n        { state: \"AL\", multiplier: 1.0400 },\n        { state: \"CA\", multiplier: 1.0825 },\n    ].forEach(({ state, multiplier }) => it(`given 1 item and a ${state} state code can accept an input of how many items, cost per item, state code, ` +\n        'and calculate total value', function () {\n        const commands = [\n            \"1\",\n            \"5\",\n            state\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, 5 * multiplier);\n    }));\n    [\n        { amount: \"1000\", discount: 0.03 },\n        { amount: \"5000\", discount: 0.05 },\n        { amount: \"7000\", discount: 0.07 },\n        { amount: \"10000\", discount: 0.10 },\n        { amount: \"50000\", discount: 0.15 },\n    ].forEach(({ amount, discount }) => it(`given ${amount} of items can accept an input of how many items, cost per item, state code, and calculate total value`, function () {\n        const commands = [\n            \"1\",\n            amount,\n            \"NV\"\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, +amount * (1 - discount) * (1.08));\n    }));\n});\n"},"dist/test/folder_1/test_kata_12.spec.js":{"tests":[{"id":"19","name":"can do battle four the vile zerg zergling will battle the epic terran marine"},{"id":"20","name":"can do battle four the vile zerg zergling will battle the epic protos zealot"},{"id":"21","name":"can do battle four the vile zerg zergling cannot hit a unit it has not run at"}],"source":"import { assert } from \"chai\";\nimport { Zergling, Marine, Zealot } from '../../src/folder_1/12_kata.js';\ndescribe('can do battle four', () => {\n    it('the vile zerg zergling will battle the epic terran marine', () => {\n        const marine = new Marine();\n        const zergling = new Zergling();\n        zergling.run(marine);\n        marine.shoot(zergling);\n        zergling.attack(marine);\n        marine.shoot(zergling);\n        assert.equal(marine.alive(), true);\n        assert.equal(zergling.alive(), false);\n    });\n    it('the vile zerg zergling will battle the epic protos zealot', () => {\n        const zealot = new Zealot();\n        const zergling = new Zergling();\n        zergling.run(zealot);\n        zealot.claw(zergling);\n        zergling.attack(zealot);\n        zealot.claw(zergling);\n        assert.equal(zealot.alive(), true);\n    });\n    it('the vile zerg zergling cannot hit a unit it has not run at', () => {\n        const zealot = new Zealot();\n        const zergling = new Zergling();\n        zergling.attack(zealot);\n        assert.equal(zealot.hitpointBar(), \"full\");\n    });\n});\n"},"dist/test/folder_1/test_kata_13.spec.js":{"tests":[{"id":"22","name":"hello world kata five should return hello world"},{"id":"23","name":"hello world kata five should use a generator function that returns hello"},{"id":"24","name":"hello world kata five should use a generator function that returns world on second call"},{"id":"25","name":"hello world kata five should use a generator function that returns done after three calls"}],"source":"import assert from \"node:assert\";\nimport HelloWorld, { helloWorldGenerator } from '../../src/folder_1/13_kata.js';\ndescribe('hello world kata five', function () {\n    it('should return hello world', function () {\n        assert.equal(HelloWorld(), \"Hello World\");\n    });\n    it('should use a generator function that returns hello', () => {\n        let firstCall = helloWorldGenerator().next();\n        assert.equal(firstCall.value, 'Hello');\n        assert.equal(firstCall.done, false);\n    });\n    it('should use a generator function that returns world on second call', () => {\n        let sequence = helloWorldGenerator();\n        sequence.next();\n        let secondCall = sequence.next();\n        assert.equal(secondCall.value, 'World');\n        assert.equal(secondCall.done, false);\n    });\n    it('should use a generator function that returns done after three calls', () => {\n        let sequence = helloWorldGenerator();\n        const firstCall = sequence.next();\n        const secondCall = sequence.next();\n        const thirdCall = sequence.next();\n        assert.equal(thirdCall.done, true);\n    });\n});\n"},"dist/test/folder_1/test_kata_14.spec.js":{"tests":[{"id":"26","name":"kata two five given 0 items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"27","name":"kata two five given 1 item and a NV state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"28","name":"kata two five given 1 item and a UT state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"29","name":"kata two five given 1 item and a TX state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"30","name":"kata two five given 1 item and a AL state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"31","name":"kata two five given 1 item and a CA state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"32","name":"kata two five given 1000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"33","name":"kata two five given 5000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"34","name":"kata two five given 7000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"35","name":"kata two five given 10000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"36","name":"kata two five given 50000 of items can accept an input of how many items, cost per item, state code, and calculate total value"}],"source":"import { assert } from 'chai';\nimport { input } from \"../../src/folder_1/14_kata.js\";\ndescribe('kata two five', function () {\n    it('given 0 items can accept an input of how many items, cost per item, state code, and calculate total value', function () {\n        const commands = [\n            \"0\",\n            \"5\",\n            \"NV\"\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, 0);\n    });\n    [\n        { state: \"NV\", multiplier: 1.08 },\n        { state: \"UT\", multiplier: 1.0685 },\n        { state: \"TX\", multiplier: 1.0625 },\n        { state: \"AL\", multiplier: 1.0400 },\n        { state: \"CA\", multiplier: 1.0825 },\n    ].forEach(({ state, multiplier }) => it(`given 1 item and a ${state} state code can accept an input of how many items, cost per item, state code, ` +\n        'and calculate total value', function () {\n        const commands = [\n            \"1\",\n            \"5\",\n            state\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, 5 * multiplier);\n    }));\n    [\n        { amount: \"1000\", discount: 0.03 },\n        { amount: \"5000\", discount: 0.05 },\n        { amount: \"7000\", discount: 0.07 },\n        { amount: \"10000\", discount: 0.10 },\n        { amount: \"50000\", discount: 0.15 },\n    ].forEach(({ amount, discount }) => it(`given ${amount} of items can accept an input of how many items, cost per item, state code, and calculate total value`, function () {\n        const commands = [\n            \"1\",\n            amount,\n            \"NV\"\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, +amount * (1 - discount) * (1.08));\n    }));\n});\n"},"dist/test/folder_1/test_kata_15.spec.js":{"tests":[{"id":"37","name":"can do battle five the vile zerg zergling will battle the epic terran marine"},{"id":"38","name":"can do battle five the vile zerg zergling will battle the epic protos zealot"},{"id":"39","name":"can do battle five the vile zerg zergling cannot hit a unit it has not run at"}],"source":"import { assert } from \"chai\";\nimport { Zergling, Marine, Zealot } from '../../src/folder_1/15_kata.js';\ndescribe('can do battle five', () => {\n    it('the vile zerg zergling will battle the epic terran marine', () => {\n        const marine = new Marine();\n        const zergling = new Zergling();\n        zergling.run(marine);\n        marine.shoot(zergling);\n        zergling.attack(marine);\n        marine.shoot(zergling);\n        assert.equal(marine.alive(), true);\n        assert.equal(zergling.alive(), false);\n    });\n    it('the vile zerg zergling will battle the epic protos zealot', () => {\n        const zealot = new Zealot();\n        const zergling = new Zergling();\n        zergling.run(zealot);\n        zealot.claw(zergling);\n        zergling.attack(zealot);\n        zealot.claw(zergling);\n        assert.equal(zealot.alive(), true);\n    });\n    it('the vile zerg zergling cannot hit a unit it has not run at', () => {\n        const zealot = new Zealot();\n        const zergling = new Zergling();\n        zergling.attack(zealot);\n        assert.equal(zealot.hitpointBar(), \"full\");\n    });\n});\n"},"dist/test/folder_1/test_kata_16.spec.js":{"tests":[{"id":"40","name":"hello world kata six should return hello world"},{"id":"41","name":"hello world kata six should use a generator function that returns hello"},{"id":"42","name":"hello world kata six should use a generator function that returns world on second call"},{"id":"43","name":"hello world kata six should use a generator function that returns done after three calls"}],"source":"import assert from \"node:assert\";\nimport HelloWorld, { helloWorldGenerator } from '../../src/folder_1/16_kata.js';\ndescribe('hello world kata six', function () {\n    it('should return hello world', function () {\n        assert.equal(HelloWorld(), \"Hello World\");\n    });\n    it('should use a generator function that returns hello', () => {\n        let firstCall = helloWorldGenerator().next();\n        assert.equal(firstCall.value, 'Hello');\n        assert.equal(firstCall.done, false);\n    });\n    it('should use a generator function that returns world on second call', () => {\n        let sequence = helloWorldGenerator();\n        sequence.next();\n        let secondCall = sequence.next();\n        assert.equal(secondCall.value, 'World');\n        assert.equal(secondCall.done, false);\n    });\n    it('should use a generator function that returns done after three calls', () => {\n        let sequence = helloWorldGenerator();\n        const firstCall = sequence.next();\n        const secondCall = sequence.next();\n        const thirdCall = sequence.next();\n        assert.equal(thirdCall.done, true);\n    });\n});\n"},"dist/test/folder_1/test_kata_17.spec.js":{"tests":[{"id":"44","name":"kata two six given 0 items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"45","name":"kata two six given 1 item and a NV state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"46","name":"kata two six given 1 item and a UT state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"47","name":"kata two six given 1 item and a TX state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"48","name":"kata two six given 1 item and a AL state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"49","name":"kata two six given 1 item and a CA state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"50","name":"kata two six given 1000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"51","name":"kata two six given 5000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"52","name":"kata two six given 7000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"53","name":"kata two six given 10000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"54","name":"kata two six given 50000 of items can accept an input of how many items, cost per item, state code, and calculate total value"}],"source":"import { assert } from 'chai';\nimport { input } from \"../../src/folder_1/17_kata.js\";\ndescribe('kata two six', function () {\n    it('given 0 items can accept an input of how many items, cost per item, state code, and calculate total value', function () {\n        const commands = [\n            \"0\",\n            \"5\",\n            \"NV\"\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, 0);\n    });\n    [\n        { state: \"NV\", multiplier: 1.08 },\n        { state: \"UT\", multiplier: 1.0685 },\n        { state: \"TX\", multiplier: 1.0625 },\n        { state: \"AL\", multiplier: 1.0400 },\n        { state: \"CA\", multiplier: 1.0825 },\n    ].forEach(({ state, multiplier }) => it(`given 1 item and a ${state} state code can accept an input of how many items, cost per item, state code, ` +\n        'and calculate total value', function () {\n        const commands = [\n            \"1\",\n            \"5\",\n            state\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, 5 * multiplier);\n    }));\n    [\n        { amount: \"1000\", discount: 0.03 },\n        { amount: \"5000\", discount: 0.05 },\n        { amount: \"7000\", discount: 0.07 },\n        { amount: \"10000\", discount: 0.10 },\n        { amount: \"50000\", discount: 0.15 },\n    ].forEach(({ amount, discount }) => it(`given ${amount} of items can accept an input of how many items, cost per item, state code, and calculate total value`, function () {\n        const commands = [\n            \"1\",\n            amount,\n            \"NV\"\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, +amount * (1 - discount) * (1.08));\n    }));\n});\n"},"dist/test/folder_1/test_kata_18.spec.js":{"tests":[{"id":"55","name":"can do battle six the vile zerg zergling will battle the epic terran marine"},{"id":"56","name":"can do battle six the vile zerg zergling will battle the epic protos zealot"},{"id":"57","name":"can do battle six the vile zerg zergling cannot hit a unit it has not run at"}],"source":"import { assert } from \"chai\";\nimport { Zergling, Marine, Zealot } from '../../src/folder_1/18_kata.js';\ndescribe('can do battle six', () => {\n    it('the vile zerg zergling will battle the epic terran marine', () => {\n        const marine = new Marine();\n        const zergling = new Zergling();\n        zergling.run(marine);\n        marine.shoot(zergling);\n        zergling.attack(marine);\n        marine.shoot(zergling);\n        assert.equal(marine.alive(), true);\n        assert.equal(zergling.alive(), false);\n    });\n    it('the vile zerg zergling will battle the epic protos zealot', () => {\n        const zealot = new Zealot();\n        const zergling = new Zergling();\n        zergling.run(zealot);\n        zealot.claw(zergling);\n        zergling.attack(zealot);\n        zealot.claw(zergling);\n        assert.equal(zealot.alive(), true);\n    });\n    it('the vile zerg zergling cannot hit a unit it has not run at', () => {\n        const zealot = new Zealot();\n        const zergling = new Zergling();\n        zergling.attack(zealot);\n        assert.equal(zealot.hitpointBar(), \"full\");\n    });\n});\n"},"dist/test/folder_1/test_kata_2.spec.js":{"tests":[{"id":"58","name":"kata two given 0 items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"59","name":"kata two given 1 item and a NV state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"60","name":"kata two given 1 item and a UT state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"61","name":"kata two given 1 item and a TX state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"62","name":"kata two given 1 item and a AL state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"63","name":"kata two given 1 item and a CA state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"64","name":"kata two given 1000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"65","name":"kata two given 5000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"66","name":"kata two given 7000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"67","name":"kata two given 10000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"68","name":"kata two given 50000 of items can accept an input of how many items, cost per item, state code, and calculate total value"}],"source":"import { assert } from 'chai';\nimport { input } from \"../../src/folder_1/2_kata.js\";\ndescribe('kata two', function () {\n    it('given 0 items can accept an input of how many items, cost per item, state code, and calculate total value', function () {\n        const commands = [\n            \"0\",\n            \"5\",\n            \"NV\"\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, 0);\n    });\n    [\n        { state: \"NV\", multiplier: 1.08 },\n        { state: \"UT\", multiplier: 1.0685 },\n        { state: \"TX\", multiplier: 1.0625 },\n        { state: \"AL\", multiplier: 1.0400 },\n        { state: \"CA\", multiplier: 1.0825 },\n    ].forEach(({ state, multiplier }) => it(`given 1 item and a ${state} state code can accept an input of how many items, cost per item, state code, ` +\n        'and calculate total value', function () {\n        const commands = [\n            \"1\",\n            \"5\",\n            state\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, 5 * multiplier);\n    }));\n    [\n        { amount: \"1000\", discount: 0.03 },\n        { amount: \"5000\", discount: 0.05 },\n        { amount: \"7000\", discount: 0.07 },\n        { amount: \"10000\", discount: 0.10 },\n        { amount: \"50000\", discount: 0.15 },\n    ].forEach(({ amount, discount }) => it(`given ${amount} of items can accept an input of how many items, cost per item, state code, and calculate total value`, function () {\n        const commands = [\n            \"1\",\n            amount,\n            \"NV\"\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, +amount * (1 - discount) * (1.08));\n    }));\n});\n"},"dist/test/folder_1/test_kata_3.spec.js":{"tests":[{"id":"69","name":"can do battle the vile zerg zergling will battle the epic terran marine"},{"id":"70","name":"can do battle the vile zerg zergling will battle the epic protos zealot"},{"id":"71","name":"can do battle the vile zerg zergling cannot hit a unit it has not run at"}],"source":"import { assert } from \"chai\";\nimport { Zergling, Marine, Zealot } from '../../src/folder_1/3_kata.js';\ndescribe('can do battle', () => {\n    it('the vile zerg zergling will battle the epic terran marine', () => {\n        const marine = new Marine();\n        const zergling = new Zergling();\n        zergling.run(marine);\n        marine.shoot(zergling);\n        zergling.attack(marine);\n        marine.shoot(zergling);\n        assert.equal(marine.alive(), true);\n        assert.equal(zergling.alive(), false);\n    });\n    it('the vile zerg zergling will battle the epic protos zealot', () => {\n        const zealot = new Zealot();\n        const zergling = new Zergling();\n        zergling.run(zealot);\n        zealot.claw(zergling);\n        zergling.attack(zealot);\n        zealot.claw(zergling);\n        assert.equal(zealot.alive(), true);\n    });\n    it('the vile zerg zergling cannot hit a unit it has not run at', () => {\n        const zealot = new Zealot();\n        const zergling = new Zergling();\n        zergling.attack(zealot);\n        assert.equal(zealot.hitpointBar(), \"full\");\n    });\n});\n"},"dist/test/folder_1/test_kata_4.spec.js":{"tests":[{"id":"72","name":"hello world kata two should return hello world"},{"id":"73","name":"hello world kata two should use a generator function that returns hello"},{"id":"74","name":"hello world kata two should use a generator function that returns world on second call"},{"id":"75","name":"hello world kata two should use a generator function that returns done after three calls"}],"source":"import assert from \"node:assert\";\nimport HelloWorld, { helloWorldGenerator } from '../../src/folder_1/4_kata.js';\ndescribe('hello world kata two', function () {\n    it('should return hello world', function () {\n        assert.equal(HelloWorld(), \"Hello World\");\n    });\n    it('should use a generator function that returns hello', () => {\n        let firstCall = helloWorldGenerator().next();\n        assert.equal(firstCall.value, 'Hello');\n        assert.equal(firstCall.done, false);\n    });\n    it('should use a generator function that returns world on second call', () => {\n        let sequence = helloWorldGenerator();\n        sequence.next();\n        let secondCall = sequence.next();\n        assert.equal(secondCall.value, 'World');\n        assert.equal(secondCall.done, false);\n    });\n    it('should use a generator function that returns done after three calls', () => {\n        let sequence = helloWorldGenerator();\n        const firstCall = sequence.next();\n        const secondCall = sequence.next();\n        const thirdCall = sequence.next();\n        assert.equal(thirdCall.done, true);\n    });\n});\n"},"dist/test/folder_1/test_kata_5.spec.js":{"tests":[{"id":"76","name":"kata two two given 0 items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"77","name":"kata two two given 1 item and a NV state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"78","name":"kata two two given 1 item and a UT state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"79","name":"kata two two given 1 item and a TX state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"80","name":"kata two two given 1 item and a AL state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"81","name":"kata two two given 1 item and a CA state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"82","name":"kata two two given 1000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"83","name":"kata two two given 5000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"84","name":"kata two two given 7000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"85","name":"kata two two given 10000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"86","name":"kata two two given 50000 of items can accept an input of how many items, cost per item, state code, and calculate total value"}],"source":"import { assert } from 'chai';\nimport { input } from \"../../src/folder_1/5_kata.js\";\ndescribe('kata two two', function () {\n    it('given 0 items can accept an input of how many items, cost per item, state code, and calculate total value', function () {\n        const commands = [\n            \"0\",\n            \"5\",\n            \"NV\"\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, 0);\n    });\n    [\n        { state: \"NV\", multiplier: 1.08 },\n        { state: \"UT\", multiplier: 1.0685 },\n        { state: \"TX\", multiplier: 1.0625 },\n        { state: \"AL\", multiplier: 1.0400 },\n        { state: \"CA\", multiplier: 1.0825 },\n    ].forEach(({ state, multiplier }) => it(`given 1 item and a ${state} state code can accept an input of how many items, cost per item, state code, ` +\n        'and calculate total value', function () {\n        const commands = [\n            \"1\",\n            \"5\",\n            state\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, 5 * multiplier);\n    }));\n    [\n        { amount: \"1000\", discount: 0.03 },\n        { amount: \"5000\", discount: 0.05 },\n        { amount: \"7000\", discount: 0.07 },\n        { amount: \"10000\", discount: 0.10 },\n        { amount: \"50000\", discount: 0.15 },\n    ].forEach(({ amount, discount }) => it(`given ${amount} of items can accept an input of how many items, cost per item, state code, and calculate total value`, function () {\n        const commands = [\n            \"1\",\n            amount,\n            \"NV\"\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, +amount * (1 - discount) * (1.08));\n    }));\n});\n"},"dist/test/folder_1/test_kata_6.spec.js":{"tests":[{"id":"87","name":"can do battle two the vile zerg zergling will battle the epic terran marine"},{"id":"88","name":"can do battle two the vile zerg zergling will battle the epic protos zealot"},{"id":"89","name":"can do battle two the vile zerg zergling cannot hit a unit it has not run at"}],"source":"import { assert } from \"chai\";\nimport { Zergling, Marine, Zealot } from '../../src/folder_1/6_kata.js';\ndescribe('can do battle two', () => {\n    it('the vile zerg zergling will battle the epic terran marine', () => {\n        const marine = new Marine();\n        const zergling = new Zergling();\n        zergling.run(marine);\n        marine.shoot(zergling);\n        zergling.attack(marine);\n        marine.shoot(zergling);\n        assert.equal(marine.alive(), true);\n        assert.equal(zergling.alive(), false);\n    });\n    it('the vile zerg zergling will battle the epic protos zealot', () => {\n        const zealot = new Zealot();\n        const zergling = new Zergling();\n        zergling.run(zealot);\n        zealot.claw(zergling);\n        zergling.attack(zealot);\n        zealot.claw(zergling);\n        assert.equal(zealot.alive(), true);\n    });\n    it('the vile zerg zergling cannot hit a unit it has not run at', () => {\n        const zealot = new Zealot();\n        const zergling = new Zergling();\n        zergling.attack(zealot);\n        assert.equal(zealot.hitpointBar(), \"full\");\n    });\n});\n"},"dist/test/folder_1/test_kata_7.spec.js":{"tests":[{"id":"90","name":"hello world kata three should return hello world"},{"id":"91","name":"hello world kata three should use a generator function that returns hello"},{"id":"92","name":"hello world kata three should use a generator function that returns world on second call"},{"id":"93","name":"hello world kata three should use a generator function that returns done after three calls"}],"source":"import assert from \"node:assert\";\nimport HelloWorld, { helloWorldGenerator } from '../../src/folder_1/7_kata.js';\ndescribe('hello world kata three', function () {\n    it('should return hello world', function () {\n        assert.equal(HelloWorld(), \"Hello World\");\n    });\n    it('should use a generator function that returns hello', () => {\n        let firstCall = helloWorldGenerator().next();\n        assert.equal(firstCall.value, 'Hello');\n        assert.equal(firstCall.done, false);\n    });\n    it('should use a generator function that returns world on second call', () => {\n        let sequence = helloWorldGenerator();\n        sequence.next();\n        let secondCall = sequence.next();\n        assert.equal(secondCall.value, 'World');\n        assert.equal(secondCall.done, false);\n    });\n    it('should use a generator function that returns done after three calls', () => {\n        let sequence = helloWorldGenerator();\n        const firstCall = sequence.next();\n        const secondCall = sequence.next();\n        const thirdCall = sequence.next();\n        assert.equal(thirdCall.done, true);\n    });\n});\n"},"dist/test/folder_1/test_kata_8.spec.js":{"tests":[{"id":"94","name":"kata two three given 0 items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"95","name":"kata two three given 1 item and a NV state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"96","name":"kata two three given 1 item and a UT state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"97","name":"kata two three given 1 item and a TX state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"98","name":"kata two three given 1 item and a AL state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"99","name":"kata two three given 1 item and a CA state code can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"100","name":"kata two three given 1000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"101","name":"kata two three given 5000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"102","name":"kata two three given 7000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"103","name":"kata two three given 10000 of items can accept an input of how many items, cost per item, state code, and calculate total value"},{"id":"104","name":"kata two three given 50000 of items can accept an input of how many items, cost per item, state code, and calculate total value"}],"source":"import { assert } from 'chai';\nimport { input } from \"../../src/folder_1/8_kata.js\";\ndescribe('kata two three', function () {\n    it('given 0 items can accept an input of how many items, cost per item, state code, and calculate total value', function () {\n        const commands = [\n            \"0\",\n            \"5\",\n            \"NV\"\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, 0);\n    });\n    [\n        { state: \"NV\", multiplier: 1.08 },\n        { state: \"UT\", multiplier: 1.0685 },\n        { state: \"TX\", multiplier: 1.0625 },\n        { state: \"AL\", multiplier: 1.0400 },\n        { state: \"CA\", multiplier: 1.0825 },\n    ].forEach(({ state, multiplier }) => it(`given 1 item and a ${state} state code can accept an input of how many items, cost per item, state code, ` +\n        'and calculate total value', function () {\n        const commands = [\n            \"1\",\n            \"5\",\n            state\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, 5 * multiplier);\n    }));\n    [\n        { amount: \"1000\", discount: 0.03 },\n        { amount: \"5000\", discount: 0.05 },\n        { amount: \"7000\", discount: 0.07 },\n        { amount: \"10000\", discount: 0.10 },\n        { amount: \"50000\", discount: 0.15 },\n    ].forEach(({ amount, discount }) => it(`given ${amount} of items can accept an input of how many items, cost per item, state code, and calculate total value`, function () {\n        const commands = [\n            \"1\",\n            amount,\n            \"NV\"\n        ];\n        const totalCost = input(commands);\n        assert.equal(totalCost, +amount * (1 - discount) * (1.08));\n    }));\n});\n"},"dist/test/folder_1/test_kata_9.spec.js":{"tests":[{"id":"105","name":"can do battle three the vile zerg zergling will battle the epic terran marine"},{"id":"106","name":"can do battle three the vile zerg zergling will battle the epic protos zealot"},{"id":"107","name":"can do battle three the vile zerg zergling cannot hit a unit it has not run at"}],"source":"import { assert } from \"chai\";\nimport { Zergling, Marine, Zealot } from '../../src/folder_1/9_kata.js';\ndescribe('can do battle three', () => {\n    it('the vile zerg zergling will battle the epic terran marine', () => {\n        const marine = new Marine();\n        const zergling = new Zergling();\n        zergling.run(marine);\n        marine.shoot(zergling);\n        zergling.attack(marine);\n        marine.shoot(zergling);\n        assert.equal(marine.alive(), true);\n        assert.equal(zergling.alive(), false);\n    });\n    it('the vile zerg zergling will battle the epic protos zealot', () => {\n        const zealot = new Zealot();\n        const zergling = new Zergling();\n        zergling.run(zealot);\n        zealot.claw(zergling);\n        zergling.attack(zealot);\n        zealot.claw(zergling);\n        assert.equal(zealot.alive(), true);\n    });\n    it('the vile zerg zergling cannot hit a unit it has not run at', () => {\n        const zealot = new Zealot();\n        const zergling = new Zergling();\n        zergling.attack(zealot);\n        assert.equal(zealot.hitpointBar(), \"full\");\n    });\n});\n"}},"projectRoot":"C:\\Users\\evano\\WebstormProjects\\JavascriptKata","config":{"$schema":"./node_modules/@stryker-mutator/core/schema/stryker-schema.json","_comment":"This config was generated using 'stryker init'. Please take a look at: https://stryker-mutator.io/docs/stryker-js/configuration/ for more information.","packageManager":"npm","reporters":["html","json","clear-text","progress"],"tsconfigFile":"tsconfig.json","testRunner":"mocha","testRunner_comment":"Take a look at https://stryker-mutator.io/docs/stryker-js/mocha-runner for information about the mocha plugin.","coverageAnalysis":"perTest","buildCommand":"npm run build","mochaOptions":{"spec":["dist/**/*.spec.js"]},"allowConsoleColors":true,"checkers":[],"checkerNodeArgs":[],"commandRunner":{"command":"npm test"},"clearTextReporter":{"allowColor":true,"allowEmojis":false,"logTests":true,"maxTestsToLog":3,"reportTests":true,"reportMutants":true,"reportScoreTable":true,"skipFull":false},"dashboard":{"baseUrl":"https://dashboard.stryker-mutator.io/api/reports","reportType":"full"},"dryRunOnly":false,"eventReporter":{"baseDir":"reports/mutation/events"},"ignorePatterns":[],"ignoreStatic":false,"incremental":false,"incrementalFile":"reports/stryker-incremental.json","force":false,"fileLogLevel":"off","inPlace":false,"logLevel":"info","maxConcurrentTestRunners":9007199254740991,"maxTestRunnerReuse":0,"mutate":["{src,lib}/**/!(*.+(s|S)pec|*.+(t|T)est).+(cjs|mjs|js|ts|mts|cts|jsx|tsx|html|vue|svelte)","!{src,lib}/**/__tests__/**/*.+(cjs|mjs|js|ts|mts|cts|jsx|tsx|html|vue|svelte)"],"mutator":{"plugins":null,"excludedMutations":[]},"plugins":["@stryker-mutator/*"],"appendPlugins":[],"htmlReporter":{"fileName":"reports/mutation/mutation.html"},"jsonReporter":{"fileName":"reports/mutation/mutation.json"},"disableTypeChecks":true,"symlinkNodeModules":true,"tempDirName":".stryker-tmp","cleanTempDir":true,"testRunnerNodeArgs":[],"thresholds":{"high":80,"low":60,"break":null},"timeoutFactor":1.5,"timeoutMS":5000,"dryRunTimeoutMinutes":5,"warnings":true,"disableBail":false,"allowEmpty":false,"ignorers":[]},"framework":{"name":"StrykerJS","version":"9.0.1","branding":{"homepageUrl":"https://stryker-mutator.io","imageUrl":"data:image/svg+xml;utf8,%3Csvg viewBox='0 0 1458 1458' xmlns='http://www.w3.org/2000/svg' fill-rule='evenodd' clip-rule='evenodd' stroke-linejoin='round' stroke-miterlimit='2'%3E%3Cpath fill='none' d='M0 0h1458v1458H0z'/%3E%3CclipPath id='a'%3E%3Cpath d='M0 0h1458v1458H0z'/%3E%3C/clipPath%3E%3Cg clip-path='url(%23a)'%3E%3Cpath d='M1458 729c0 402.655-326.345 729-729 729S0 1131.655 0 729C0 326.445 326.345 0 729 0s729 326.345 729 729' fill='%23e74c3c' fill-rule='nonzero'/%3E%3Cpath d='M778.349 1456.15L576.6 1254.401l233-105 85-78.668v-64.332l-257-257-44-187-50-208 251.806-82.793L1076.6 389.401l380.14 379.15c-19.681 367.728-311.914 663.049-678.391 687.599z' fill-opacity='.3'/%3E%3Cpath d='M753.4 329.503c41.79 0 74.579 7.83 97.925 25.444 23.571 18.015 41.69 43.956 55.167 77.097l11.662 28.679 165.733-58.183-14.137-32.13c-26.688-60.655-64.896-108.61-114.191-144.011-49.329-35.423-117.458-54.302-204.859-54.302-50.78 0-95.646 7.376-134.767 21.542-40.093 14.671-74.09 34.79-102.239 60.259-28.84 26.207-50.646 57.06-65.496 92.701-14.718 35.052-22.101 72.538-22.101 112.401 0 72.536 20.667 133.294 61.165 182.704 38.624 47.255 98.346 88.037 179.861 121.291 42.257 17.475 78.715 33.125 109.227 46.994 27.193 12.361 49.294 26.124 66.157 41.751 15.309 14.186 26.497 30.584 33.63 49.258 7.721 20.214 11.16 45.69 11.16 76.402 0 28.021-4.251 51.787-13.591 71.219-8.832 18.374-20.171 33.178-34.523 44.219-14.787 11.374-31.193 19.591-49.393 24.466-19.68 5.359-39.14 7.993-58.69 7.993-29.359 0-54.387-3.407-75.182-10.747-20.112-7.013-37.144-16.144-51.259-27.486-13.618-11.009-24.971-23.766-33.744-38.279-9.64-15.8-17.272-31.924-23.032-48.408l-10.965-31.376-161.669 60.585 10.734 30.124c10.191 28.601 24.197 56.228 42.059 82.748 18.208 27.144 41.322 51.369 69.525 72.745 27.695 21.075 60.904 38.218 99.481 51.041 37.777 12.664 82.004 19.159 132.552 19.159 49.998 0 95.818-8.321 137.611-24.622 42.228-16.471 78.436-38.992 108.835-67.291 30.719-28.597 54.631-62.103 71.834-100.642 17.263-38.56 25.923-79.392 25.923-122.248 0-54.339-8.368-100.37-24.208-138.32-16.29-38.759-38.252-71.661-65.948-98.797-26.965-26.418-58.269-48.835-93.858-67.175-33.655-17.241-69.196-33.11-106.593-47.533-35.934-13.429-65.822-26.601-89.948-39.525-22.153-11.868-40.009-24.21-53.547-37.309-11.429-11.13-19.83-23.678-24.718-37.664-5.413-15.49-7.98-33.423-7.98-53.577 0-40.883 11.293-71.522 37.086-90.539 28.443-20.825 64.985-30.658 109.311-30.658z' fill='%23f1c40f' fill-rule='nonzero'/%3E%3Cpath d='M720 0h18v113h-18zM1458 738v-18h-113v18h113zM720 1345h18v113h-18zM113 738v-18H0v18h113z'/%3E%3C/g%3E%3C/svg%3E"},"dependencies":{"@stryker-mutator/mocha-runner":"9.0.1","mocha":"11.7.1","typescript":"5.8.3"}}}
\ No newline at end of file
diff --git a/src/1_kata.ts b/src/folder_1/10_kata.ts
similarity index 100%
rename from src/1_kata.ts
rename to src/folder_1/10_kata.ts
diff --git a/src/2_kata.ts b/src/folder_1/11_kata.ts
similarity index 100%
rename from src/2_kata.ts
rename to src/folder_1/11_kata.ts
diff --git a/src/3_kata.ts b/src/folder_1/12_kata.ts
similarity index 100%
rename from src/3_kata.ts
rename to src/folder_1/12_kata.ts
diff --git a/src/folder_1/13_kata.ts b/src/folder_1/13_kata.ts
new file mode 100644
index 0000000..27dda24
--- /dev/null
+++ b/src/folder_1/13_kata.ts
@@ -0,0 +1,8 @@
+export function* helloWorldGenerator() {
+    yield 'Hello';
+    yield 'World';
+}
+
+export default function HelloWorld() {
+    return Array.from(helloWorldGenerator()).join(' ');
+}
diff --git a/src/folder_1/14_kata.ts b/src/folder_1/14_kata.ts
new file mode 100644
index 0000000..20e26b1
--- /dev/null
+++ b/src/folder_1/14_kata.ts
@@ -0,0 +1,27 @@
+﻿
+
+export const input = (commands) => {
+    let totalCost = +commands[0] * +commands[1];
+    const volumeDiscount = [
+        { volume: 50000, discount: 0.15 },
+        { volume: 10000, discount: 0.10 },
+        { volume: 7000, discount: 0.07 },
+        { volume: 5000, discount: 0.05 },
+        { volume: 1000, discount: 0.03 },
+    ]
+    volumeDiscount.some(({volume, discount}, idx) => {
+        if (totalCost >= volume) {
+            totalCost = totalCost * (1 - discount)
+            return true;
+        }
+        return false;
+    })
+    const stateTaxes = {
+        UT: 6.85,
+        NV: 8.00,
+        TX: 6.25,
+        AL: 4.00,
+        CA: 8.25,
+    }
+    return totalCost * (1 + stateTaxes[commands[2]] / 100);
+}
\ No newline at end of file
diff --git a/src/folder_1/15_kata.ts b/src/folder_1/15_kata.ts
new file mode 100644
index 0000000..e8e83b2
--- /dev/null
+++ b/src/folder_1/15_kata.ts
@@ -0,0 +1,68 @@
+﻿interface IUnit {
+    attack(unit: IUnit): void;
+    alive(): boolean;
+    hurt(damage: number): void;
+}
+export class Zergling implements IUnit {
+    hitpoints = 1;
+    closeUnits: IUnit[] = [];
+    attack(unit: IUnit): void {
+        if (this.closeUnits.includes(unit)) {
+            unit.hurt(1);
+        }
+    }
+
+    alive(): boolean {
+        return this.hitpoints > 0;
+    }
+
+    run(unit: IUnit): void {
+        this.closeUnits.push(unit);
+    }
+
+    hurt(damage: number): void {
+        this.hitpoints -= damage;
+    }
+}
+export class Marine implements IUnit {
+    hitpoints = 2;
+    attack(unit: IUnit): void {
+        this.shoot(unit);
+    }
+
+    alive(): boolean {
+        return true;
+    }
+
+    shoot(unit: IUnit): void {
+        unit.hurt(1);
+    }
+    hurt(damage: number): void {
+        this.hitpoints -= damage;
+    }
+}
+export class Zealot implements IUnit {
+    hitpoints = 2;
+    attack(unit: IUnit): void {
+        this.claw(unit);
+    }
+
+    alive(): boolean {
+        return true;
+    }
+
+    claw(unit: IUnit): void {
+        unit.hurt(2);
+    }
+
+    hurt(damage: number): void {
+        this.hitpoints -= damage;
+    }
+
+    hitpointBar(): string {
+        if (this.hitpoints === 2) {
+            return "full";
+        }
+        return "not full";
+    }
+}
\ No newline at end of file
diff --git a/src/folder_1/16_kata.ts b/src/folder_1/16_kata.ts
new file mode 100644
index 0000000..27dda24
--- /dev/null
+++ b/src/folder_1/16_kata.ts
@@ -0,0 +1,8 @@
+export function* helloWorldGenerator() {
+    yield 'Hello';
+    yield 'World';
+}
+
+export default function HelloWorld() {
+    return Array.from(helloWorldGenerator()).join(' ');
+}
diff --git a/src/folder_1/17_kata.ts b/src/folder_1/17_kata.ts
new file mode 100644
index 0000000..20e26b1
--- /dev/null
+++ b/src/folder_1/17_kata.ts
@@ -0,0 +1,27 @@
+﻿
+
+export const input = (commands) => {
+    let totalCost = +commands[0] * +commands[1];
+    const volumeDiscount = [
+        { volume: 50000, discount: 0.15 },
+        { volume: 10000, discount: 0.10 },
+        { volume: 7000, discount: 0.07 },
+        { volume: 5000, discount: 0.05 },
+        { volume: 1000, discount: 0.03 },
+    ]
+    volumeDiscount.some(({volume, discount}, idx) => {
+        if (totalCost >= volume) {
+            totalCost = totalCost * (1 - discount)
+            return true;
+        }
+        return false;
+    })
+    const stateTaxes = {
+        UT: 6.85,
+        NV: 8.00,
+        TX: 6.25,
+        AL: 4.00,
+        CA: 8.25,
+    }
+    return totalCost * (1 + stateTaxes[commands[2]] / 100);
+}
\ No newline at end of file
diff --git a/src/folder_1/18_kata.ts b/src/folder_1/18_kata.ts
new file mode 100644
index 0000000..e8e83b2
--- /dev/null
+++ b/src/folder_1/18_kata.ts
@@ -0,0 +1,68 @@
+﻿interface IUnit {
+    attack(unit: IUnit): void;
+    alive(): boolean;
+    hurt(damage: number): void;
+}
+export class Zergling implements IUnit {
+    hitpoints = 1;
+    closeUnits: IUnit[] = [];
+    attack(unit: IUnit): void {
+        if (this.closeUnits.includes(unit)) {
+            unit.hurt(1);
+        }
+    }
+
+    alive(): boolean {
+        return this.hitpoints > 0;
+    }
+
+    run(unit: IUnit): void {
+        this.closeUnits.push(unit);
+    }
+
+    hurt(damage: number): void {
+        this.hitpoints -= damage;
+    }
+}
+export class Marine implements IUnit {
+    hitpoints = 2;
+    attack(unit: IUnit): void {
+        this.shoot(unit);
+    }
+
+    alive(): boolean {
+        return true;
+    }
+
+    shoot(unit: IUnit): void {
+        unit.hurt(1);
+    }
+    hurt(damage: number): void {
+        this.hitpoints -= damage;
+    }
+}
+export class Zealot implements IUnit {
+    hitpoints = 2;
+    attack(unit: IUnit): void {
+        this.claw(unit);
+    }
+
+    alive(): boolean {
+        return true;
+    }
+
+    claw(unit: IUnit): void {
+        unit.hurt(2);
+    }
+
+    hurt(damage: number): void {
+        this.hitpoints -= damage;
+    }
+
+    hitpointBar(): string {
+        if (this.hitpoints === 2) {
+            return "full";
+        }
+        return "not full";
+    }
+}
\ No newline at end of file
diff --git a/src/folder_1/4_kata.ts b/src/folder_1/4_kata.ts
new file mode 100644
index 0000000..a00fad0
--- /dev/null
+++ b/src/folder_1/4_kata.ts
@@ -0,0 +1,8 @@
+export function* helloWorldGenerator() {
+    yield 'Hello';
+    yield 'World';
+}
+
+export default function HelloWorld() {
+    return Array.from(helloWorldGenerator()).join(' ');
+}
\ No newline at end of file
diff --git a/src/folder_1/5_kata.ts b/src/folder_1/5_kata.ts
new file mode 100644
index 0000000..20e26b1
--- /dev/null
+++ b/src/folder_1/5_kata.ts
@@ -0,0 +1,27 @@
+﻿
+
+export const input = (commands) => {
+    let totalCost = +commands[0] * +commands[1];
+    const volumeDiscount = [
+        { volume: 50000, discount: 0.15 },
+        { volume: 10000, discount: 0.10 },
+        { volume: 7000, discount: 0.07 },
+        { volume: 5000, discount: 0.05 },
+        { volume: 1000, discount: 0.03 },
+    ]
+    volumeDiscount.some(({volume, discount}, idx) => {
+        if (totalCost >= volume) {
+            totalCost = totalCost * (1 - discount)
+            return true;
+        }
+        return false;
+    })
+    const stateTaxes = {
+        UT: 6.85,
+        NV: 8.00,
+        TX: 6.25,
+        AL: 4.00,
+        CA: 8.25,
+    }
+    return totalCost * (1 + stateTaxes[commands[2]] / 100);
+}
\ No newline at end of file
diff --git a/src/folder_1/6_kata.ts b/src/folder_1/6_kata.ts
new file mode 100644
index 0000000..e8e83b2
--- /dev/null
+++ b/src/folder_1/6_kata.ts
@@ -0,0 +1,68 @@
+﻿interface IUnit {
+    attack(unit: IUnit): void;
+    alive(): boolean;
+    hurt(damage: number): void;
+}
+export class Zergling implements IUnit {
+    hitpoints = 1;
+    closeUnits: IUnit[] = [];
+    attack(unit: IUnit): void {
+        if (this.closeUnits.includes(unit)) {
+            unit.hurt(1);
+        }
+    }
+
+    alive(): boolean {
+        return this.hitpoints > 0;
+    }
+
+    run(unit: IUnit): void {
+        this.closeUnits.push(unit);
+    }
+
+    hurt(damage: number): void {
+        this.hitpoints -= damage;
+    }
+}
+export class Marine implements IUnit {
+    hitpoints = 2;
+    attack(unit: IUnit): void {
+        this.shoot(unit);
+    }
+
+    alive(): boolean {
+        return true;
+    }
+
+    shoot(unit: IUnit): void {
+        unit.hurt(1);
+    }
+    hurt(damage: number): void {
+        this.hitpoints -= damage;
+    }
+}
+export class Zealot implements IUnit {
+    hitpoints = 2;
+    attack(unit: IUnit): void {
+        this.claw(unit);
+    }
+
+    alive(): boolean {
+        return true;
+    }
+
+    claw(unit: IUnit): void {
+        unit.hurt(2);
+    }
+
+    hurt(damage: number): void {
+        this.hitpoints -= damage;
+    }
+
+    hitpointBar(): string {
+        if (this.hitpoints === 2) {
+            return "full";
+        }
+        return "not full";
+    }
+}
\ No newline at end of file
diff --git a/src/folder_1/7_kata.ts b/src/folder_1/7_kata.ts
new file mode 100644
index 0000000..27dda24
--- /dev/null
+++ b/src/folder_1/7_kata.ts
@@ -0,0 +1,8 @@
+export function* helloWorldGenerator() {
+    yield 'Hello';
+    yield 'World';
+}
+
+export default function HelloWorld() {
+    return Array.from(helloWorldGenerator()).join(' ');
+}
diff --git a/src/folder_1/8_kata.ts b/src/folder_1/8_kata.ts
new file mode 100644
index 0000000..20e26b1
--- /dev/null
+++ b/src/folder_1/8_kata.ts
@@ -0,0 +1,27 @@
+﻿
+
+export const input = (commands) => {
+    let totalCost = +commands[0] * +commands[1];
+    const volumeDiscount = [
+        { volume: 50000, discount: 0.15 },
+        { volume: 10000, discount: 0.10 },
+        { volume: 7000, discount: 0.07 },
+        { volume: 5000, discount: 0.05 },
+        { volume: 1000, discount: 0.03 },
+    ]
+    volumeDiscount.some(({volume, discount}, idx) => {
+        if (totalCost >= volume) {
+            totalCost = totalCost * (1 - discount)
+            return true;
+        }
+        return false;
+    })
+    const stateTaxes = {
+        UT: 6.85,
+        NV: 8.00,
+        TX: 6.25,
+        AL: 4.00,
+        CA: 8.25,
+    }
+    return totalCost * (1 + stateTaxes[commands[2]] / 100);
+}
\ No newline at end of file
diff --git a/src/folder_1/9_kata.ts b/src/folder_1/9_kata.ts
new file mode 100644
index 0000000..e8e83b2
--- /dev/null
+++ b/src/folder_1/9_kata.ts
@@ -0,0 +1,68 @@
+﻿interface IUnit {
+    attack(unit: IUnit): void;
+    alive(): boolean;
+    hurt(damage: number): void;
+}
+export class Zergling implements IUnit {
+    hitpoints = 1;
+    closeUnits: IUnit[] = [];
+    attack(unit: IUnit): void {
+        if (this.closeUnits.includes(unit)) {
+            unit.hurt(1);
+        }
+    }
+
+    alive(): boolean {
+        return this.hitpoints > 0;
+    }
+
+    run(unit: IUnit): void {
+        this.closeUnits.push(unit);
+    }
+
+    hurt(damage: number): void {
+        this.hitpoints -= damage;
+    }
+}
+export class Marine implements IUnit {
+    hitpoints = 2;
+    attack(unit: IUnit): void {
+        this.shoot(unit);
+    }
+
+    alive(): boolean {
+        return true;
+    }
+
+    shoot(unit: IUnit): void {
+        unit.hurt(1);
+    }
+    hurt(damage: number): void {
+        this.hitpoints -= damage;
+    }
+}
+export class Zealot implements IUnit {
+    hitpoints = 2;
+    attack(unit: IUnit): void {
+        this.claw(unit);
+    }
+
+    alive(): boolean {
+        return true;
+    }
+
+    claw(unit: IUnit): void {
+        unit.hurt(2);
+    }
+
+    hurt(damage: number): void {
+        this.hitpoints -= damage;
+    }
+
+    hitpointBar(): string {
+        if (this.hitpoints === 2) {
+            return "full";
+        }
+        return "not full";
+    }
+}
\ No newline at end of file
diff --git a/test/bugs.md b/test/bugs.md
deleted file mode 100644
index 1dea599..0000000
--- a/test/bugs.md
+++ /dev/null
@@ -1,17 +0,0 @@
-﻿# Bugs Identified from Mutation Testing, Production Code, and Existing Tests
-
-1. **Marine and Zealot alive() always return true.**
-   - These units are never considered dead, even if hitpoints are zero or below.
-2. **Units can have negative hitpoints.**
-   - No validation prevents hitpoints from dropping below zero.
-3. **Zergling's closeUnits array is not protected from external mutation.**
-   - External code can mutate closeUnits, breaking attack logic.
-4. **No check for duplicate units in Zergling's run().**
-   - The same unit can be added multiple times to closeUnits.
-5. **No input validation in hurt() methods.**
-   - Passing negative damage could increase hitpoints.
-6. **hitpointBar() only checks for exactly 2 hitpoints.**
-   - Any value other than 2 returns 'not full', even if hitpoints are negative or above 2.
-7. **No test coverage for edge cases and internal state changes.**
-   - Many edge cases (e.g., attacking dead units, overkill, empty closeUnits) are not tested.
-
diff --git a/test/bugs_found_folder_1/bugs_kata_1.md b/test/bugs_found_folder_1/bugs_kata_1.md
new file mode 100644
index 0000000..8cd96ff
--- /dev/null
+++ b/test/bugs_found_folder_1/bugs_kata_1.md
@@ -0,0 +1,12 @@
+﻿## Mutation Testing Results for Kata 1
+
+The existing tests are effectively catching mutations:
+1. Block Statement mutation - Killed
+   - Attempted to replace the generator function body with empty block
+   - Caught by test "should return hello world"
+
+2. String Literal mutation - Killed
+   - Attempted to replace "Hello" with empty string
+   - Caught by test "should return hello world"
+
+No uncaught mutations found - code appears to be well-tested.
diff --git a/test/bugs_found_folder_1/bugs_kata_10.md b/test/bugs_found_folder_1/bugs_kata_10.md
new file mode 100644
index 0000000..869ed12
--- /dev/null
+++ b/test/bugs_found_folder_1/bugs_kata_10.md
@@ -0,0 +1,10 @@
+﻿## Mutation Testing Results for Kata 10
+
+Note: This kata is identical to Katas 1, 4, and 7, implementing the Hello World generator functionality.
+
+Current Test Coverage:
+- Generator sequence validation
+- String concatenation
+- Completion state verification
+
+The implementation is simple and well-tested, following the same pattern as previous Hello World generator implementations.
diff --git a/test/bugs_found_folder_1/bugs_kata_11.md b/test/bugs_found_folder_1/bugs_kata_11.md
new file mode 100644
index 0000000..9b0b8fa
--- /dev/null
+++ b/test/bugs_found_folder_1/bugs_kata_11.md
@@ -0,0 +1,15 @@
+﻿## Mutation Testing Results for Kata 11
+
+Note: This kata is identical to Katas 2, 5, and 8, implementing the same pricing calculator functionality.
+
+Current Implementation Coverage:
+1. Volume discounts for different tiers
+2. State tax calculations
+3. Basic price calculations
+
+Areas for Additional Testing:
+1. Input validation
+2. Edge cases at discount boundaries
+3. Invalid state codes
+4. Non-numeric and negative inputs
+5. Boundary conditions between discount tiers
diff --git a/test/bugs_found_folder_1/bugs_kata_12.md b/test/bugs_found_folder_1/bugs_kata_12.md
new file mode 100644
index 0000000..683e3fc
--- /dev/null
+++ b/test/bugs_found_folder_1/bugs_kata_12.md
@@ -0,0 +1,15 @@
+﻿## Mutation Testing Results for Kata 12
+
+Note: This kata is identical to Katas 3, 6, and 9, implementing the StarCraft combat system.
+
+Implementation Issues:
+1. Marine and Zealot alive() methods are incorrect (always return true)
+2. No damage validation in hurt() methods
+3. Potential memory leak in Zergling's closeUnits array
+
+Test Coverage Needs:
+1. Unit death conditions
+2. Health tracking accuracy
+3. Combat sequence validation
+4. Unit proximity mechanics
+5. Multi-unit engagement scenarios
diff --git a/test/bugs_found_folder_1/bugs_kata_13.md b/test/bugs_found_folder_1/bugs_kata_13.md
new file mode 100644
index 0000000..7aef049
--- /dev/null
+++ b/test/bugs_found_folder_1/bugs_kata_13.md
@@ -0,0 +1,10 @@
+﻿## Mutation Testing Results for Kata 13
+
+Note: This kata is identical to Katas 1, 4, 7, and 10, implementing the Hello World generator functionality.
+
+Current Test Coverage:
+- Basic string generation
+- Generator sequence validation
+- Generator completion state
+
+The implementation follows the established pattern and maintains the same level of test coverage as the previous Hello World implementations.
diff --git a/test/bugs_found_folder_1/bugs_kata_14.md b/test/bugs_found_folder_1/bugs_kata_14.md
new file mode 100644
index 0000000..f04344b
--- /dev/null
+++ b/test/bugs_found_folder_1/bugs_kata_14.md
@@ -0,0 +1,15 @@
+﻿## Mutation Testing Results for Kata 14
+
+Note: This kata is identical to Katas 2, 5, 8, and 11, implementing the pricing calculator functionality.
+
+Current Implementation Coverage:
+1. Volume discount calculations (5 tiers)
+2. State tax calculations (5 states)
+3. Basic price multiplication
+
+Areas Needing Additional Testing:
+1. Input validation for commands array
+2. Edge cases at discount boundaries
+3. Invalid state codes
+4. Numeric input validation
+5. Discount tier transitions
diff --git a/test/bugs_found_folder_1/bugs_kata_15.md b/test/bugs_found_folder_1/bugs_kata_15.md
new file mode 100644
index 0000000..78eaf5e
--- /dev/null
+++ b/test/bugs_found_folder_1/bugs_kata_15.md
@@ -0,0 +1,15 @@
+﻿## Mutation Testing Results for Kata 15
+
+Note: This kata is identical to Katas 3, 6, 9, and 12, implementing the StarCraft combat system.
+
+Current Implementation Issues:
+1. Marine and Zealot alive() methods incorrectly return true always
+2. No validation on damage values
+3. Potential memory issues in Zergling's closeUnits array management
+
+Test Coverage Needs:
+1. Proper health tracking for all units
+2. Combat sequence validation
+3. Unit proximity mechanics
+4. Multi-unit combat scenarios
+5. Death state verification
diff --git a/test/bugs_found_folder_1/bugs_kata_16.md b/test/bugs_found_folder_1/bugs_kata_16.md
new file mode 100644
index 0000000..002e33c
--- /dev/null
+++ b/test/bugs_found_folder_1/bugs_kata_16.md
@@ -0,0 +1,10 @@
+﻿## Mutation Testing Results for Kata 16
+
+Note: This kata is identical to Katas 1, 4, 7, 10, and 13, implementing the Hello World generator.
+
+Current Test Coverage:
+- Generator sequence validation
+- String concatenation
+- Iterator completion state
+
+The implementation maintains consistent functionality with previous Hello World generator versions.
diff --git a/test/bugs_found_folder_1/bugs_kata_17.md b/test/bugs_found_folder_1/bugs_kata_17.md
new file mode 100644
index 0000000..0471ca3
--- /dev/null
+++ b/test/bugs_found_folder_1/bugs_kata_17.md
@@ -0,0 +1,15 @@
+﻿## Mutation Testing Results for Kata 17
+
+Note: This kata is identical to Katas 2, 5, 8, 11, and 14, implementing the pricing calculator functionality.
+
+Current Implementation Coverage:
+1. Volume discounts across 5 tiers (1000-50000)
+2. State tax calculations for 5 states
+3. Basic price calculation
+
+Areas for Additional Testing:
+1. Command array validation
+2. Boundary conditions at discount tiers
+3. Invalid state handling
+4. Input type validation
+5. Edge cases in calculations
diff --git a/test/bugs_found_folder_1/bugs_kata_18.md b/test/bugs_found_folder_1/bugs_kata_18.md
new file mode 100644
index 0000000..a3affc0
--- /dev/null
+++ b/test/bugs_found_folder_1/bugs_kata_18.md
@@ -0,0 +1,15 @@
+﻿## Mutation Testing Results for Kata 18
+
+Note: This kata is identical to Katas 3, 6, 9, 12, and 15, implementing the StarCraft combat system.
+
+Implementation Issues:
+1. Marine and Zealot alive() methods are incorrect (always return true)
+2. No input validation for damage values
+3. Potential memory management issues in Zergling's closeUnits array
+
+Test Coverage Needs:
+1. Unit death verification
+2. Health tracking accuracy
+3. Combat order validation
+4. Multi-unit engagement scenarios
+5. Memory leak prevention in target tracking
diff --git a/test/bugs_found_folder_1/bugs_kata_2.md b/test/bugs_found_folder_1/bugs_kata_2.md
new file mode 100644
index 0000000..034e7f4
--- /dev/null
+++ b/test/bugs_found_folder_1/bugs_kata_2.md
@@ -0,0 +1,12 @@
+﻿## Mutation Testing Results for Kata 2
+
+Testing coverage appears robust for:
+- State tax calculations for different states (UT, NV, TX, AL, CA)
+- Volume discount thresholds (1000, 5000, 7000, 10000, 50000)
+- Zero item case
+
+Potential areas for additional test coverage:
+1. Edge cases at discount boundaries
+2. Invalid state codes
+3. Negative numbers for quantity or price
+4. Non-numeric inputs
diff --git a/test/bugs_found_folder_1/bugs_kata_3.md b/test/bugs_found_folder_1/bugs_kata_3.md
new file mode 100644
index 0000000..35ac12e
--- /dev/null
+++ b/test/bugs_found_folder_1/bugs_kata_3.md
@@ -0,0 +1,20 @@
+﻿## Mutation Testing Results for Kata 3
+
+Current Test Coverage:
+1. Basic combat between Zergling and Marine
+2. Basic combat between Zergling and Zealot
+3. Zergling's run mechanic (must run at a unit before attacking)
+
+Potential Issues and Gaps:
+1. Marine's alive() method always returns true - potential bug
+2. Zealot's alive() method also always returns true - potential bug
+3. No tests for multiple units in Zergling's closeUnits array
+4. No tests for edge cases in damage calculation
+5. No tests for Marine vs Zealot combat
+6. Missing validation for negative damage values
+
+Suggested Additional Test Coverage:
+- Unit death conditions for Marine and Zealot
+- Multiple unit engagement scenarios
+- Combat order effects
+- Damage validation
diff --git a/test/bugs_found_folder_1/bugs_kata_4.md b/test/bugs_found_folder_1/bugs_kata_4.md
new file mode 100644
index 0000000..7acc7f1
--- /dev/null
+++ b/test/bugs_found_folder_1/bugs_kata_4.md
@@ -0,0 +1,15 @@
+﻿## Mutation Testing Results for Kata 4
+
+Note: This kata appears to be identical to Kata 1, implementing the same Hello World generator functionality.
+
+Current Test Coverage:
+- Basic Hello World string generation
+- Generator sequence validation
+- Completion state check
+
+All tests appear to be effective at catching mutations, with thorough coverage of:
+- String literal mutations
+- Block statement mutations
+- Generator functionality
+
+No additional tests needed as the current test suite provides complete coverage for this simple implementation.
diff --git a/test/bugs_found_folder_1/bugs_kata_5.md b/test/bugs_found_folder_1/bugs_kata_5.md
new file mode 100644
index 0000000..e5a32ea
--- /dev/null
+++ b/test/bugs_found_folder_1/bugs_kata_5.md
@@ -0,0 +1,17 @@
+﻿## Mutation Testing Results for Kata 5
+
+Note: This kata is identical to Kata 2, implementing the same pricing calculator functionality.
+
+Current Test Coverage:
+- State tax calculations for all states (UT, NV, TX, AL, CA)
+- Volume discount thresholds
+- Zero item case
+
+Potential Areas for Additional Testing:
+1. Edge cases at discount boundaries
+2. Invalid state codes
+3. Negative numbers for quantity or price
+4. Non-numeric inputs
+5. String parsing validation
+
+The implementation and test coverage mirror Kata 2, with the same potential areas for improvement.
diff --git a/test/bugs_found_folder_1/bugs_kata_6.md b/test/bugs_found_folder_1/bugs_kata_6.md
new file mode 100644
index 0000000..c66b33a
--- /dev/null
+++ b/test/bugs_found_folder_1/bugs_kata_6.md
@@ -0,0 +1,16 @@
+﻿## Mutation Testing Results for Kata 6
+
+Note: This kata is identical to Kata 3, implementing the same StarCraft-inspired combat system.
+
+Current Implementation Issues:
+1. Marine's alive() method always returns true regardless of hitpoints
+2. Zealot's alive() method always returns true regardless of hitpoints
+3. No validation for damage values
+
+Test Coverage Gaps:
+1. No tests for Marine/Zealot death conditions
+2. Missing tests for multi-unit combat
+3. No validation for negative damage
+4. No tests for Marine vs Zealot interactions
+
+The implementation shares the same bugs and test coverage gaps as Kata 3.
diff --git a/test/bugs_found_folder_1/bugs_kata_7.md b/test/bugs_found_folder_1/bugs_kata_7.md
new file mode 100644
index 0000000..5118fa4
--- /dev/null
+++ b/test/bugs_found_folder_1/bugs_kata_7.md
@@ -0,0 +1,10 @@
+﻿## Mutation Testing Results for Kata 7
+
+Note: This kata is identical to Kata 1 and Kata 4, implementing the same Hello World generator functionality.
+
+Current Test Coverage:
+- Basic Hello World string generation
+- Generator sequence testing
+- Completion state verification
+
+The implementation is well-tested with full mutation coverage, similar to Katas 1 and 4.
diff --git a/test/bugs_found_folder_1/bugs_kata_8.md b/test/bugs_found_folder_1/bugs_kata_8.md
new file mode 100644
index 0000000..d44a1df
--- /dev/null
+++ b/test/bugs_found_folder_1/bugs_kata_8.md
@@ -0,0 +1,15 @@
+﻿## Mutation Testing Results for Kata 8
+
+Note: This kata is identical to Katas 2 and 5, implementing the same pricing calculator functionality.
+
+Current Implementation Coverage:
+1. Volume discount tiers (1000-50000)
+2. State tax calculations (UT, NV, TX, AL, CA)
+3. Basic price calculation
+
+Areas Needing Additional Coverage:
+1. Input validation for commands array
+2. Edge cases at discount boundaries
+3. Invalid state codes
+4. Negative numbers
+5. Non-numeric inputs
diff --git a/test/bugs_found_folder_1/bugs_kata_9.md b/test/bugs_found_folder_1/bugs_kata_9.md
new file mode 100644
index 0000000..1cd09f9
--- /dev/null
+++ b/test/bugs_found_folder_1/bugs_kata_9.md
@@ -0,0 +1,14 @@
+﻿## Mutation Testing Results for Kata 9
+
+Note: This kata is identical to Katas 3 and 6, implementing the same StarCraft combat system.
+
+Implementation Issues:
+1. Marine and Zealot alive() methods incorrectly always return true
+2. No health validation in hurt() methods
+3. Potential issue with closeUnits management in Zergling
+
+Suggested Test Coverage:
+1. Unit death conditions
+2. Damage validation
+3. Multi-unit combat scenarios
+4. Unit proximity mechanics
diff --git a/test/bugs_found_folder_1/test_cases_1.ts b/test/bugs_found_folder_1/test_cases_1.ts
new file mode 100644
index 0000000..06600fb
--- /dev/null
+++ b/test/bugs_found_folder_1/test_cases_1.ts
@@ -0,0 +1,7 @@
+﻿describe('hello world kata', function () {
+    it('should return hello world');
+    it('should use a generator function that returns hello');
+    it('should use a generator function that returns world on second call');
+    it('should use a generator function that returns done after three calls');
+});
+
diff --git a/test/bugs_found_folder_1/test_cases_10.ts b/test/bugs_found_folder_1/test_cases_10.ts
new file mode 100644
index 0000000..20f4665
--- /dev/null
+++ b/test/bugs_found_folder_1/test_cases_10.ts
@@ -0,0 +1,15 @@
+﻿describe('hello world kata four', function () {
+    // Base functionality
+    it('should return hello world');
+
+    // Generator sequence tests
+    it('should use a generator function that returns hello');
+    it('should use a generator function that returns world on second call');
+    it('should use a generator function that returns done after three calls');
+
+    // Additional edge cases
+    describe('Generator Edge Cases', () => {
+        it('should handle multiple iterator instances');
+        it('should maintain correct sequence across multiple calls');
+    });
+});
diff --git a/test/bugs_found_folder_1/test_cases_11.ts b/test/bugs_found_folder_1/test_cases_11.ts
new file mode 100644
index 0000000..2dbb0fe
--- /dev/null
+++ b/test/bugs_found_folder_1/test_cases_11.ts
@@ -0,0 +1,31 @@
+﻿describe('kata two four', function () {
+    // Basic functionality
+    it('given 0 items can accept an input of how many items, cost per item, state code, and calculate total value');
+
+    // State tax tests
+    describe('State Taxes', () => {
+        it('should calculate NV state tax correctly');
+        it('should calculate UT state tax correctly');
+        it('should calculate TX state tax correctly');
+        it('should calculate AL state tax correctly');
+        it('should calculate CA state tax correctly');
+    });
+
+    // Volume discount tests
+    describe('Volume Discounts', () => {
+        it('should apply correct discount for 1000 items');
+        it('should apply correct discount for 5000 items');
+        it('should apply correct discount for 7000 items');
+        it('should apply correct discount for 10000 items');
+        it('should apply correct discount for 50000 items');
+    });
+
+    // Edge cases and validation
+    describe('Edge Cases', () => {
+        it('should handle missing command parameters');
+        it('should validate state codes');
+        it('should handle boundary cases between discount tiers');
+        it('should handle negative quantities');
+        it('should handle non-numeric inputs');
+    });
+});
diff --git a/test/bugs_found_folder_1/test_cases_12.ts b/test/bugs_found_folder_1/test_cases_12.ts
new file mode 100644
index 0000000..2282ea4
--- /dev/null
+++ b/test/bugs_found_folder_1/test_cases_12.ts
@@ -0,0 +1,36 @@
+﻿describe('can do battle four', () => {
+    // Base combat scenarios
+    it('the vile zerg zergling will battle the epic terran marine');
+    it('the vile zerg zergling will battle the epic protos zealot');
+    it('the vile zerg zergling cannot hit a unit it has not run at');
+
+    // Unit-specific tests
+    describe('Marine Tests', () => {
+        it('should track health correctly');
+        it('should die when health is depleted');
+        it('should validate incoming damage');
+        it('should maintain attack capability until death');
+    });
+
+    describe('Zealot Tests', () => {
+        it('should track health accurately');
+        it('should die when health reaches zero');
+        it('should process damage correctly');
+        it('should maintain combat status based on health');
+    });
+
+    describe('Zergling Tests', () => {
+        it('should manage target list efficiently');
+        it('should clear invalid targets');
+        it('should validate close combat range');
+        it('should handle multiple targets correctly');
+    });
+
+    // System-wide tests
+    describe('Combat System', () => {
+        it('should process multi-unit combat correctly');
+        it('should maintain proper combat order');
+        it('should handle simultaneous attacks');
+        it('should clean up after unit death');
+    });
+});
diff --git a/test/bugs_found_folder_1/test_cases_13.ts b/test/bugs_found_folder_1/test_cases_13.ts
new file mode 100644
index 0000000..fa6f5c7
--- /dev/null
+++ b/test/bugs_found_folder_1/test_cases_13.ts
@@ -0,0 +1,15 @@
+﻿describe('hello world kata five', function () {
+    // Base functionality
+    it('should return hello world');
+
+    // Generator sequence tests
+    it('should use a generator function that returns hello');
+    it('should use a generator function that returns world on second call');
+    it('should use a generator function that returns done after three calls');
+
+    // Additional edge cases
+    describe('Generator Behavior', () => {
+        it('should handle multiple iterator instances correctly');
+        it('should maintain sequence integrity');
+    });
+});
diff --git a/test/bugs_found_folder_1/test_cases_14.ts b/test/bugs_found_folder_1/test_cases_14.ts
new file mode 100644
index 0000000..6e0c52e
--- /dev/null
+++ b/test/bugs_found_folder_1/test_cases_14.ts
@@ -0,0 +1,31 @@
+﻿describe('kata two five', function () {
+    // Basic functionality
+    it('given 0 items can accept an input of how many items, cost per item, state code, and calculate total value');
+
+    // State tax calculations
+    describe('State Tax Calculations', () => {
+        it('should calculate tax for NV (8.00%)');
+        it('should calculate tax for UT (6.85%)');
+        it('should calculate tax for TX (6.25%)');
+        it('should calculate tax for AL (4.00%)');
+        it('should calculate tax for CA (8.25%)');
+    });
+
+    // Volume discount tests
+    describe('Volume Discount Tests', () => {
+        it('should apply 3% discount at exactly 1000 items');
+        it('should apply 5% discount at exactly 5000 items');
+        it('should apply 7% discount at exactly 7000 items');
+        it('should apply 10% discount at exactly 10000 items');
+        it('should apply 15% discount at exactly 50000 items');
+    });
+
+    // Input validation and edge cases
+    describe('Input Validation', () => {
+        it('should handle missing or null command parameters');
+        it('should reject invalid state codes');
+        it('should handle non-numeric quantity inputs');
+        it('should handle non-numeric price inputs');
+        it('should validate discount tier transitions');
+    });
+});
diff --git a/test/bugs_found_folder_1/test_cases_15.ts b/test/bugs_found_folder_1/test_cases_15.ts
new file mode 100644
index 0000000..d836a3d
--- /dev/null
+++ b/test/bugs_found_folder_1/test_cases_15.ts
@@ -0,0 +1,28 @@
+﻿describe('can do battle five', () => {
+    // Base combat scenarios
+    it('the vile zerg zergling will battle the epic terran marine');
+    it('the vile zerg zergling will battle the epic protos zealot');
+    it('the vile zerg zergling cannot hit a unit it has not run at');
+
+    // Unit health and combat
+    describe('Health System', () => {
+        it('should track Marine health correctly until death');
+        it('should track Zealot health correctly until death');
+        it('should validate all damage values');
+    });
+
+    // Unit-specific mechanics
+    describe('Combat Mechanics', () => {
+        it('should properly manage Zergling target list');
+        it('should handle multi-unit targeting');
+        it('should validate attack ranges');
+    });
+
+    // Combat system tests
+    describe('Battle System', () => {
+        it('should maintain correct combat order');
+        it('should handle unit death events');
+        it('should manage concurrent attacks');
+        it('should clean up dead unit references');
+    });
+});
diff --git a/test/bugs_found_folder_1/test_cases_16.ts b/test/bugs_found_folder_1/test_cases_16.ts
new file mode 100644
index 0000000..97303b6
--- /dev/null
+++ b/test/bugs_found_folder_1/test_cases_16.ts
@@ -0,0 +1,16 @@
+﻿describe('hello world kata six', function () {
+    // Base functionality
+    it('should return hello world');
+
+    // Generator sequence tests
+    it('should use a generator function that returns hello');
+    it('should use a generator function that returns world on second call');
+    it('should use a generator function that returns done after three calls');
+
+    // Advanced generator testing
+    describe('Generator Robustness', () => {
+        it('should handle concurrent iterator instances');
+        it('should maintain sequence integrity across calls');
+        it('should properly clean up completed iterators');
+    });
+});
diff --git a/test/bugs_found_folder_1/test_cases_17.ts b/test/bugs_found_folder_1/test_cases_17.ts
new file mode 100644
index 0000000..2f1a924
--- /dev/null
+++ b/test/bugs_found_folder_1/test_cases_17.ts
@@ -0,0 +1,31 @@
+﻿describe('kata two six', function () {
+    // Basic functionality
+    it('given 0 items can accept an input of how many items, cost per item, state code, and calculate total value');
+
+    // State tax calculations
+    describe('State Taxes', () => {
+        it('should calculate tax for UT state at 6.85%');
+        it('should calculate tax for NV state at 8.00%');
+        it('should calculate tax for TX state at 6.25%');
+        it('should calculate tax for AL state at 4.00%');
+        it('should calculate tax for CA state at 8.25%');
+    });
+
+    // Volume discount tests
+    describe('Volume Discounts', () => {
+        it('should apply correct discount at 1000 volume threshold');
+        it('should apply correct discount at 5000 volume threshold');
+        it('should apply correct discount at 7000 volume threshold');
+        it('should apply correct discount at 10000 volume threshold');
+        it('should apply correct discount at 50000 volume threshold');
+    });
+
+    // Edge cases and validation
+    describe('Input Validation', () => {
+        it('should validate all command array parameters');
+        it('should handle invalid state codes gracefully');
+        it('should validate numeric inputs');
+        it('should handle edge cases at discount boundaries');
+        it('should maintain precision in calculations');
+    });
+});
diff --git a/test/bugs_found_folder_1/test_cases_18.ts b/test/bugs_found_folder_1/test_cases_18.ts
new file mode 100644
index 0000000..fba4c38
--- /dev/null
+++ b/test/bugs_found_folder_1/test_cases_18.ts
@@ -0,0 +1,29 @@
+﻿describe('can do battle six', () => {
+    // Base combat scenarios
+    it('the vile zerg zergling will battle the epic terran marine');
+    it('the vile zerg zergling will battle the epic protos zealot');
+    it('the vile zerg zergling cannot hit a unit it has not run at');
+
+    // Unit health system
+    describe('Unit Health', () => {
+        it('should properly track Marine health and death state');
+        it('should properly track Zealot health and death state');
+        it('should validate all incoming damage values');
+        it('should prevent negative health values');
+    });
+
+    // Combat mechanics
+    describe('Combat System', () => {
+        it('should enforce proper combat range restrictions');
+        it('should maintain target list integrity');
+        it('should handle multiple simultaneous engagements');
+        it('should cleanup references after unit death');
+    });
+
+    // Memory management
+    describe('Resource Management', () => {
+        it('should prevent memory leaks in target tracking');
+        it('should clear invalid targets from lists');
+        it('should handle large-scale combat scenarios');
+    });
+});
diff --git a/test/bugs_found_folder_1/test_cases_2.ts b/test/bugs_found_folder_1/test_cases_2.ts
new file mode 100644
index 0000000..71fba6b
--- /dev/null
+++ b/test/bugs_found_folder_1/test_cases_2.ts
@@ -0,0 +1,24 @@
+﻿describe('kata two', function () {
+    it('given 0 items can accept an input of how many items, cost per item, state code, and calculate total value');
+
+    // State tax calculation tests
+    it('given 1 item and a NV state code can accept an input of how many items, cost per item, state code, and calculate total value');
+    it('given 1 item and a UT state code can accept an input of how many items, cost per item, state code, and calculate total value');
+    it('given 1 item and a TX state code can accept an input of how many items, cost per item, state code, and calculate total value');
+    it('given 1 item and a AL state code can accept an input of how many items, cost per item, state code, and calculate total value');
+    it('given 1 item and a CA state code can accept an input of how many items, cost per item, state code, and calculate total value');
+
+    // Volume discount tests
+    it('given 1000 of items can accept an input of how many items, cost per item, state code, and calculate total value');
+    it('given 5000 of items can accept an input of how many items, cost per item, state code, and calculate total value');
+    it('given 7000 of items can accept an input of how many items, cost per item, state code, and calculate total value');
+    it('given 10000 of items can accept an input of how many items, cost per item, state code, and calculate total value');
+    it('given 50000 of items can accept an input of how many items, cost per item, state code, and calculate total value');
+
+    // Suggested new test cases for uncovered scenarios
+    it('should handle invalid state codes');
+    it('should handle negative quantities');
+    it('should handle negative prices');
+    it('should handle non-numeric inputs');
+    it('should handle edge cases at discount boundaries');
+});
diff --git a/test/bugs_found_folder_1/test_cases_3.ts b/test/bugs_found_folder_1/test_cases_3.ts
new file mode 100644
index 0000000..ecd6204
--- /dev/null
+++ b/test/bugs_found_folder_1/test_cases_3.ts
@@ -0,0 +1,31 @@
+﻿describe('can do battle', () => {
+    // Existing test cases
+    it('the vile zerg zergling will battle the epic terran marine');
+    it('the vile zerg zergling will battle the epic protos zealot');
+    it('the vile zerg zergling cannot hit a unit it has not run at');
+
+    // New suggested test cases
+    describe('Marine Tests', () => {
+        it('should die when taking more than 2 damage');
+        it('should track health correctly');
+        it('should not be able to shoot with negative damage');
+    });
+
+    describe('Zealot Tests', () => {
+        it('should die when taking more than 2 damage');
+        it('should track health correctly');
+        it('should handle combat with Marines');
+    });
+
+    describe('Zergling Tests', () => {
+        it('should be able to run at multiple units');
+        it('should track all close units correctly');
+        it('should maintain close units list when units die');
+    });
+
+    describe('Combat System', () => {
+        it('should handle multi-unit combat scenarios');
+        it('should process damage in correct order');
+        it('should validate damage values');
+    });
+});
diff --git a/test/bugs_found_folder_1/test_cases_4.ts b/test/bugs_found_folder_1/test_cases_4.ts
new file mode 100644
index 0000000..39a675d
--- /dev/null
+++ b/test/bugs_found_folder_1/test_cases_4.ts
@@ -0,0 +1,10 @@
+﻿describe('hello world kata two', function () {
+    // Base functionality
+    it('should return hello world');
+
+    // Generator sequence tests
+    it('should use a generator function that returns hello');
+    it('should use a generator function that returns world on second call');
+    it('should use a generator function that returns done after three calls');
+});
+
diff --git a/test/bugs_found_folder_1/test_cases_5.ts b/test/bugs_found_folder_1/test_cases_5.ts
new file mode 100644
index 0000000..97a0f71
--- /dev/null
+++ b/test/bugs_found_folder_1/test_cases_5.ts
@@ -0,0 +1,31 @@
+﻿describe('kata two two', function () {
+    // Basic functionality
+    it('given 0 items can accept an input of how many items, cost per item, state code, and calculate total value');
+
+    // State tax tests
+    describe('State Tax Calculations', () => {
+        it('given 1 item and a NV state code can accept an input and calculate total value');
+        it('given 1 item and a UT state code can accept an input and calculate total value');
+        it('given 1 item and a TX state code can accept an input and calculate total value');
+        it('given 1 item and a AL state code can accept an input and calculate total value');
+        it('given 1 item and a CA state code can accept an input and calculate total value');
+    });
+
+    // Volume discount tests
+    describe('Volume Discounts', () => {
+        it('given 1000 items should apply 3% discount');
+        it('given 5000 items should apply 5% discount');
+        it('given 7000 items should apply 7% discount');
+        it('given 10000 items should apply 10% discount');
+        it('given 50000 items should apply 15% discount');
+    });
+
+    // Suggested additional tests
+    describe('Edge Cases', () => {
+        it('should handle invalid state codes');
+        it('should handle negative quantities');
+        it('should handle negative prices');
+        it('should validate numeric inputs');
+        it('should handle discount boundary conditions');
+    });
+});
diff --git a/test/bugs_found_folder_1/test_cases_6.ts b/test/bugs_found_folder_1/test_cases_6.ts
new file mode 100644
index 0000000..84db1b3
--- /dev/null
+++ b/test/bugs_found_folder_1/test_cases_6.ts
@@ -0,0 +1,28 @@
+﻿describe('can do battle two', () => {
+    // Existing test cases
+    it('the vile zerg zergling will battle the epic terran marine');
+    it('the vile zerg zergling will battle the epic protos zealot');
+    it('the vile zerg zergling cannot hit a unit it has not run at');
+
+    // Marine specific tests
+    describe('Marine Combat', () => {
+        it('should die when hitpoints reach zero');
+        it('should track damage correctly');
+        it('should not accept negative damage');
+        it('should handle combat with Zealot');
+    });
+
+    // Zealot specific tests
+    describe('Zealot Combat', () => {
+        it('should die when hitpoints reach zero');
+        it('should track damage correctly');
+        it('should validate damage values');
+    });
+
+    // Multi-unit scenarios
+    describe('Complex Combat Scenarios', () => {
+        it('should handle multiple units in combat');
+        it('should process combat order correctly');
+        it('should maintain unit states properly');
+    });
+});
diff --git a/test/bugs_found_folder_1/test_cases_7.ts b/test/bugs_found_folder_1/test_cases_7.ts
new file mode 100644
index 0000000..ab23efe
--- /dev/null
+++ b/test/bugs_found_folder_1/test_cases_7.ts
@@ -0,0 +1,10 @@
+﻿describe('hello world kata three', function () {
+    // Base functionality
+    it('should return hello world');
+
+    // Generator sequence tests
+    it('should use a generator function that returns hello');
+    it('should use a generator function that returns world on second call');
+    it('should use a generator function that returns done after three calls');
+});
+
diff --git a/test/bugs_found_folder_1/test_cases_8.ts b/test/bugs_found_folder_1/test_cases_8.ts
new file mode 100644
index 0000000..0bf7ec8
--- /dev/null
+++ b/test/bugs_found_folder_1/test_cases_8.ts
@@ -0,0 +1,31 @@
+﻿describe('kata two three', function () {
+    // Basic functionality
+    it('given 0 items can accept an input of how many items, cost per item, state code, and calculate total value');
+
+    // State tax calculations
+    describe('State Tax Tests', () => {
+        it('should calculate tax for NV state');
+        it('should calculate tax for UT state');
+        it('should calculate tax for TX state');
+        it('should calculate tax for AL state');
+        it('should calculate tax for CA state');
+    });
+
+    // Volume discount tests
+    describe('Volume Discount Tests', () => {
+        it('should apply 3% discount at 1000 items');
+        it('should apply 5% discount at 5000 items');
+        it('should apply 7% discount at 7000 items');
+        it('should apply 10% discount at 10000 items');
+        it('should apply 15% discount at 50000 items');
+    });
+
+    // Input validation
+    describe('Input Validation', () => {
+        it('should handle missing command parameters');
+        it('should handle invalid state codes');
+        it('should validate numeric inputs');
+        it('should handle negative quantities');
+        it('should handle negative prices');
+    });
+});
diff --git a/test/bugs_found_folder_1/test_cases_9.ts b/test/bugs_found_folder_1/test_cases_9.ts
new file mode 100644
index 0000000..908df70
--- /dev/null
+++ b/test/bugs_found_folder_1/test_cases_9.ts
@@ -0,0 +1,33 @@
+﻿describe('can do battle three', () => {
+    // Base combat tests
+    it('the vile zerg zergling will battle the epic terran marine');
+    it('the vile zerg zergling will battle the epic protos zealot');
+    it('the vile zerg zergling cannot hit a unit it has not run at');
+
+    // Unit-specific tests
+    describe('Marine Unit Tests', () => {
+        it('should die when health reaches zero');
+        it('should properly track damage taken');
+        it('should handle combat with multiple units');
+    });
+
+    describe('Zealot Unit Tests', () => {
+        it('should die when health reaches zero');
+        it('should properly track damage taken');
+        it('should validate attack damage');
+    });
+
+    describe('Zergling Unit Tests', () => {
+        it('should manage close units list properly');
+        it('should only attack units in close range');
+        it('should handle multiple targets in range');
+    });
+
+    // Combat system tests
+    describe('Combat System', () => {
+        it('should process attacks in correct order');
+        it('should handle simultaneous attacks');
+        it('should remove dead units from combat');
+        it('should validate damage values');
+    });
+});
diff --git a/test/test_kata_1.spec.ts b/test/folder_1/test_kata_1.spec.ts
similarity index 92%
rename from test/test_kata_1.spec.ts
rename to test/folder_1/test_kata_1.spec.ts
index 8638bed..22b6a22 100644
--- a/test/test_kata_1.spec.ts
+++ b/test/folder_1/test_kata_1.spec.ts
@@ -1,5 +1,5 @@
 ﻿import assert from "node:assert";
-import HelloWorld, {helloWorldGenerator} from '../src/1_kata.js';
+import HelloWorld, {helloWorldGenerator} from '../../src/folder_1/1_kata.js';
 
 describe('hello world kata', function () {
     it('should return hello world', function () {
diff --git a/test/folder_1/test_kata_10.spec.ts b/test/folder_1/test_kata_10.spec.ts
new file mode 100644
index 0000000..f24c4ae
--- /dev/null
+++ b/test/folder_1/test_kata_10.spec.ts
@@ -0,0 +1,29 @@
+﻿import assert from "node:assert";
+import HelloWorld, {helloWorldGenerator} from '../../src/folder_1/10_kata.js';
+
+describe('hello world kata four', function () {
+    it('should return hello world', function () {
+        assert.equal(HelloWorld(), "Hello World");
+    });
+    it('should use a generator function that returns hello', () => {
+        let firstCall = helloWorldGenerator().next();
+        assert.equal(firstCall.value, 'Hello')
+        assert.equal(firstCall.done, false)
+    });
+    it('should use a generator function that returns world on second call', () => {
+        let sequence = helloWorldGenerator();
+        sequence.next()
+
+        let secondCall = sequence.next();
+        assert.equal(secondCall.value, 'World')
+        assert.equal(secondCall.done, false)
+    });
+    it('should use a generator function that returns done after three calls', () => {
+        let sequence = helloWorldGenerator();
+        const firstCall = sequence.next();
+        const secondCall = sequence.next();
+        const thirdCall = sequence.next();
+
+        assert.equal(thirdCall.done, true)
+    });
+});
\ No newline at end of file
diff --git a/test/folder_1/test_kata_11.spec.ts b/test/folder_1/test_kata_11.spec.ts
new file mode 100644
index 0000000..313de78
--- /dev/null
+++ b/test/folder_1/test_kata_11.spec.ts
@@ -0,0 +1,56 @@
+﻿
+import {assert} from 'chai';
+import {input} from "../../src/folder_1/11_kata.js";
+
+describe('kata two four', function () {
+    it('given 0 items can accept an input of how many items, cost per item, state code, and calculate total value',
+        function () {
+        const commands = [
+            "0",
+            "5",
+            "NV"
+        ]
+
+        const totalCost = input(commands);
+
+        assert.equal(totalCost, 0)
+    });
+    [
+        { state: "NV", multiplier: 1.08 },
+        { state: "UT", multiplier: 1.0685 },
+        { state: "TX", multiplier: 1.0625 },
+        { state: "AL", multiplier: 1.0400 },
+        { state: "CA", multiplier: 1.0825 },
+    ].forEach(({ state, multiplier }) =>
+        it(`given 1 item and a ${state} state code can accept an input of how many items, cost per item, state code, ` +
+        'and calculate total value', function () {
+        const commands = [
+            "1",
+            "5",
+            state
+        ]
+
+        const totalCost = input(commands);
+
+        assert.equal(totalCost, 5 * multiplier)
+    }));
+    [
+        { amount: "1000", discount: 0.03 },
+        { amount: "5000", discount: 0.05 },
+        { amount: "7000", discount: 0.07 },
+        { amount: "10000", discount: 0.10 },
+        { amount: "50000", discount: 0.15 },
+    ].forEach(({ amount, discount}) =>
+        it(`given ${amount} of items can accept an input of how many items, cost per item, state code, and calculate total value`,
+            function () {
+        const commands = [
+            "1",
+            amount,
+            "NV"
+        ]
+
+        const totalCost = input(commands);
+
+        assert.equal(totalCost, +amount * (1 - discount) * (1.08))
+    }));
+});
\ No newline at end of file
diff --git a/test/folder_1/test_kata_12.spec.ts b/test/folder_1/test_kata_12.spec.ts
new file mode 100644
index 0000000..2030726
--- /dev/null
+++ b/test/folder_1/test_kata_12.spec.ts
@@ -0,0 +1,36 @@
+﻿import {assert} from "chai";
+import { Zergling, Marine, Zealot } from '../../src/folder_1/12_kata.js';
+
+describe('can do battle four', () => {
+    it('the vile zerg zergling will battle the epic terran marine', () => {
+        const marine = new Marine();
+        const zergling = new Zergling();
+        zergling.run(marine);
+        marine.shoot(zergling);
+        zergling.attack(marine);
+
+        marine.shoot(zergling);
+
+        assert.equal(marine.alive(), true)
+        assert.equal(zergling.alive(), false)
+    })
+    it('the vile zerg zergling will battle the epic protos zealot', () => {
+        const zealot = new Zealot();
+        const zergling = new Zergling();
+        zergling.run(zealot);
+        zealot.claw(zergling);
+
+        zergling.attack(zealot);
+        zealot.claw(zergling);
+
+        assert.equal(zealot.alive(), true)
+    })
+    it('the vile zerg zergling cannot hit a unit it has not run at', () => {
+        const zealot = new Zealot();
+        const zergling = new Zergling();
+
+        zergling.attack(zealot);
+
+        assert.equal(zealot.hitpointBar(), "full")
+    })
+})
\ No newline at end of file
diff --git a/test/folder_1/test_kata_13.spec.ts b/test/folder_1/test_kata_13.spec.ts
new file mode 100644
index 0000000..b328962
--- /dev/null
+++ b/test/folder_1/test_kata_13.spec.ts
@@ -0,0 +1,29 @@
+﻿import assert from "node:assert";
+import HelloWorld, {helloWorldGenerator} from '../../src/folder_1/13_kata.js';
+
+describe('hello world kata five', function () {
+    it('should return hello world', function () {
+        assert.equal(HelloWorld(), "Hello World");
+    });
+    it('should use a generator function that returns hello', () => {
+        let firstCall = helloWorldGenerator().next();
+        assert.equal(firstCall.value, 'Hello')
+        assert.equal(firstCall.done, false)
+    });
+    it('should use a generator function that returns world on second call', () => {
+        let sequence = helloWorldGenerator();
+        sequence.next()
+
+        let secondCall = sequence.next();
+        assert.equal(secondCall.value, 'World')
+        assert.equal(secondCall.done, false)
+    });
+    it('should use a generator function that returns done after three calls', () => {
+        let sequence = helloWorldGenerator();
+        const firstCall = sequence.next();
+        const secondCall = sequence.next();
+        const thirdCall = sequence.next();
+
+        assert.equal(thirdCall.done, true)
+    });
+});
\ No newline at end of file
diff --git a/test/folder_1/test_kata_14.spec.ts b/test/folder_1/test_kata_14.spec.ts
new file mode 100644
index 0000000..8dd759a
--- /dev/null
+++ b/test/folder_1/test_kata_14.spec.ts
@@ -0,0 +1,56 @@
+﻿
+import {assert} from 'chai';
+import {input} from "../../src/folder_1/14_kata.js";
+
+describe('kata two five', function () {
+    it('given 0 items can accept an input of how many items, cost per item, state code, and calculate total value',
+        function () {
+        const commands = [
+            "0",
+            "5",
+            "NV"
+        ]
+
+        const totalCost = input(commands);
+
+        assert.equal(totalCost, 0)
+    });
+    [
+        { state: "NV", multiplier: 1.08 },
+        { state: "UT", multiplier: 1.0685 },
+        { state: "TX", multiplier: 1.0625 },
+        { state: "AL", multiplier: 1.0400 },
+        { state: "CA", multiplier: 1.0825 },
+    ].forEach(({ state, multiplier }) =>
+        it(`given 1 item and a ${state} state code can accept an input of how many items, cost per item, state code, ` +
+        'and calculate total value', function () {
+        const commands = [
+            "1",
+            "5",
+            state
+        ]
+
+        const totalCost = input(commands);
+
+        assert.equal(totalCost, 5 * multiplier)
+    }));
+    [
+        { amount: "1000", discount: 0.03 },
+        { amount: "5000", discount: 0.05 },
+        { amount: "7000", discount: 0.07 },
+        { amount: "10000", discount: 0.10 },
+        { amount: "50000", discount: 0.15 },
+    ].forEach(({ amount, discount}) =>
+        it(`given ${amount} of items can accept an input of how many items, cost per item, state code, and calculate total value`,
+            function () {
+        const commands = [
+            "1",
+            amount,
+            "NV"
+        ]
+
+        const totalCost = input(commands);
+
+        assert.equal(totalCost, +amount * (1 - discount) * (1.08))
+    }));
+});
\ No newline at end of file
diff --git a/test/folder_1/test_kata_15.spec.ts b/test/folder_1/test_kata_15.spec.ts
new file mode 100644
index 0000000..2a7fadd
--- /dev/null
+++ b/test/folder_1/test_kata_15.spec.ts
@@ -0,0 +1,36 @@
+﻿import {assert} from "chai";
+import { Zergling, Marine, Zealot } from '../../src/folder_1/15_kata.js';
+
+describe('can do battle five', () => {
+    it('the vile zerg zergling will battle the epic terran marine', () => {
+        const marine = new Marine();
+        const zergling = new Zergling();
+        zergling.run(marine);
+        marine.shoot(zergling);
+        zergling.attack(marine);
+
+        marine.shoot(zergling);
+
+        assert.equal(marine.alive(), true)
+        assert.equal(zergling.alive(), false)
+    })
+    it('the vile zerg zergling will battle the epic protos zealot', () => {
+        const zealot = new Zealot();
+        const zergling = new Zergling();
+        zergling.run(zealot);
+        zealot.claw(zergling);
+
+        zergling.attack(zealot);
+        zealot.claw(zergling);
+
+        assert.equal(zealot.alive(), true)
+    })
+    it('the vile zerg zergling cannot hit a unit it has not run at', () => {
+        const zealot = new Zealot();
+        const zergling = new Zergling();
+
+        zergling.attack(zealot);
+
+        assert.equal(zealot.hitpointBar(), "full")
+    })
+})
\ No newline at end of file
diff --git a/test/folder_1/test_kata_16.spec.ts b/test/folder_1/test_kata_16.spec.ts
new file mode 100644
index 0000000..93026b6
--- /dev/null
+++ b/test/folder_1/test_kata_16.spec.ts
@@ -0,0 +1,29 @@
+﻿import assert from "node:assert";
+import HelloWorld, {helloWorldGenerator} from '../../src/folder_1/16_kata.js';
+
+describe('hello world kata six', function () {
+    it('should return hello world', function () {
+        assert.equal(HelloWorld(), "Hello World");
+    });
+    it('should use a generator function that returns hello', () => {
+        let firstCall = helloWorldGenerator().next();
+        assert.equal(firstCall.value, 'Hello')
+        assert.equal(firstCall.done, false)
+    });
+    it('should use a generator function that returns world on second call', () => {
+        let sequence = helloWorldGenerator();
+        sequence.next()
+
+        let secondCall = sequence.next();
+        assert.equal(secondCall.value, 'World')
+        assert.equal(secondCall.done, false)
+    });
+    it('should use a generator function that returns done after three calls', () => {
+        let sequence = helloWorldGenerator();
+        const firstCall = sequence.next();
+        const secondCall = sequence.next();
+        const thirdCall = sequence.next();
+
+        assert.equal(thirdCall.done, true)
+    });
+});
\ No newline at end of file
diff --git a/test/folder_1/test_kata_17.spec.ts b/test/folder_1/test_kata_17.spec.ts
new file mode 100644
index 0000000..87c3c2a
--- /dev/null
+++ b/test/folder_1/test_kata_17.spec.ts
@@ -0,0 +1,56 @@
+﻿
+import {assert} from 'chai';
+import {input} from "../../src/folder_1/17_kata.js";
+
+describe('kata two six', function () {
+    it('given 0 items can accept an input of how many items, cost per item, state code, and calculate total value',
+        function () {
+        const commands = [
+            "0",
+            "5",
+            "NV"
+        ]
+
+        const totalCost = input(commands);
+
+        assert.equal(totalCost, 0)
+    });
+    [
+        { state: "NV", multiplier: 1.08 },
+        { state: "UT", multiplier: 1.0685 },
+        { state: "TX", multiplier: 1.0625 },
+        { state: "AL", multiplier: 1.0400 },
+        { state: "CA", multiplier: 1.0825 },
+    ].forEach(({ state, multiplier }) =>
+        it(`given 1 item and a ${state} state code can accept an input of how many items, cost per item, state code, ` +
+        'and calculate total value', function () {
+        const commands = [
+            "1",
+            "5",
+            state
+        ]
+
+        const totalCost = input(commands);
+
+        assert.equal(totalCost, 5 * multiplier)
+    }));
+    [
+        { amount: "1000", discount: 0.03 },
+        { amount: "5000", discount: 0.05 },
+        { amount: "7000", discount: 0.07 },
+        { amount: "10000", discount: 0.10 },
+        { amount: "50000", discount: 0.15 },
+    ].forEach(({ amount, discount}) =>
+        it(`given ${amount} of items can accept an input of how many items, cost per item, state code, and calculate total value`,
+            function () {
+        const commands = [
+            "1",
+            amount,
+            "NV"
+        ]
+
+        const totalCost = input(commands);
+
+        assert.equal(totalCost, +amount * (1 - discount) * (1.08))
+    }));
+});
\ No newline at end of file
diff --git a/test/folder_1/test_kata_18.spec.ts b/test/folder_1/test_kata_18.spec.ts
new file mode 100644
index 0000000..ffe8dbe
--- /dev/null
+++ b/test/folder_1/test_kata_18.spec.ts
@@ -0,0 +1,36 @@
+﻿import {assert} from "chai";
+import { Zergling, Marine, Zealot } from '../../src/folder_1/18_kata.js';
+
+describe('can do battle six', () => {
+    it('the vile zerg zergling will battle the epic terran marine', () => {
+        const marine = new Marine();
+        const zergling = new Zergling();
+        zergling.run(marine);
+        marine.shoot(zergling);
+        zergling.attack(marine);
+
+        marine.shoot(zergling);
+
+        assert.equal(marine.alive(), true)
+        assert.equal(zergling.alive(), false)
+    })
+    it('the vile zerg zergling will battle the epic protos zealot', () => {
+        const zealot = new Zealot();
+        const zergling = new Zergling();
+        zergling.run(zealot);
+        zealot.claw(zergling);
+
+        zergling.attack(zealot);
+        zealot.claw(zergling);
+
+        assert.equal(zealot.alive(), true)
+    })
+    it('the vile zerg zergling cannot hit a unit it has not run at', () => {
+        const zealot = new Zealot();
+        const zergling = new Zergling();
+
+        zergling.attack(zealot);
+
+        assert.equal(zealot.hitpointBar(), "full")
+    })
+})
\ No newline at end of file
diff --git a/test/test_kata_2.spec.ts b/test/folder_1/test_kata_2.spec.ts
similarity index 96%
rename from test/test_kata_2.spec.ts
rename to test/folder_1/test_kata_2.spec.ts
index d153b8c..4bceedf 100644
--- a/test/test_kata_2.spec.ts
+++ b/test/folder_1/test_kata_2.spec.ts
@@ -1,6 +1,6 @@
 ﻿
 import {assert} from 'chai';
-import {input} from "../src/2_kata.js";
+import {input} from "../../src/folder_1/2_kata.js";
 
 describe('kata two', function () {
     it('given 0 items can accept an input of how many items, cost per item, state code, and calculate total value',
diff --git a/test/test_kata_3.spec.ts b/test/folder_1/test_kata_3.spec.ts
similarity index 93%
rename from test/test_kata_3.spec.ts
rename to test/folder_1/test_kata_3.spec.ts
index bf966dc..05afb59 100644
--- a/test/test_kata_3.spec.ts
+++ b/test/folder_1/test_kata_3.spec.ts
@@ -1,5 +1,5 @@
 ﻿import {assert} from "chai";
-import { Zergling, Marine, Zealot } from '../src/3_kata.js';
+import { Zergling, Marine, Zealot } from '../../src/folder_1/3_kata.js';
 
 describe('can do battle', () => {
     it('the vile zerg zergling will battle the epic terran marine', () => {
@@ -7,8 +7,8 @@ describe('can do battle', () => {
         const zergling = new Zergling();
         zergling.run(marine);
         marine.shoot(zergling);
-
         zergling.attack(marine);
+
         marine.shoot(zergling);
 
         assert.equal(marine.alive(), true)
diff --git a/test/folder_1/test_kata_4.spec.ts b/test/folder_1/test_kata_4.spec.ts
new file mode 100644
index 0000000..8c0a536
--- /dev/null
+++ b/test/folder_1/test_kata_4.spec.ts
@@ -0,0 +1,29 @@
+﻿import assert from "node:assert";
+import HelloWorld, {helloWorldGenerator} from '../../src/folder_1/4_kata.js';
+
+describe('hello world kata two', function () {
+    it('should return hello world', function () {
+        assert.equal(HelloWorld(), "Hello World");
+    });
+    it('should use a generator function that returns hello', () => {
+        let firstCall = helloWorldGenerator().next();
+        assert.equal(firstCall.value, 'Hello')
+        assert.equal(firstCall.done, false)
+    });
+    it('should use a generator function that returns world on second call', () => {
+        let sequence = helloWorldGenerator();
+        sequence.next()
+
+        let secondCall = sequence.next();
+        assert.equal(secondCall.value, 'World')
+        assert.equal(secondCall.done, false)
+    });
+    it('should use a generator function that returns done after three calls', () => {
+        let sequence = helloWorldGenerator();
+        const firstCall = sequence.next();
+        const secondCall = sequence.next();
+        const thirdCall = sequence.next();
+
+        assert.equal(thirdCall.done, true)
+    });
+});
\ No newline at end of file
diff --git a/test/folder_1/test_kata_5.spec.ts b/test/folder_1/test_kata_5.spec.ts
new file mode 100644
index 0000000..ad6b27b
--- /dev/null
+++ b/test/folder_1/test_kata_5.spec.ts
@@ -0,0 +1,56 @@
+﻿
+import {assert} from 'chai';
+import {input} from "../../src/folder_1/5_kata.js";
+
+describe('kata two two', function () {
+    it('given 0 items can accept an input of how many items, cost per item, state code, and calculate total value',
+        function () {
+        const commands = [
+            "0",
+            "5",
+            "NV"
+        ]
+
+        const totalCost = input(commands);
+
+        assert.equal(totalCost, 0)
+    });
+    [
+        { state: "NV", multiplier: 1.08 },
+        { state: "UT", multiplier: 1.0685 },
+        { state: "TX", multiplier: 1.0625 },
+        { state: "AL", multiplier: 1.0400 },
+        { state: "CA", multiplier: 1.0825 },
+    ].forEach(({ state, multiplier }) =>
+        it(`given 1 item and a ${state} state code can accept an input of how many items, cost per item, state code, ` +
+        'and calculate total value', function () {
+        const commands = [
+            "1",
+            "5",
+            state
+        ]
+
+        const totalCost = input(commands);
+
+        assert.equal(totalCost, 5 * multiplier)
+    }));
+    [
+        { amount: "1000", discount: 0.03 },
+        { amount: "5000", discount: 0.05 },
+        { amount: "7000", discount: 0.07 },
+        { amount: "10000", discount: 0.10 },
+        { amount: "50000", discount: 0.15 },
+    ].forEach(({ amount, discount}) =>
+        it(`given ${amount} of items can accept an input of how many items, cost per item, state code, and calculate total value`,
+            function () {
+        const commands = [
+            "1",
+            amount,
+            "NV"
+        ]
+
+        const totalCost = input(commands);
+
+        assert.equal(totalCost, +amount * (1 - discount) * (1.08))
+    }));
+});
\ No newline at end of file
diff --git a/test/folder_1/test_kata_6.spec.ts b/test/folder_1/test_kata_6.spec.ts
new file mode 100644
index 0000000..902f541
--- /dev/null
+++ b/test/folder_1/test_kata_6.spec.ts
@@ -0,0 +1,36 @@
+﻿import {assert} from "chai";
+import { Zergling, Marine, Zealot } from '../../src/folder_1/6_kata.js';
+
+describe('can do battle two', () => {
+    it('the vile zerg zergling will battle the epic terran marine', () => {
+        const marine = new Marine();
+        const zergling = new Zergling();
+        zergling.run(marine);
+        marine.shoot(zergling);
+        zergling.attack(marine);
+
+        marine.shoot(zergling);
+
+        assert.equal(marine.alive(), true)
+        assert.equal(zergling.alive(), false)
+    })
+    it('the vile zerg zergling will battle the epic protos zealot', () => {
+        const zealot = new Zealot();
+        const zergling = new Zergling();
+        zergling.run(zealot);
+        zealot.claw(zergling);
+
+        zergling.attack(zealot);
+        zealot.claw(zergling);
+
+        assert.equal(zealot.alive(), true)
+    })
+    it('the vile zerg zergling cannot hit a unit it has not run at', () => {
+        const zealot = new Zealot();
+        const zergling = new Zergling();
+
+        zergling.attack(zealot);
+
+        assert.equal(zealot.hitpointBar(), "full")
+    })
+})
\ No newline at end of file
diff --git a/test/folder_1/test_kata_7.spec.ts b/test/folder_1/test_kata_7.spec.ts
new file mode 100644
index 0000000..3798cdf
--- /dev/null
+++ b/test/folder_1/test_kata_7.spec.ts
@@ -0,0 +1,29 @@
+﻿import assert from "node:assert";
+import HelloWorld, {helloWorldGenerator} from '../../src/folder_1/7_kata.js';
+
+describe('hello world kata three', function () {
+    it('should return hello world', function () {
+        assert.equal(HelloWorld(), "Hello World");
+    });
+    it('should use a generator function that returns hello', () => {
+        let firstCall = helloWorldGenerator().next();
+        assert.equal(firstCall.value, 'Hello')
+        assert.equal(firstCall.done, false)
+    });
+    it('should use a generator function that returns world on second call', () => {
+        let sequence = helloWorldGenerator();
+        sequence.next()
+
+        let secondCall = sequence.next();
+        assert.equal(secondCall.value, 'World')
+        assert.equal(secondCall.done, false)
+    });
+    it('should use a generator function that returns done after three calls', () => {
+        let sequence = helloWorldGenerator();
+        const firstCall = sequence.next();
+        const secondCall = sequence.next();
+        const thirdCall = sequence.next();
+
+        assert.equal(thirdCall.done, true)
+    });
+});
\ No newline at end of file
diff --git a/test/folder_1/test_kata_8.spec.ts b/test/folder_1/test_kata_8.spec.ts
new file mode 100644
index 0000000..fc6ec0e
--- /dev/null
+++ b/test/folder_1/test_kata_8.spec.ts
@@ -0,0 +1,56 @@
+﻿
+import {assert} from 'chai';
+import {input} from "../../src/folder_1/8_kata.js";
+
+describe('kata two three', function () {
+    it('given 0 items can accept an input of how many items, cost per item, state code, and calculate total value',
+        function () {
+        const commands = [
+            "0",
+            "5",
+            "NV"
+        ]
+
+        const totalCost = input(commands);
+
+        assert.equal(totalCost, 0)
+    });
+    [
+        { state: "NV", multiplier: 1.08 },
+        { state: "UT", multiplier: 1.0685 },
+        { state: "TX", multiplier: 1.0625 },
+        { state: "AL", multiplier: 1.0400 },
+        { state: "CA", multiplier: 1.0825 },
+    ].forEach(({ state, multiplier }) =>
+        it(`given 1 item and a ${state} state code can accept an input of how many items, cost per item, state code, ` +
+        'and calculate total value', function () {
+        const commands = [
+            "1",
+            "5",
+            state
+        ]
+
+        const totalCost = input(commands);
+
+        assert.equal(totalCost, 5 * multiplier)
+    }));
+    [
+        { amount: "1000", discount: 0.03 },
+        { amount: "5000", discount: 0.05 },
+        { amount: "7000", discount: 0.07 },
+        { amount: "10000", discount: 0.10 },
+        { amount: "50000", discount: 0.15 },
+    ].forEach(({ amount, discount}) =>
+        it(`given ${amount} of items can accept an input of how many items, cost per item, state code, and calculate total value`,
+            function () {
+        const commands = [
+            "1",
+            amount,
+            "NV"
+        ]
+
+        const totalCost = input(commands);
+
+        assert.equal(totalCost, +amount * (1 - discount) * (1.08))
+    }));
+});
\ No newline at end of file
diff --git a/test/folder_1/test_kata_9.spec.ts b/test/folder_1/test_kata_9.spec.ts
new file mode 100644
index 0000000..76cd570
--- /dev/null
+++ b/test/folder_1/test_kata_9.spec.ts
@@ -0,0 +1,36 @@
+﻿import {assert} from "chai";
+import { Zergling, Marine, Zealot } from '../../src/folder_1/9_kata.js';
+
+describe('can do battle three', () => {
+    it('the vile zerg zergling will battle the epic terran marine', () => {
+        const marine = new Marine();
+        const zergling = new Zergling();
+        zergling.run(marine);
+        marine.shoot(zergling);
+        zergling.attack(marine);
+
+        marine.shoot(zergling);
+
+        assert.equal(marine.alive(), true)
+        assert.equal(zergling.alive(), false)
+    })
+    it('the vile zerg zergling will battle the epic protos zealot', () => {
+        const zealot = new Zealot();
+        const zergling = new Zergling();
+        zergling.run(zealot);
+        zealot.claw(zergling);
+
+        zergling.attack(zealot);
+        zealot.claw(zergling);
+
+        assert.equal(zealot.alive(), true)
+    })
+    it('the vile zerg zergling cannot hit a unit it has not run at', () => {
+        const zealot = new Zealot();
+        const zergling = new Zergling();
+
+        zergling.attack(zealot);
+
+        assert.equal(zealot.hitpointBar(), "full")
+    })
+})
\ No newline at end of file
diff --git a/test/new-tests.ts b/test/new-tests.ts
deleted file mode 100644
index 446675f..0000000
--- a/test/new-tests.ts
+++ /dev/null
@@ -1,12 +0,0 @@
-﻿import { describe, it } from 'mocha';
-
-describe('additional mutation coverage', () => {
-    it('should not allow Zergling to attack a unit not in closeUnits');
-    it('should reduce Zergling hitpoints to zero or below and confirm not alive');
-    it('should allow Marine to attack and reduce hitpoints of any IUnit');
-    it('should allow Zealot to attack and reduce hitpoints of any IUnit');
-    it('should confirm Zealot hitpointBar returns "not full" after taking damage');
-    it('should not allow negative damage to increase hitpoints');
-    it("should not allow duplicate units in Zergling's closeUnits");
-});
-
diff --git a/tsconfig.json b/tsconfig.json
index 6bd0bc5..4d3aa77 100644
--- a/tsconfig.json
+++ b/tsconfig.json
@@ -1,5 +1,5 @@
 {
-  "include": ["modules.d.ts", "**/*.ts"],
+  "include": ["modules.d.ts", "**/*.ts", "./reports/mutation/mutation.json"],
   "exclude": ["node_modules"],
   "compilerOptions": {
     /* Visit https://aka.ms/tsconfig to read more about this file */
@@ -77,7 +77,6 @@
     // "preserveSymlinks": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
     "forceConsistentCasingInFileNames": true /* Ensure that casing is correct in imports. */,
 
-    /* Type Checking */
     "strict": true /* Enable all strict type-checking options. */,
     "noImplicitAny": false /* Enable error reporting for expressions and declarations with an implied 'any' type. */,
     // "strictNullChecks": true,                         /* When type checking, take into account 'null' and 'undefined'. */
38cd717 WIP on main: a370fc4 add third kata

diff --cc .gitignore
index af45e3f,af45e3f..215bc15
--- a/.gitignore
+++ b/.gitignore
@@@ -1,1 -1,1 +1,3 @@@
--﻿node_modules
++﻿node_modules
++# stryker temp files
++.stryker-tmp
diff --cc package-lock.json
index c7cebdb,c7cebdb..04bb15f
--- a/package-lock.json
+++ b/package-lock.json
@@@ -8,6 -8,6 +8,7 @@@
        "name": "JavascriptKata",
        "version": "1.0.0",
        "devDependencies": {
++        "@stryker-mutator/mocha-runner": "^9.0.1",
          "@types/chai": "^5.2.2",
          "@types/mocha": "^10.0.10",
          "@types/node": "^24.0.10",
@@@ -17,6 -17,6 +18,669 @@@
          "typescript": "^5.8.3"
        }
      },
++    "node_modules/@ampproject/remapping": {
++      "version": "2.3.0",
++      "resolved": "https://registry.npmjs.org/@ampproject/remapping/-/remapping-2.3.0.tgz",
++      "integrity": "sha512-30iZtAPgz+LTIYoeivqYo853f02jBYSd5uGnGpkFV0M3xOt9aN73erkgYAmZU43x4VfqcnLxW9Kpg3R5LC4YYw==",
++      "dev": true,
++      "license": "Apache-2.0",
++      "peer": true,
++      "dependencies": {
++        "@jridgewell/gen-mapping": "^0.3.5",
++        "@jridgewell/trace-mapping": "^0.3.24"
++      },
++      "engines": {
++        "node": ">=6.0.0"
++      }
++    },
++    "node_modules/@ampproject/remapping/node_modules/@jridgewell/trace-mapping": {
++      "version": "0.3.29",
++      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.29.tgz",
++      "integrity": "sha512-uw6guiW/gcAGPDhLmd77/6lW8QLeiV5RUTsAX46Db6oLhGaVj4lhnPwb184s1bkc8kdVg/+h988dro8GRDpmYQ==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "@jridgewell/resolve-uri": "^3.1.0",
++        "@jridgewell/sourcemap-codec": "^1.4.14"
++      }
++    },
++    "node_modules/@babel/code-frame": {
++      "version": "7.27.1",
++      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.27.1.tgz",
++      "integrity": "sha512-cjQ7ZlQ0Mv3b47hABuTevyTuYN4i+loJKGeV9flcCgIK37cCXRh+L1bd3iBHlynerhQ7BhCkn2BPbQUL+rGqFg==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "@babel/helper-validator-identifier": "^7.27.1",
++        "js-tokens": "^4.0.0",
++        "picocolors": "^1.1.1"
++      },
++      "engines": {
++        "node": ">=6.9.0"
++      }
++    },
++    "node_modules/@babel/compat-data": {
++      "version": "7.28.0",
++      "resolved": "https://registry.npmjs.org/@babel/compat-data/-/compat-data-7.28.0.tgz",
++      "integrity": "sha512-60X7qkglvrap8mn1lh2ebxXdZYtUcpd7gsmy9kLaBJ4i/WdY8PqTSdxyA8qraikqKQK5C1KRBKXqznrVapyNaw==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "engines": {
++        "node": ">=6.9.0"
++      }
++    },
++    "node_modules/@babel/core": {
++      "version": "7.27.7",
++      "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.27.7.tgz",
++      "integrity": "sha512-BU2f9tlKQ5CAthiMIgpzAh4eDTLWo1mqi9jqE2OxMG0E/OM199VJt2q8BztTxpnSW0i1ymdwLXRJnYzvDM5r2w==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "@ampproject/remapping": "^2.2.0",
++        "@babel/code-frame": "^7.27.1",
++        "@babel/generator": "^7.27.5",
++        "@babel/helper-compilation-targets": "^7.27.2",
++        "@babel/helper-module-transforms": "^7.27.3",
++        "@babel/helpers": "^7.27.6",
++        "@babel/parser": "^7.27.7",
++        "@babel/template": "^7.27.2",
++        "@babel/traverse": "^7.27.7",
++        "@babel/types": "^7.27.7",
++        "convert-source-map": "^2.0.0",
++        "debug": "^4.1.0",
++        "gensync": "^1.0.0-beta.2",
++        "json5": "^2.2.3",
++        "semver": "^6.3.1"
++      },
++      "engines": {
++        "node": ">=6.9.0"
++      },
++      "funding": {
++        "type": "opencollective",
++        "url": "https://opencollective.com/babel"
++      }
++    },
++    "node_modules/@babel/core/node_modules/semver": {
++      "version": "6.3.1",
++      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
++      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
++      "dev": true,
++      "license": "ISC",
++      "peer": true,
++      "bin": {
++        "semver": "bin/semver.js"
++      }
++    },
++    "node_modules/@babel/generator": {
++      "version": "7.27.5",
++      "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.27.5.tgz",
++      "integrity": "sha512-ZGhA37l0e/g2s1Cnzdix0O3aLYm66eF8aufiVteOgnwxgnRP8GoyMj7VWsgWnQbVKXyge7hqrFh2K2TQM6t1Hw==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "@babel/parser": "^7.27.5",
++        "@babel/types": "^7.27.3",
++        "@jridgewell/gen-mapping": "^0.3.5",
++        "@jridgewell/trace-mapping": "^0.3.25",
++        "jsesc": "^3.0.2"
++      },
++      "engines": {
++        "node": ">=6.9.0"
++      }
++    },
++    "node_modules/@babel/generator/node_modules/@jridgewell/trace-mapping": {
++      "version": "0.3.29",
++      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.29.tgz",
++      "integrity": "sha512-uw6guiW/gcAGPDhLmd77/6lW8QLeiV5RUTsAX46Db6oLhGaVj4lhnPwb184s1bkc8kdVg/+h988dro8GRDpmYQ==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "@jridgewell/resolve-uri": "^3.1.0",
++        "@jridgewell/sourcemap-codec": "^1.4.14"
++      }
++    },
++    "node_modules/@babel/helper-annotate-as-pure": {
++      "version": "7.27.3",
++      "resolved": "https://registry.npmjs.org/@babel/helper-annotate-as-pure/-/helper-annotate-as-pure-7.27.3.tgz",
++      "integrity": "sha512-fXSwMQqitTGeHLBC08Eq5yXz2m37E4pJX1qAU1+2cNedz/ifv/bVXft90VeSav5nFO61EcNgwr0aJxbyPaWBPg==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "@babel/types": "^7.27.3"
++      },
++      "engines": {
++        "node": ">=6.9.0"
++      }
++    },
++    "node_modules/@babel/helper-compilation-targets": {
++      "version": "7.27.2",
++      "resolved": "https://registry.npmjs.org/@babel/helper-compilation-targets/-/helper-compilation-targets-7.27.2.tgz",
++      "integrity": "sha512-2+1thGUUWWjLTYTHZWK1n8Yga0ijBz1XAhUXcKy81rd5g6yh7hGqMp45v7cadSbEHc9G3OTv45SyneRN3ps4DQ==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "@babel/compat-data": "^7.27.2",
++        "@babel/helper-validator-option": "^7.27.1",
++        "browserslist": "^4.24.0",
++        "lru-cache": "^5.1.1",
++        "semver": "^6.3.1"
++      },
++      "engines": {
++        "node": ">=6.9.0"
++      }
++    },
++    "node_modules/@babel/helper-compilation-targets/node_modules/lru-cache": {
++      "version": "5.1.1",
++      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-5.1.1.tgz",
++      "integrity": "sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==",
++      "dev": true,
++      "license": "ISC",
++      "peer": true,
++      "dependencies": {
++        "yallist": "^3.0.2"
++      }
++    },
++    "node_modules/@babel/helper-compilation-targets/node_modules/semver": {
++      "version": "6.3.1",
++      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
++      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
++      "dev": true,
++      "license": "ISC",
++      "peer": true,
++      "bin": {
++        "semver": "bin/semver.js"
++      }
++    },
++    "node_modules/@babel/helper-create-class-features-plugin": {
++      "version": "7.27.1",
++      "resolved": "https://registry.npmjs.org/@babel/helper-create-class-features-plugin/-/helper-create-class-features-plugin-7.27.1.tgz",
++      "integrity": "sha512-QwGAmuvM17btKU5VqXfb+Giw4JcN0hjuufz3DYnpeVDvZLAObloM77bhMXiqry3Iio+Ai4phVRDwl6WU10+r5A==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "@babel/helper-annotate-as-pure": "^7.27.1",
++        "@babel/helper-member-expression-to-functions": "^7.27.1",
++        "@babel/helper-optimise-call-expression": "^7.27.1",
++        "@babel/helper-replace-supers": "^7.27.1",
++        "@babel/helper-skip-transparent-expression-wrappers": "^7.27.1",
++        "@babel/traverse": "^7.27.1",
++        "semver": "^6.3.1"
++      },
++      "engines": {
++        "node": ">=6.9.0"
++      },
++      "peerDependencies": {
++        "@babel/core": "^7.0.0"
++      }
++    },
++    "node_modules/@babel/helper-create-class-features-plugin/node_modules/semver": {
++      "version": "6.3.1",
++      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
++      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
++      "dev": true,
++      "license": "ISC",
++      "peer": true,
++      "bin": {
++        "semver": "bin/semver.js"
++      }
++    },
++    "node_modules/@babel/helper-globals": {
++      "version": "7.28.0",
++      "resolved": "https://registry.npmjs.org/@babel/helper-globals/-/helper-globals-7.28.0.tgz",
++      "integrity": "sha512-+W6cISkXFa1jXsDEdYA8HeevQT/FULhxzR99pxphltZcVaugps53THCeiWA8SguxxpSp3gKPiuYfSWopkLQ4hw==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "engines": {
++        "node": ">=6.9.0"
++      }
++    },
++    "node_modules/@babel/helper-member-expression-to-functions": {
++      "version": "7.27.1",
++      "resolved": "https://registry.npmjs.org/@babel/helper-member-expression-to-functions/-/helper-member-expression-to-functions-7.27.1.tgz",
++      "integrity": "sha512-E5chM8eWjTp/aNoVpcbfM7mLxu9XGLWYise2eBKGQomAk/Mb4XoxyqXTZbuTohbsl8EKqdlMhnDI2CCLfcs9wA==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "@babel/traverse": "^7.27.1",
++        "@babel/types": "^7.27.1"
++      },
++      "engines": {
++        "node": ">=6.9.0"
++      }
++    },
++    "node_modules/@babel/helper-module-imports": {
++      "version": "7.27.1",
++      "resolved": "https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.27.1.tgz",
++      "integrity": "sha512-0gSFWUPNXNopqtIPQvlD5WgXYI5GY2kP2cCvoT8kczjbfcfuIljTbcWrulD1CIPIX2gt1wghbDy08yE1p+/r3w==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "@babel/traverse": "^7.27.1",
++        "@babel/types": "^7.27.1"
++      },
++      "engines": {
++        "node": ">=6.9.0"
++      }
++    },
++    "node_modules/@babel/helper-module-transforms": {
++      "version": "7.27.3",
++      "resolved": "https://registry.npmjs.org/@babel/helper-module-transforms/-/helper-module-transforms-7.27.3.tgz",
++      "integrity": "sha512-dSOvYwvyLsWBeIRyOeHXp5vPj5l1I011r52FM1+r1jCERv+aFXYk4whgQccYEGYxK2H3ZAIA8nuPkQ0HaUo3qg==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "@babel/helper-module-imports": "^7.27.1",
++        "@babel/helper-validator-identifier": "^7.27.1",
++        "@babel/traverse": "^7.27.3"
++      },
++      "engines": {
++        "node": ">=6.9.0"
++      },
++      "peerDependencies": {
++        "@babel/core": "^7.0.0"
++      }
++    },
++    "node_modules/@babel/helper-optimise-call-expression": {
++      "version": "7.27.1",
++      "resolved": "https://registry.npmjs.org/@babel/helper-optimise-call-expression/-/helper-optimise-call-expression-7.27.1.tgz",
++      "integrity": "sha512-URMGH08NzYFhubNSGJrpUEphGKQwMQYBySzat5cAByY1/YgIRkULnIy3tAMeszlL/so2HbeilYloUmSpd7GdVw==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "@babel/types": "^7.27.1"
++      },
++      "engines": {
++        "node": ">=6.9.0"
++      }
++    },
++    "node_modules/@babel/helper-plugin-utils": {
++      "version": "7.27.1",
++      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.27.1.tgz",
++      "integrity": "sha512-1gn1Up5YXka3YYAHGKpbideQ5Yjf1tDa9qYcgysz+cNCXukyLl6DjPXhD3VRwSb8c0J9tA4b2+rHEZtc6R0tlw==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "engines": {
++        "node": ">=6.9.0"
++      }
++    },
++    "node_modules/@babel/helper-replace-supers": {
++      "version": "7.27.1",
++      "resolved": "https://registry.npmjs.org/@babel/helper-replace-supers/-/helper-replace-supers-7.27.1.tgz",
++      "integrity": "sha512-7EHz6qDZc8RYS5ElPoShMheWvEgERonFCs7IAonWLLUTXW59DP14bCZt89/GKyreYn8g3S83m21FelHKbeDCKA==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "@babel/helper-member-expression-to-functions": "^7.27.1",
++        "@babel/helper-optimise-call-expression": "^7.27.1",
++        "@babel/traverse": "^7.27.1"
++      },
++      "engines": {
++        "node": ">=6.9.0"
++      },
++      "peerDependencies": {
++        "@babel/core": "^7.0.0"
++      }
++    },
++    "node_modules/@babel/helper-skip-transparent-expression-wrappers": {
++      "version": "7.27.1",
++      "resolved": "https://registry.npmjs.org/@babel/helper-skip-transparent-expression-wrappers/-/helper-skip-transparent-expression-wrappers-7.27.1.tgz",
++      "integrity": "sha512-Tub4ZKEXqbPjXgWLl2+3JpQAYBJ8+ikpQ2Ocj/q/r0LwE3UhENh7EUabyHjz2kCEsrRY83ew2DQdHluuiDQFzg==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "@babel/traverse": "^7.27.1",
++        "@babel/types": "^7.27.1"
++      },
++      "engines": {
++        "node": ">=6.9.0"
++      }
++    },
++    "node_modules/@babel/helper-string-parser": {
++      "version": "7.27.1",
++      "resolved": "https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.27.1.tgz",
++      "integrity": "sha512-qMlSxKbpRlAridDExk92nSobyDdpPijUq2DW6oDnUqd0iOGxmQjyqhMIihI9+zv4LPyZdRje2cavWPbCbWm3eA==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "engines": {
++        "node": ">=6.9.0"
++      }
++    },
++    "node_modules/@babel/helper-validator-identifier": {
++      "version": "7.27.1",
++      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.27.1.tgz",
++      "integrity": "sha512-D2hP9eA+Sqx1kBZgzxZh0y1trbuU+JoDkiEwqhQ36nodYqJwyEIhPSdMNd7lOm/4io72luTPWH20Yda0xOuUow==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "engines": {
++        "node": ">=6.9.0"
++      }
++    },
++    "node_modules/@babel/helper-validator-option": {
++      "version": "7.27.1",
++      "resolved": "https://registry.npmjs.org/@babel/helper-validator-option/-/helper-validator-option-7.27.1.tgz",
++      "integrity": "sha512-YvjJow9FxbhFFKDSuFnVCe2WxXk1zWc22fFePVNEaWJEu8IrZVlda6N0uHwzZrUM1il7NC9Mlp4MaJYbYd9JSg==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "engines": {
++        "node": ">=6.9.0"
++      }
++    },
++    "node_modules/@babel/helpers": {
++      "version": "7.27.6",
++      "resolved": "https://registry.npmjs.org/@babel/helpers/-/helpers-7.27.6.tgz",
++      "integrity": "sha512-muE8Tt8M22638HU31A3CgfSUciwz1fhATfoVai05aPXGor//CdWDCbnlY1yvBPo07njuVOCNGCSp/GTt12lIug==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "@babel/template": "^7.27.2",
++        "@babel/types": "^7.27.6"
++      },
++      "engines": {
++        "node": ">=6.9.0"
++      }
++    },
++    "node_modules/@babel/parser": {
++      "version": "7.27.7",
++      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.27.7.tgz",
++      "integrity": "sha512-qnzXzDXdr/po3bOTbTIQZ7+TxNKxpkN5IifVLXS+r7qwynkZfPyjZfE7hCXbo7IoO9TNcSyibgONsf2HauUd3Q==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "@babel/types": "^7.27.7"
++      },
++      "bin": {
++        "parser": "bin/babel-parser.js"
++      },
++      "engines": {
++        "node": ">=6.0.0"
++      }
++    },
++    "node_modules/@babel/plugin-proposal-decorators": {
++      "version": "7.27.1",
++      "resolved": "https://registry.npmjs.org/@babel/plugin-proposal-decorators/-/plugin-proposal-decorators-7.27.1.tgz",
++      "integrity": "sha512-DTxe4LBPrtFdsWzgpmbBKevg3e9PBy+dXRt19kSbucbZvL2uqtdqwwpluL1jfxYE0wIDTFp1nTy/q6gNLsxXrg==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "@babel/helper-create-class-features-plugin": "^7.27.1",
++        "@babel/helper-plugin-utils": "^7.27.1",
++        "@babel/plugin-syntax-decorators": "^7.27.1"
++      },
++      "engines": {
++        "node": ">=6.9.0"
++      },
++      "peerDependencies": {
++        "@babel/core": "^7.0.0-0"
++      }
++    },
++    "node_modules/@babel/plugin-proposal-explicit-resource-management": {
++      "version": "7.27.4",
++      "resolved": "https://registry.npmjs.org/@babel/plugin-proposal-explicit-resource-management/-/plugin-proposal-explicit-resource-management-7.27.4.tgz",
++      "integrity": "sha512-1SwtCDdZWQvUU1i7wt/ihP7W38WjC3CSTOHAl+Xnbze8+bbMNjRvRQydnj0k9J1jPqCAZctBFp6NHJXkrVVmEA==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "@babel/helper-plugin-utils": "^7.27.1",
++        "@babel/plugin-transform-destructuring": "^7.27.3"
++      },
++      "engines": {
++        "node": ">=6.9.0"
++      },
++      "peerDependencies": {
++        "@babel/core": "^7.0.0-0"
++      }
++    },
++    "node_modules/@babel/plugin-syntax-decorators": {
++      "version": "7.27.1",
++      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-decorators/-/plugin-syntax-decorators-7.27.1.tgz",
++      "integrity": "sha512-YMq8Z87Lhl8EGkmb0MwYkt36QnxC+fzCgrl66ereamPlYToRpIk5nUjKUY3QKLWq8mwUB1BgbeXcTJhZOCDg5A==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "@babel/helper-plugin-utils": "^7.27.1"
++      },
++      "engines": {
++        "node": ">=6.9.0"
++      },
++      "peerDependencies": {
++        "@babel/core": "^7.0.0-0"
++      }
++    },
++    "node_modules/@babel/plugin-syntax-jsx": {
++      "version": "7.27.1",
++      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-jsx/-/plugin-syntax-jsx-7.27.1.tgz",
++      "integrity": "sha512-y8YTNIeKoyhGd9O0Jiyzyyqk8gdjnumGTQPsz0xOZOQ2RmkVJeZ1vmmfIvFEKqucBG6axJGBZDE/7iI5suUI/w==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "@babel/helper-plugin-utils": "^7.27.1"
++      },
++      "engines": {
++        "node": ">=6.9.0"
++      },
++      "peerDependencies": {
++        "@babel/core": "^7.0.0-0"
++      }
++    },
++    "node_modules/@babel/plugin-syntax-typescript": {
++      "version": "7.27.1",
++      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-typescript/-/plugin-syntax-typescript-7.27.1.tgz",
++      "integrity": "sha512-xfYCBMxveHrRMnAWl1ZlPXOZjzkN82THFvLhQhFXFt81Z5HnN+EtUkZhv/zcKpmT3fzmWZB0ywiBrbC3vogbwQ==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "@babel/helper-plugin-utils": "^7.27.1"
++      },
++      "engines": {
++        "node": ">=6.9.0"
++      },
++      "peerDependencies": {
++        "@babel/core": "^7.0.0-0"
++      }
++    },
++    "node_modules/@babel/plugin-transform-destructuring": {
++      "version": "7.28.0",
++      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-destructuring/-/plugin-transform-destructuring-7.28.0.tgz",
++      "integrity": "sha512-v1nrSMBiKcodhsyJ4Gf+Z0U/yawmJDBOTpEB3mcQY52r9RIyPneGyAS/yM6seP/8I+mWI3elOMtT5dB8GJVs+A==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "@babel/helper-plugin-utils": "^7.27.1",
++        "@babel/traverse": "^7.28.0"
++      },
++      "engines": {
++        "node": ">=6.9.0"
++      },
++      "peerDependencies": {
++        "@babel/core": "^7.0.0-0"
++      }
++    },
++    "node_modules/@babel/plugin-transform-modules-commonjs": {
++      "version": "7.27.1",
++      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-modules-commonjs/-/plugin-transform-modules-commonjs-7.27.1.tgz",
++      "integrity": "sha512-OJguuwlTYlN0gBZFRPqwOGNWssZjfIUdS7HMYtN8c1KmwpwHFBwTeFZrg9XZa+DFTitWOW5iTAG7tyCUPsCCyw==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "@babel/helper-module-transforms": "^7.27.1",
++        "@babel/helper-plugin-utils": "^7.27.1"
++      },
++      "engines": {
++        "node": ">=6.9.0"
++      },
++      "peerDependencies": {
++        "@babel/core": "^7.0.0-0"
++      }
++    },
++    "node_modules/@babel/plugin-transform-typescript": {
++      "version": "7.28.0",
++      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-typescript/-/plugin-transform-typescript-7.28.0.tgz",
++      "integrity": "sha512-4AEiDEBPIZvLQaWlc9liCavE0xRM0dNca41WtBeM3jgFptfUOSG9z0uteLhq6+3rq+WB6jIvUwKDTpXEHPJ2Vg==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "@babel/helper-annotate-as-pure": "^7.27.3",
++        "@babel/helper-create-class-features-plugin": "^7.27.1",
++        "@babel/helper-plugin-utils": "^7.27.1",
++        "@babel/helper-skip-transparent-expression-wrappers": "^7.27.1",
++        "@babel/plugin-syntax-typescript": "^7.27.1"
++      },
++      "engines": {
++        "node": ">=6.9.0"
++      },
++      "peerDependencies": {
++        "@babel/core": "^7.0.0-0"
++      }
++    },
++    "node_modules/@babel/preset-typescript": {
++      "version": "7.27.1",
++      "resolved": "https://registry.npmjs.org/@babel/preset-typescript/-/preset-typescript-7.27.1.tgz",
++      "integrity": "sha512-l7WfQfX0WK4M0v2RudjuQK4u99BS6yLHYEmdtVPP7lKV013zr9DygFuWNlnbvQ9LR+LS0Egz/XAvGx5U9MX0fQ==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "@babel/helper-plugin-utils": "^7.27.1",
++        "@babel/helper-validator-option": "^7.27.1",
++        "@babel/plugin-syntax-jsx": "^7.27.1",
++        "@babel/plugin-transform-modules-commonjs": "^7.27.1",
++        "@babel/plugin-transform-typescript": "^7.27.1"
++      },
++      "engines": {
++        "node": ">=6.9.0"
++      },
++      "peerDependencies": {
++        "@babel/core": "^7.0.0-0"
++      }
++    },
++    "node_modules/@babel/template": {
++      "version": "7.27.2",
++      "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.27.2.tgz",
++      "integrity": "sha512-LPDZ85aEJyYSd18/DkjNh4/y1ntkE5KwUHWTiqgRxruuZL2F1yuHligVHLvcHY2vMHXttKFpJn6LwfI7cw7ODw==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "@babel/code-frame": "^7.27.1",
++        "@babel/parser": "^7.27.2",
++        "@babel/types": "^7.27.1"
++      },
++      "engines": {
++        "node": ">=6.9.0"
++      }
++    },
++    "node_modules/@babel/traverse": {
++      "version": "7.28.0",
++      "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.28.0.tgz",
++      "integrity": "sha512-mGe7UK5wWyh0bKRfupsUchrQGqvDbZDbKJw+kcRGSmdHVYrv+ltd0pnpDTVpiTqnaBru9iEvA8pz8W46v0Amwg==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "@babel/code-frame": "^7.27.1",
++        "@babel/generator": "^7.28.0",
++        "@babel/helper-globals": "^7.28.0",
++        "@babel/parser": "^7.28.0",
++        "@babel/template": "^7.27.2",
++        "@babel/types": "^7.28.0",
++        "debug": "^4.3.1"
++      },
++      "engines": {
++        "node": ">=6.9.0"
++      }
++    },
++    "node_modules/@babel/traverse/node_modules/@babel/generator": {
++      "version": "7.28.0",
++      "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.28.0.tgz",
++      "integrity": "sha512-lJjzvrbEeWrhB4P3QBsH7tey117PjLZnDbLiQEKjQ/fNJTjuq4HSqgFA+UNSwZT8D7dxxbnuSBMsa1lrWzKlQg==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "@babel/parser": "^7.28.0",
++        "@babel/types": "^7.28.0",
++        "@jridgewell/gen-mapping": "^0.3.12",
++        "@jridgewell/trace-mapping": "^0.3.28",
++        "jsesc": "^3.0.2"
++      },
++      "engines": {
++        "node": ">=6.9.0"
++      }
++    },
++    "node_modules/@babel/traverse/node_modules/@babel/parser": {
++      "version": "7.28.0",
++      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.28.0.tgz",
++      "integrity": "sha512-jVZGvOxOuNSsuQuLRTh13nU0AogFlw32w/MT+LV6D3sP5WdbW61E77RnkbaO2dUvmPAYrBDJXGn5gGS6tH4j8g==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "@babel/types": "^7.28.0"
++      },
++      "bin": {
++        "parser": "bin/babel-parser.js"
++      },
++      "engines": {
++        "node": ">=6.0.0"
++      }
++    },
++    "node_modules/@babel/traverse/node_modules/@jridgewell/trace-mapping": {
++      "version": "0.3.29",
++      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.29.tgz",
++      "integrity": "sha512-uw6guiW/gcAGPDhLmd77/6lW8QLeiV5RUTsAX46Db6oLhGaVj4lhnPwb184s1bkc8kdVg/+h988dro8GRDpmYQ==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "@jridgewell/resolve-uri": "^3.1.0",
++        "@jridgewell/sourcemap-codec": "^1.4.14"
++      }
++    },
++    "node_modules/@babel/types": {
++      "version": "7.28.0",
++      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.28.0.tgz",
++      "integrity": "sha512-jYnje+JyZG5YThjHiF28oT4SIZLnYOcSBb6+SDaFIyzDVSkXQmQQYclJ2R+YxcdmK0AX6x1E5OQNtuh3jHDrUg==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "@babel/helper-string-parser": "^7.27.1",
++        "@babel/helper-validator-identifier": "^7.27.1"
++      },
++      "engines": {
++        "node": ">=6.9.0"
++      }
++    },
      "node_modules/@cspotcode/source-map-support": {
        "version": "0.8.1",
        "resolved": "https://registry.npmjs.org/@cspotcode/source-map-support/-/source-map-support-0.8.1.tgz",
@@@ -25,10 -25,10 +689,407 @@@
        "license": "MIT",
        "peer": true,
        "dependencies": {
--        "@jridgewell/trace-mapping": "0.3.9"
++        "@jridgewell/trace-mapping": "0.3.9"
++      },
++      "engines": {
++        "node": ">=12"
++      }
++    },
++    "node_modules/@inquirer/checkbox": {
++      "version": "4.1.9",
++      "resolved": "https://registry.npmjs.org/@inquirer/checkbox/-/checkbox-4.1.9.tgz",
++      "integrity": "sha512-DBJBkzI5Wx4jFaYm221LHvAhpKYkhVS0k9plqHwaHhofGNxvYB7J3Bz8w+bFJ05zaMb0sZNHo4KdmENQFlNTuQ==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "@inquirer/core": "^10.1.14",
++        "@inquirer/figures": "^1.0.12",
++        "@inquirer/type": "^3.0.7",
++        "ansi-escapes": "^4.3.2",
++        "yoctocolors-cjs": "^2.1.2"
++      },
++      "engines": {
++        "node": ">=18"
++      },
++      "peerDependencies": {
++        "@types/node": ">=18"
++      },
++      "peerDependenciesMeta": {
++        "@types/node": {
++          "optional": true
++        }
++      }
++    },
++    "node_modules/@inquirer/confirm": {
++      "version": "5.1.13",
++      "resolved": "https://registry.npmjs.org/@inquirer/confirm/-/confirm-5.1.13.tgz",
++      "integrity": "sha512-EkCtvp67ICIVVzjsquUiVSd+V5HRGOGQfsqA4E4vMWhYnB7InUL0pa0TIWt1i+OfP16Gkds8CdIu6yGZwOM1Yw==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "@inquirer/core": "^10.1.14",
++        "@inquirer/type": "^3.0.7"
++      },
++      "engines": {
++        "node": ">=18"
++      },
++      "peerDependencies": {
++        "@types/node": ">=18"
++      },
++      "peerDependenciesMeta": {
++        "@types/node": {
++          "optional": true
++        }
++      }
++    },
++    "node_modules/@inquirer/core": {
++      "version": "10.1.14",
++      "resolved": "https://registry.npmjs.org/@inquirer/core/-/core-10.1.14.tgz",
++      "integrity": "sha512-Ma+ZpOJPewtIYl6HZHZckeX1STvDnHTCB2GVINNUlSEn2Am6LddWwfPkIGY0IUFVjUUrr/93XlBwTK6mfLjf0A==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "@inquirer/figures": "^1.0.12",
++        "@inquirer/type": "^3.0.7",
++        "ansi-escapes": "^4.3.2",
++        "cli-width": "^4.1.0",
++        "mute-stream": "^2.0.0",
++        "signal-exit": "^4.1.0",
++        "wrap-ansi": "^6.2.0",
++        "yoctocolors-cjs": "^2.1.2"
++      },
++      "engines": {
++        "node": ">=18"
++      },
++      "peerDependencies": {
++        "@types/node": ">=18"
++      },
++      "peerDependenciesMeta": {
++        "@types/node": {
++          "optional": true
++        }
++      }
++    },
++    "node_modules/@inquirer/core/node_modules/ansi-regex": {
++      "version": "5.0.1",
++      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
++      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "engines": {
++        "node": ">=8"
++      }
++    },
++    "node_modules/@inquirer/core/node_modules/emoji-regex": {
++      "version": "8.0.0",
++      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
++      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true
++    },
++    "node_modules/@inquirer/core/node_modules/string-width": {
++      "version": "4.2.3",
++      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
++      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "emoji-regex": "^8.0.0",
++        "is-fullwidth-code-point": "^3.0.0",
++        "strip-ansi": "^6.0.1"
        },
        "engines": {
--        "node": ">=12"
++        "node": ">=8"
++      }
++    },
++    "node_modules/@inquirer/core/node_modules/strip-ansi": {
++      "version": "6.0.1",
++      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
++      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "ansi-regex": "^5.0.1"
++      },
++      "engines": {
++        "node": ">=8"
++      }
++    },
++    "node_modules/@inquirer/core/node_modules/wrap-ansi": {
++      "version": "6.2.0",
++      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-6.2.0.tgz",
++      "integrity": "sha512-r6lPcBGxZXlIcymEu7InxDMhdW0KDxpLgoFLcguasxCaJ/SOIZwINatK9KY/tf+ZrlywOKU0UDj3ATXUBfxJXA==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "ansi-styles": "^4.0.0",
++        "string-width": "^4.1.0",
++        "strip-ansi": "^6.0.0"
++      },
++      "engines": {
++        "node": ">=8"
++      }
++    },
++    "node_modules/@inquirer/editor": {
++      "version": "4.2.14",
++      "resolved": "https://registry.npmjs.org/@inquirer/editor/-/editor-4.2.14.tgz",
++      "integrity": "sha512-yd2qtLl4QIIax9DTMZ1ZN2pFrrj+yL3kgIWxm34SS6uwCr0sIhsNyudUjAo5q3TqI03xx4SEBkUJqZuAInp9uA==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "@inquirer/core": "^10.1.14",
++        "@inquirer/type": "^3.0.7",
++        "external-editor": "^3.1.0"
++      },
++      "engines": {
++        "node": ">=18"
++      },
++      "peerDependencies": {
++        "@types/node": ">=18"
++      },
++      "peerDependenciesMeta": {
++        "@types/node": {
++          "optional": true
++        }
++      }
++    },
++    "node_modules/@inquirer/expand": {
++      "version": "4.0.16",
++      "resolved": "https://registry.npmjs.org/@inquirer/expand/-/expand-4.0.16.tgz",
++      "integrity": "sha512-oiDqafWzMtofeJyyGkb1CTPaxUkjIcSxePHHQCfif8t3HV9pHcw1Kgdw3/uGpDvaFfeTluwQtWiqzPVjAqS3zA==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "@inquirer/core": "^10.1.14",
++        "@inquirer/type": "^3.0.7",
++        "yoctocolors-cjs": "^2.1.2"
++      },
++      "engines": {
++        "node": ">=18"
++      },
++      "peerDependencies": {
++        "@types/node": ">=18"
++      },
++      "peerDependenciesMeta": {
++        "@types/node": {
++          "optional": true
++        }
++      }
++    },
++    "node_modules/@inquirer/figures": {
++      "version": "1.0.12",
++      "resolved": "https://registry.npmjs.org/@inquirer/figures/-/figures-1.0.12.tgz",
++      "integrity": "sha512-MJttijd8rMFcKJC8NYmprWr6hD3r9Gd9qUC0XwPNwoEPWSMVJwA2MlXxF+nhZZNMY+HXsWa+o7KY2emWYIn0jQ==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "engines": {
++        "node": ">=18"
++      }
++    },
++    "node_modules/@inquirer/input": {
++      "version": "4.2.0",
++      "resolved": "https://registry.npmjs.org/@inquirer/input/-/input-4.2.0.tgz",
++      "integrity": "sha512-opqpHPB1NjAmDISi3uvZOTrjEEU5CWVu/HBkDby8t93+6UxYX0Z7Ps0Ltjm5sZiEbWenjubwUkivAEYQmy9xHw==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "@inquirer/core": "^10.1.14",
++        "@inquirer/type": "^3.0.7"
++      },
++      "engines": {
++        "node": ">=18"
++      },
++      "peerDependencies": {
++        "@types/node": ">=18"
++      },
++      "peerDependenciesMeta": {
++        "@types/node": {
++          "optional": true
++        }
++      }
++    },
++    "node_modules/@inquirer/number": {
++      "version": "3.0.16",
++      "resolved": "https://registry.npmjs.org/@inquirer/number/-/number-3.0.16.tgz",
++      "integrity": "sha512-kMrXAaKGavBEoBYUCgualbwA9jWUx2TjMA46ek+pEKy38+LFpL9QHlTd8PO2kWPUgI/KB+qi02o4y2rwXbzr3Q==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "@inquirer/core": "^10.1.14",
++        "@inquirer/type": "^3.0.7"
++      },
++      "engines": {
++        "node": ">=18"
++      },
++      "peerDependencies": {
++        "@types/node": ">=18"
++      },
++      "peerDependenciesMeta": {
++        "@types/node": {
++          "optional": true
++        }
++      }
++    },
++    "node_modules/@inquirer/password": {
++      "version": "4.0.16",
++      "resolved": "https://registry.npmjs.org/@inquirer/password/-/password-4.0.16.tgz",
++      "integrity": "sha512-g8BVNBj5Zeb5/Y3cSN+hDUL7CsIFDIuVxb9EPty3lkxBaYpjL5BNRKSYOF9yOLe+JOcKFd+TSVeADQ4iSY7rbg==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "@inquirer/core": "^10.1.14",
++        "@inquirer/type": "^3.0.7",
++        "ansi-escapes": "^4.3.2"
++      },
++      "engines": {
++        "node": ">=18"
++      },
++      "peerDependencies": {
++        "@types/node": ">=18"
++      },
++      "peerDependenciesMeta": {
++        "@types/node": {
++          "optional": true
++        }
++      }
++    },
++    "node_modules/@inquirer/prompts": {
++      "version": "7.6.0",
++      "resolved": "https://registry.npmjs.org/@inquirer/prompts/-/prompts-7.6.0.tgz",
++      "integrity": "sha512-jAhL7tyMxB3Gfwn4HIJ0yuJ5pvcB5maYUcouGcgd/ub79f9MqZ+aVnBtuFf+VC2GTkCBF+R+eo7Vi63w5VZlzw==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "@inquirer/checkbox": "^4.1.9",
++        "@inquirer/confirm": "^5.1.13",
++        "@inquirer/editor": "^4.2.14",
++        "@inquirer/expand": "^4.0.16",
++        "@inquirer/input": "^4.2.0",
++        "@inquirer/number": "^3.0.16",
++        "@inquirer/password": "^4.0.16",
++        "@inquirer/rawlist": "^4.1.4",
++        "@inquirer/search": "^3.0.16",
++        "@inquirer/select": "^4.2.4"
++      },
++      "engines": {
++        "node": ">=18"
++      },
++      "peerDependencies": {
++        "@types/node": ">=18"
++      },
++      "peerDependenciesMeta": {
++        "@types/node": {
++          "optional": true
++        }
++      }
++    },
++    "node_modules/@inquirer/rawlist": {
++      "version": "4.1.4",
++      "resolved": "https://registry.npmjs.org/@inquirer/rawlist/-/rawlist-4.1.4.tgz",
++      "integrity": "sha512-5GGvxVpXXMmfZNtvWw4IsHpR7RzqAR624xtkPd1NxxlV5M+pShMqzL4oRddRkg8rVEOK9fKdJp1jjVML2Lr7TQ==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "@inquirer/core": "^10.1.14",
++        "@inquirer/type": "^3.0.7",
++        "yoctocolors-cjs": "^2.1.2"
++      },
++      "engines": {
++        "node": ">=18"
++      },
++      "peerDependencies": {
++        "@types/node": ">=18"
++      },
++      "peerDependenciesMeta": {
++        "@types/node": {
++          "optional": true
++        }
++      }
++    },
++    "node_modules/@inquirer/search": {
++      "version": "3.0.16",
++      "resolved": "https://registry.npmjs.org/@inquirer/search/-/search-3.0.16.tgz",
++      "integrity": "sha512-POCmXo+j97kTGU6aeRjsPyuCpQQfKcMXdeTMw708ZMtWrj5aykZvlUxH4Qgz3+Y1L/cAVZsSpA+UgZCu2GMOMg==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "@inquirer/core": "^10.1.14",
++        "@inquirer/figures": "^1.0.12",
++        "@inquirer/type": "^3.0.7",
++        "yoctocolors-cjs": "^2.1.2"
++      },
++      "engines": {
++        "node": ">=18"
++      },
++      "peerDependencies": {
++        "@types/node": ">=18"
++      },
++      "peerDependenciesMeta": {
++        "@types/node": {
++          "optional": true
++        }
++      }
++    },
++    "node_modules/@inquirer/select": {
++      "version": "4.2.4",
++      "resolved": "https://registry.npmjs.org/@inquirer/select/-/select-4.2.4.tgz",
++      "integrity": "sha512-unTppUcTjmnbl/q+h8XeQDhAqIOmwWYWNyiiP2e3orXrg6tOaa5DHXja9PChCSbChOsktyKgOieRZFnajzxoBg==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "@inquirer/core": "^10.1.14",
++        "@inquirer/figures": "^1.0.12",
++        "@inquirer/type": "^3.0.7",
++        "ansi-escapes": "^4.3.2",
++        "yoctocolors-cjs": "^2.1.2"
++      },
++      "engines": {
++        "node": ">=18"
++      },
++      "peerDependencies": {
++        "@types/node": ">=18"
++      },
++      "peerDependenciesMeta": {
++        "@types/node": {
++          "optional": true
++        }
++      }
++    },
++    "node_modules/@inquirer/type": {
++      "version": "3.0.7",
++      "resolved": "https://registry.npmjs.org/@inquirer/type/-/type-3.0.7.tgz",
++      "integrity": "sha512-PfunHQcjwnju84L+ycmcMKB/pTPIngjUJvfnRhKY6FKPuYXlM4aQCb/nIdTFR6BEhMjFvngzvng/vBAJMZpLSA==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "engines": {
++        "node": ">=18"
++      },
++      "peerDependencies": {
++        "@types/node": ">=18"
++      },
++      "peerDependenciesMeta": {
++        "@types/node": {
++          "optional": true
++        }
        }
      },
      "node_modules/@isaacs/cliui": {
@@@ -50,6 -50,6 +1111,30 @@@
          "node": ">=12"
        }
      },
++    "node_modules/@jridgewell/gen-mapping": {
++      "version": "0.3.12",
++      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.12.tgz",
++      "integrity": "sha512-OuLGC46TjB5BbN1dH8JULVVZY4WTdkF7tV9Ys6wLL1rubZnCMstOhNHueU5bLCrnRuDhKPDM4g6sw4Bel5Gzqg==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "@jridgewell/sourcemap-codec": "^1.5.0",
++        "@jridgewell/trace-mapping": "^0.3.24"
++      }
++    },
++    "node_modules/@jridgewell/gen-mapping/node_modules/@jridgewell/trace-mapping": {
++      "version": "0.3.29",
++      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.29.tgz",
++      "integrity": "sha512-uw6guiW/gcAGPDhLmd77/6lW8QLeiV5RUTsAX46Db6oLhGaVj4lhnPwb184s1bkc8kdVg/+h988dro8GRDpmYQ==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "@jridgewell/resolve-uri": "^3.1.0",
++        "@jridgewell/sourcemap-codec": "^1.4.14"
++      }
++    },
      "node_modules/@jridgewell/resolve-uri": {
        "version": "3.1.2",
        "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
@@@ -61,38 -61,38 +1146,189 @@@
          "node": ">=6.0.0"
        }
      },
--    "node_modules/@jridgewell/sourcemap-codec": {
--      "version": "1.5.4",
--      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.4.tgz",
--      "integrity": "sha512-VT2+G1VQs/9oz078bLrYbecdZKs912zQlkelYpuf+SXF+QvZDYJlbx/LSx+meSAwdDFnF8FVXW92AVjjkVmgFw==",
++    "node_modules/@jridgewell/sourcemap-codec": {
++      "version": "1.5.4",
++      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.4.tgz",
++      "integrity": "sha512-VT2+G1VQs/9oz078bLrYbecdZKs912zQlkelYpuf+SXF+QvZDYJlbx/LSx+meSAwdDFnF8FVXW92AVjjkVmgFw==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true
++    },
++    "node_modules/@jridgewell/trace-mapping": {
++      "version": "0.3.9",
++      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.9.tgz",
++      "integrity": "sha512-3Belt6tdc8bPgAtbcmdtNJlirVoTmEb5e2gC94PnkwEW9jI6CAHUeoG85tjWP5WquqfavoMtMwiG4P926ZKKuQ==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "@jridgewell/resolve-uri": "^3.0.3",
++        "@jridgewell/sourcemap-codec": "^1.4.10"
++      }
++    },
++    "node_modules/@pkgjs/parseargs": {
++      "version": "0.11.0",
++      "resolved": "https://registry.npmjs.org/@pkgjs/parseargs/-/parseargs-0.11.0.tgz",
++      "integrity": "sha512-+1VkjdD0QBLPodGrJUeqarH8VAIvQODIbwh9XpP5Syisf7YoQgsJKPNFoqqLQlu+VQ/tVSshMR6loPMn8U+dPg==",
++      "dev": true,
++      "license": "MIT",
++      "optional": true,
++      "peer": true,
++      "engines": {
++        "node": ">=14"
++      }
++    },
++    "node_modules/@sec-ant/readable-stream": {
++      "version": "0.4.1",
++      "resolved": "https://registry.npmjs.org/@sec-ant/readable-stream/-/readable-stream-0.4.1.tgz",
++      "integrity": "sha512-831qok9r2t8AlxLko40y2ebgSDhenenCatLVeW/uBtnHPyhHOvG0C7TvfgecV+wHzIm5KUICgzmVpWS+IMEAeg==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true
++    },
++    "node_modules/@sindresorhus/merge-streams": {
++      "version": "4.0.0",
++      "resolved": "https://registry.npmjs.org/@sindresorhus/merge-streams/-/merge-streams-4.0.0.tgz",
++      "integrity": "sha512-tlqY9xq5ukxTUZBmoOp+m61cqwQD5pHJtFY3Mn8CA8ps6yghLH/Hw8UPdqg4OLmFW3IFlcXnQNmo/dh8HzXYIQ==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "engines": {
++        "node": ">=18"
++      },
++      "funding": {
++        "url": "https://github.com/sponsors/sindresorhus"
++      }
++    },
++    "node_modules/@stryker-mutator/api": {
++      "version": "9.0.1",
++      "resolved": "https://registry.npmjs.org/@stryker-mutator/api/-/api-9.0.1.tgz",
++      "integrity": "sha512-XrfDRFzmxVOxzTtUYN7GI2KwD1iu+QXzxF5LmnTeSWJw4IPQSPpwDs5jowT2lwDXiWFcN49yX6JrIEUqLXa28A==",
++      "dev": true,
++      "license": "Apache-2.0",
++      "dependencies": {
++        "mutation-testing-metrics": "3.5.1",
++        "mutation-testing-report-schema": "3.5.1",
++        "tslib": "~2.8.0",
++        "typed-inject": "~5.0.0"
++      },
++      "engines": {
++        "node": ">=20.0.0"
++      }
++    },
++    "node_modules/@stryker-mutator/core": {
++      "version": "9.0.1",
++      "resolved": "https://registry.npmjs.org/@stryker-mutator/core/-/core-9.0.1.tgz",
++      "integrity": "sha512-+XpsJ0JnFIVNdAV8RjaUe1TDRz/5SDiN29aTO5RqiyW2WpYrCtpql7d+O8TvLWe43ua7MPauIKqW3cEGsNMNGQ==",
++      "dev": true,
++      "license": "Apache-2.0",
++      "peer": true,
++      "dependencies": {
++        "@inquirer/prompts": "^7.0.0",
++        "@stryker-mutator/api": "9.0.1",
++        "@stryker-mutator/instrumenter": "9.0.1",
++        "@stryker-mutator/util": "9.0.1",
++        "ajv": "~8.17.1",
++        "chalk": "~5.4.0",
++        "commander": "~13.1.0",
++        "diff-match-patch": "1.0.5",
++        "emoji-regex": "~10.4.0",
++        "execa": "~9.5.0",
++        "file-url": "~4.0.0",
++        "lodash.groupby": "~4.6.0",
++        "minimatch": "~9.0.5",
++        "mutation-testing-elements": "3.5.2",
++        "mutation-testing-metrics": "3.5.1",
++        "mutation-testing-report-schema": "3.5.1",
++        "npm-run-path": "~6.0.0",
++        "progress": "~2.0.3",
++        "rxjs": "~7.8.1",
++        "semver": "^7.6.3",
++        "source-map": "~0.7.4",
++        "tree-kill": "~1.2.2",
++        "tslib": "2.8.1",
++        "typed-inject": "~5.0.0",
++        "typed-rest-client": "~2.1.0"
++      },
++      "bin": {
++        "stryker": "bin/stryker.js"
++      },
++      "engines": {
++        "node": ">=20.0.0"
++      }
++    },
++    "node_modules/@stryker-mutator/core/node_modules/chalk": {
++      "version": "5.4.1",
++      "resolved": "https://registry.npmjs.org/chalk/-/chalk-5.4.1.tgz",
++      "integrity": "sha512-zgVZuo2WcZgfUEmsn6eO3kINexW8RAE4maiQ8QNs8CtpPCSyMiYsULR3HQYkm3w8FIA3SberyMJMSldGsW+U3w==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "engines": {
++        "node": "^12.17.0 || ^14.13 || >=16.0.0"
++      },
++      "funding": {
++        "url": "https://github.com/chalk/chalk?sponsor=1"
++      }
++    },
++    "node_modules/@stryker-mutator/core/node_modules/emoji-regex": {
++      "version": "10.4.0",
++      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-10.4.0.tgz",
++      "integrity": "sha512-EC+0oUMY1Rqm4O6LLrgjtYDvcVYTy7chDnM4Q7030tP4Kwj3u/pR6gP9ygnp2CJMK5Gq+9Q2oqmrFJAz01DXjw==",
        "dev": true,
        "license": "MIT",
        "peer": true
      },
--    "node_modules/@jridgewell/trace-mapping": {
--      "version": "0.3.9",
--      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.9.tgz",
--      "integrity": "sha512-3Belt6tdc8bPgAtbcmdtNJlirVoTmEb5e2gC94PnkwEW9jI6CAHUeoG85tjWP5WquqfavoMtMwiG4P926ZKKuQ==",
++    "node_modules/@stryker-mutator/instrumenter": {
++      "version": "9.0.1",
++      "resolved": "https://registry.npmjs.org/@stryker-mutator/instrumenter/-/instrumenter-9.0.1.tgz",
++      "integrity": "sha512-ZIIS39w6X4LkYwsTdOneUSIBIY+QFKrmuJdI5LI4XI5FCwOQVN1UnBTFYpaKuKOBznBdRiBUEZXxm5Y42/To+A==",
        "dev": true,
--      "license": "MIT",
++      "license": "Apache-2.0",
        "peer": true,
        "dependencies": {
--        "@jridgewell/resolve-uri": "^3.0.3",
--        "@jridgewell/sourcemap-codec": "^1.4.10"
++        "@babel/core": "~7.27.0",
++        "@babel/generator": "~7.27.0",
++        "@babel/parser": "~7.27.0",
++        "@babel/plugin-proposal-decorators": "~7.27.0",
++        "@babel/plugin-proposal-explicit-resource-management": "^7.24.7",
++        "@babel/preset-typescript": "~7.27.0",
++        "@stryker-mutator/api": "9.0.1",
++        "@stryker-mutator/util": "9.0.1",
++        "angular-html-parser": "~9.1.0",
++        "semver": "~7.7.0",
++        "weapon-regex": "~1.3.2"
++      },
++      "engines": {
++        "node": ">=20.0.0"
        }
      },
--    "node_modules/@pkgjs/parseargs": {
--      "version": "0.11.0",
--      "resolved": "https://registry.npmjs.org/@pkgjs/parseargs/-/parseargs-0.11.0.tgz",
--      "integrity": "sha512-+1VkjdD0QBLPodGrJUeqarH8VAIvQODIbwh9XpP5Syisf7YoQgsJKPNFoqqLQlu+VQ/tVSshMR6loPMn8U+dPg==",
++    "node_modules/@stryker-mutator/mocha-runner": {
++      "version": "9.0.1",
++      "resolved": "https://registry.npmjs.org/@stryker-mutator/mocha-runner/-/mocha-runner-9.0.1.tgz",
++      "integrity": "sha512-co05ai1NTwLldnZNC5y3tiMFFGiyzaL4ufW3l6QSNbCDjAe3x8Qco/5gSl5cCZUVOcAp/SOBLm3vbL7JadZFMQ==",
        "dev": true,
--      "license": "MIT",
--      "optional": true,
--      "peer": true,
++      "license": "Apache-2.0",
++      "dependencies": {
++        "@stryker-mutator/api": "9.0.1",
++        "@stryker-mutator/util": "9.0.1",
++        "tslib": "~2.8.0"
++      },
        "engines": {
--        "node": ">=14"
++        "node": ">=20.0.0"
++      },
++      "peerDependencies": {
++        "@stryker-mutator/core": "~9.0.0",
++        "mocha": ">= 7.2 < 12"
        }
      },
++    "node_modules/@stryker-mutator/util": {
++      "version": "9.0.1",
++      "resolved": "https://registry.npmjs.org/@stryker-mutator/util/-/util-9.0.1.tgz",
++      "integrity": "sha512-bpE6IMVqpxeSODZK/HH+dKwhfzzE/jc8vX3UgU3ybmBrpQvAthGpSf4lbccUCUMkBp6WQyGqTq25pGhFj3ErWA==",
++      "dev": true,
++      "license": "Apache-2.0"
++    },
      "node_modules/@tsconfig/node10": {
        "version": "1.0.11",
        "resolved": "https://registry.npmjs.org/@tsconfig/node10/-/node10-1.0.11.tgz",
@@@ -187,6 -187,6 +1423,52 @@@
          "node": ">=0.4.0"
        }
      },
++    "node_modules/ajv": {
++      "version": "8.17.1",
++      "resolved": "https://registry.npmjs.org/ajv/-/ajv-8.17.1.tgz",
++      "integrity": "sha512-B/gBuNg5SiMTrPkC+A2+cW0RszwxYmn6VYxB/inlBStS5nx6xHIt/ehKRhIMhqusl7a8LjQoZnjCs5vhwxOQ1g==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "fast-deep-equal": "^3.1.3",
++        "fast-uri": "^3.0.1",
++        "json-schema-traverse": "^1.0.0",
++        "require-from-string": "^2.0.2"
++      },
++      "funding": {
++        "type": "github",
++        "url": "https://github.com/sponsors/epoberezkin"
++      }
++    },
++    "node_modules/angular-html-parser": {
++      "version": "9.1.1",
++      "resolved": "https://registry.npmjs.org/angular-html-parser/-/angular-html-parser-9.1.1.tgz",
++      "integrity": "sha512-/xDmnIkfPy7df52scKGGBnZ5Uods64nkf3xBHQSU6uOxwuVVfCFrH+Q/vBZFsc/BY7aJufWtkGjTZrBoyER49w==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "engines": {
++        "node": ">= 14"
++      }
++    },
++    "node_modules/ansi-escapes": {
++      "version": "4.3.2",
++      "resolved": "https://registry.npmjs.org/ansi-escapes/-/ansi-escapes-4.3.2.tgz",
++      "integrity": "sha512-gKXj5ALrKWQLsYG9jlTRmR/xKluxHV+Z9QEwNIgCfM1/uwPMCuzVVnh5mwTd+OuBZcwSIMbqssNWRm1lE51QaQ==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "type-fest": "^0.21.3"
++      },
++      "engines": {
++        "node": ">=8"
++      },
++      "funding": {
++        "url": "https://github.com/sponsors/sindresorhus"
++      }
++    },
      "node_modules/ansi-regex": {
        "version": "6.1.0",
        "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.1.0.tgz",
@@@ -271,6 -271,6 +1553,73 @@@
        "license": "ISC",
        "peer": true
      },
++    "node_modules/browserslist": {
++      "version": "4.25.1",
++      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.25.1.tgz",
++      "integrity": "sha512-KGj0KoOMXLpSNkkEI6Z6mShmQy0bc1I+T7K9N81k4WWMrfz+6fQ6es80B/YLAeRoKvjYE1YSHHOW1qe9xIVzHw==",
++      "dev": true,
++      "funding": [
++        {
++          "type": "opencollective",
++          "url": "https://opencollective.com/browserslist"
++        },
++        {
++          "type": "tidelift",
++          "url": "https://tidelift.com/funding/github/npm/browserslist"
++        },
++        {
++          "type": "github",
++          "url": "https://github.com/sponsors/ai"
++        }
++      ],
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "caniuse-lite": "^1.0.30001726",
++        "electron-to-chromium": "^1.5.173",
++        "node-releases": "^2.0.19",
++        "update-browserslist-db": "^1.1.3"
++      },
++      "bin": {
++        "browserslist": "cli.js"
++      },
++      "engines": {
++        "node": "^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7"
++      }
++    },
++    "node_modules/call-bind-apply-helpers": {
++      "version": "1.0.2",
++      "resolved": "https://registry.npmjs.org/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.2.tgz",
++      "integrity": "sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "es-errors": "^1.3.0",
++        "function-bind": "^1.1.2"
++      },
++      "engines": {
++        "node": ">= 0.4"
++      }
++    },
++    "node_modules/call-bound": {
++      "version": "1.0.4",
++      "resolved": "https://registry.npmjs.org/call-bound/-/call-bound-1.0.4.tgz",
++      "integrity": "sha512-+ys997U96po4Kx/ABpBCqhA9EuxJaQWDQg7295H4hBphv3IZg0boBKuwYpt4YXp6MZ5AmZQnU/tyMTlRpaSejg==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "call-bind-apply-helpers": "^1.0.2",
++        "get-intrinsic": "^1.3.0"
++      },
++      "engines": {
++        "node": ">= 0.4"
++      },
++      "funding": {
++        "url": "https://github.com/sponsors/ljharb"
++      }
++    },
      "node_modules/camelcase": {
        "version": "6.3.0",
        "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-6.3.0.tgz",
@@@ -285,6 -285,6 +1634,28 @@@
          "url": "https://github.com/sponsors/sindresorhus"
        }
      },
++    "node_modules/caniuse-lite": {
++      "version": "1.0.30001727",
++      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001727.tgz",
++      "integrity": "sha512-pB68nIHmbN6L/4C6MH1DokyR3bYqFwjaSs/sWDHGj4CTcFtQUQMuJftVwWkXq7mNWOybD3KhUv3oWHoGxgP14Q==",
++      "dev": true,
++      "funding": [
++        {
++          "type": "opencollective",
++          "url": "https://opencollective.com/browserslist"
++        },
++        {
++          "type": "tidelift",
++          "url": "https://tidelift.com/funding/github/npm/caniuse-lite"
++        },
++        {
++          "type": "github",
++          "url": "https://github.com/sponsors/ai"
++        }
++      ],
++      "license": "CC-BY-4.0",
++      "peer": true
++    },
      "node_modules/chai": {
        "version": "5.2.0",
        "resolved": "https://registry.npmjs.org/chai/-/chai-5.2.0.tgz",
@@@ -334,6 -334,6 +1705,14 @@@
          "node": ">=8"
        }
      },
++    "node_modules/chardet": {
++      "version": "0.7.0",
++      "resolved": "https://registry.npmjs.org/chardet/-/chardet-0.7.0.tgz",
++      "integrity": "sha512-mT8iDcrh03qDGRRmoA2hmBJnxpllMR+0/0qlzjqZES6NdiWDcZkCNAk4rPFZ9Q85r27unkiNNg8ZOiwZXBHwcA==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true
++    },
      "node_modules/check-error": {
        "version": "2.1.1",
        "resolved": "https://registry.npmjs.org/check-error/-/check-error-2.1.1.tgz",
@@@ -361,6 -361,6 +1740,17 @@@
          "url": "https://paulmillr.com/funding/"
        }
      },
++    "node_modules/cli-width": {
++      "version": "4.1.0",
++      "resolved": "https://registry.npmjs.org/cli-width/-/cli-width-4.1.0.tgz",
++      "integrity": "sha512-ouuZd4/dm2Sw5Gmqy6bGyNNNe1qt9RpmxveLSO7KcgsTnU7RXfsw+/bukWGo1abgBiMAic068rclZsO4IWmmxQ==",
++      "dev": true,
++      "license": "ISC",
++      "peer": true,
++      "engines": {
++        "node": ">= 12"
++      }
++    },
      "node_modules/cliui": {
        "version": "8.0.1",
        "resolved": "https://registry.npmjs.org/cliui/-/cliui-8.0.1.tgz",
@@@ -467,6 -467,6 +1857,25 @@@
        "license": "MIT",
        "peer": true
      },
++    "node_modules/commander": {
++      "version": "13.1.0",
++      "resolved": "https://registry.npmjs.org/commander/-/commander-13.1.0.tgz",
++      "integrity": "sha512-/rFeCpNJQbhSZjGVwO9RFV3xPqbnERS8MmIQzCtD/zl6gpJuV/bMLuN92oG3F7d8oDEHHRrujSXNUr8fpjntKw==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "engines": {
++        "node": ">=18"
++      }
++    },
++    "node_modules/convert-source-map": {
++      "version": "2.0.0",
++      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-2.0.0.tgz",
++      "integrity": "sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true
++    },
      "node_modules/create-require": {
        "version": "1.1.1",
        "resolved": "https://registry.npmjs.org/create-require/-/create-require-1.1.1.tgz",
@@@ -524,63 -524,63 +1933,272 @@@
          "url": "https://github.com/sponsors/sindresorhus"
        }
      },
--    "node_modules/deep-eql": {
--      "version": "5.0.2",
--      "resolved": "https://registry.npmjs.org/deep-eql/-/deep-eql-5.0.2.tgz",
--      "integrity": "sha512-h5k/5U50IJJFpzfL6nO9jaaumfjO/f2NjK/oYB2Djzm4p9L+3T9qWpZqZ2hAbLPuuYq9wrU08WQyBTL5GbPk5Q==",
++    "node_modules/deep-eql": {
++      "version": "5.0.2",
++      "resolved": "https://registry.npmjs.org/deep-eql/-/deep-eql-5.0.2.tgz",
++      "integrity": "sha512-h5k/5U50IJJFpzfL6nO9jaaumfjO/f2NjK/oYB2Djzm4p9L+3T9qWpZqZ2hAbLPuuYq9wrU08WQyBTL5GbPk5Q==",
++      "dev": true,
++      "license": "MIT",
++      "engines": {
++        "node": ">=6"
++      }
++    },
++    "node_modules/des.js": {
++      "version": "1.1.0",
++      "resolved": "https://registry.npmjs.org/des.js/-/des.js-1.1.0.tgz",
++      "integrity": "sha512-r17GxjhUCjSRy8aiJpr8/UadFIzMzJGexI3Nmz4ADi9LYSFx4gTBp80+NaX/YsXWWLhpZ7v/v/ubEc/bCNfKwg==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "inherits": "^2.0.1",
++        "minimalistic-assert": "^1.0.0"
++      }
++    },
++    "node_modules/diff": {
++      "version": "7.0.0",
++      "resolved": "https://registry.npmjs.org/diff/-/diff-7.0.0.tgz",
++      "integrity": "sha512-PJWHUb1RFevKCwaFA9RlG5tCd+FO5iRh9A8HEtkmBH2Li03iJriB6m6JIN4rGz3K3JLawI7/veA1xzRKP6ISBw==",
++      "dev": true,
++      "license": "BSD-3-Clause",
++      "peer": true,
++      "engines": {
++        "node": ">=0.3.1"
++      }
++    },
++    "node_modules/diff-match-patch": {
++      "version": "1.0.5",
++      "resolved": "https://registry.npmjs.org/diff-match-patch/-/diff-match-patch-1.0.5.tgz",
++      "integrity": "sha512-IayShXAgj/QMXgB0IWmKx+rOPuGMhqm5w6jvFxmVenXKIzRqTAAsbBPT3kWQeGANj3jGgvcvv4yK6SxqYmikgw==",
++      "dev": true,
++      "license": "Apache-2.0",
++      "peer": true
++    },
++    "node_modules/dunder-proto": {
++      "version": "1.0.1",
++      "resolved": "https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz",
++      "integrity": "sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "call-bind-apply-helpers": "^1.0.1",
++        "es-errors": "^1.3.0",
++        "gopd": "^1.2.0"
++      },
++      "engines": {
++        "node": ">= 0.4"
++      }
++    },
++    "node_modules/eastasianwidth": {
++      "version": "0.2.0",
++      "resolved": "https://registry.npmjs.org/eastasianwidth/-/eastasianwidth-0.2.0.tgz",
++      "integrity": "sha512-I88TYZWc9XiYHRQ4/3c5rjjfgkjhLyW2luGIheGERbNQ6OY7yTybanSpDXZa8y7VUP9YmDcYa+eyq4ca7iLqWA==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true
++    },
++    "node_modules/electron-to-chromium": {
++      "version": "1.5.182",
++      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.5.182.tgz",
++      "integrity": "sha512-Lv65Btwv9W4J9pyODI6EWpdnhfvrve/us5h1WspW8B2Fb0366REPtY3hX7ounk1CkV/TBjWCEvCBBbYbmV0qCA==",
++      "dev": true,
++      "license": "ISC",
++      "peer": true
++    },
++    "node_modules/emoji-regex": {
++      "version": "9.2.2",
++      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-9.2.2.tgz",
++      "integrity": "sha512-L18DaJsXSUk2+42pv8mLs5jJT2hqFkFE4j21wOmgbUqsZ2hL72NsUU785g9RXgo3s0ZNgVl42TiHp3ZtOv/Vyg==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true
++    },
++    "node_modules/es-define-property": {
++      "version": "1.0.1",
++      "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz",
++      "integrity": "sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "engines": {
++        "node": ">= 0.4"
++      }
++    },
++    "node_modules/es-errors": {
++      "version": "1.3.0",
++      "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
++      "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "engines": {
++        "node": ">= 0.4"
++      }
++    },
++    "node_modules/es-object-atoms": {
++      "version": "1.1.1",
++      "resolved": "https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.1.1.tgz",
++      "integrity": "sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "es-errors": "^1.3.0"
++      },
++      "engines": {
++        "node": ">= 0.4"
++      }
++    },
++    "node_modules/escalade": {
++      "version": "3.2.0",
++      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.2.0.tgz",
++      "integrity": "sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "engines": {
++        "node": ">=6"
++      }
++    },
++    "node_modules/escape-string-regexp": {
++      "version": "4.0.0",
++      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
++      "integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "engines": {
++        "node": ">=10"
++      },
++      "funding": {
++        "url": "https://github.com/sponsors/sindresorhus"
++      }
++    },
++    "node_modules/execa": {
++      "version": "9.5.3",
++      "resolved": "https://registry.npmjs.org/execa/-/execa-9.5.3.tgz",
++      "integrity": "sha512-QFNnTvU3UjgWFy8Ef9iDHvIdcgZ344ebkwYx4/KLbR+CKQA4xBaHzv+iRpp86QfMHP8faFQLh8iOc57215y4Rg==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "@sindresorhus/merge-streams": "^4.0.0",
++        "cross-spawn": "^7.0.3",
++        "figures": "^6.1.0",
++        "get-stream": "^9.0.0",
++        "human-signals": "^8.0.0",
++        "is-plain-obj": "^4.1.0",
++        "is-stream": "^4.0.1",
++        "npm-run-path": "^6.0.0",
++        "pretty-ms": "^9.0.0",
++        "signal-exit": "^4.1.0",
++        "strip-final-newline": "^4.0.0",
++        "yoctocolors": "^2.0.0"
++      },
++      "engines": {
++        "node": "^18.19.0 || >=20.5.0"
++      },
++      "funding": {
++        "url": "https://github.com/sindresorhus/execa?sponsor=1"
++      }
++    },
++    "node_modules/execa/node_modules/is-plain-obj": {
++      "version": "4.1.0",
++      "resolved": "https://registry.npmjs.org/is-plain-obj/-/is-plain-obj-4.1.0.tgz",
++      "integrity": "sha512-+Pgi+vMuUNkJyExiMBt5IlFoMyKnr5zhJ4Uspz58WOhBF5QoIZkFyNHIbBAtHwzVAgk5RtndVNsDRN61/mmDqg==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "engines": {
++        "node": ">=12"
++      },
++      "funding": {
++        "url": "https://github.com/sponsors/sindresorhus"
++      }
++    },
++    "node_modules/external-editor": {
++      "version": "3.1.0",
++      "resolved": "https://registry.npmjs.org/external-editor/-/external-editor-3.1.0.tgz",
++      "integrity": "sha512-hMQ4CX1p1izmuLYyZqLMO/qGNw10wSv9QDCPfzXfyFrOaCSSoRfqE1Kf1s5an66J5JZC62NewG+mK49jOCtQew==",
        "dev": true,
        "license": "MIT",
--      "engines": {
--        "node": ">=6"
--      }
--    },
--    "node_modules/diff": {
--      "version": "7.0.0",
--      "resolved": "https://registry.npmjs.org/diff/-/diff-7.0.0.tgz",
--      "integrity": "sha512-PJWHUb1RFevKCwaFA9RlG5tCd+FO5iRh9A8HEtkmBH2Li03iJriB6m6JIN4rGz3K3JLawI7/veA1xzRKP6ISBw==",
--      "dev": true,
--      "license": "BSD-3-Clause",
        "peer": true,
++      "dependencies": {
++        "chardet": "^0.7.0",
++        "iconv-lite": "^0.4.24",
++        "tmp": "^0.0.33"
++      },
        "engines": {
--        "node": ">=0.3.1"
++        "node": ">=4"
        }
      },
--    "node_modules/eastasianwidth": {
--      "version": "0.2.0",
--      "resolved": "https://registry.npmjs.org/eastasianwidth/-/eastasianwidth-0.2.0.tgz",
--      "integrity": "sha512-I88TYZWc9XiYHRQ4/3c5rjjfgkjhLyW2luGIheGERbNQ6OY7yTybanSpDXZa8y7VUP9YmDcYa+eyq4ca7iLqWA==",
++    "node_modules/fast-deep-equal": {
++      "version": "3.1.3",
++      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
++      "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==",
        "dev": true,
        "license": "MIT",
        "peer": true
      },
--    "node_modules/emoji-regex": {
--      "version": "9.2.2",
--      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-9.2.2.tgz",
--      "integrity": "sha512-L18DaJsXSUk2+42pv8mLs5jJT2hqFkFE4j21wOmgbUqsZ2hL72NsUU785g9RXgo3s0ZNgVl42TiHp3ZtOv/Vyg==",
++    "node_modules/fast-uri": {
++      "version": "3.0.6",
++      "resolved": "https://registry.npmjs.org/fast-uri/-/fast-uri-3.0.6.tgz",
++      "integrity": "sha512-Atfo14OibSv5wAp4VWNsFYE1AchQRTv9cBGWET4pZWHzYshFSS9NQI6I57rdKn9croWVMbYFbLhJ+yJvmZIIHw==",
        "dev": true,
--      "license": "MIT",
++      "funding": [
++        {
++          "type": "github",
++          "url": "https://github.com/sponsors/fastify"
++        },
++        {
++          "type": "opencollective",
++          "url": "https://opencollective.com/fastify"
++        }
++      ],
++      "license": "BSD-3-Clause",
        "peer": true
      },
--    "node_modules/escalade": {
--      "version": "3.2.0",
--      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.2.0.tgz",
--      "integrity": "sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==",
++    "node_modules/figures": {
++      "version": "6.1.0",
++      "resolved": "https://registry.npmjs.org/figures/-/figures-6.1.0.tgz",
++      "integrity": "sha512-d+l3qxjSesT4V7v2fh+QnmFnUWv9lSpjarhShNTgBOfA0ttejbQUAlHLitbjkoRiDulW0OPoQPYIGhIC8ohejg==",
        "dev": true,
        "license": "MIT",
        "peer": true,
++      "dependencies": {
++        "is-unicode-supported": "^2.0.0"
++      },
        "engines": {
--        "node": ">=6"
++        "node": ">=18"
++      },
++      "funding": {
++        "url": "https://github.com/sponsors/sindresorhus"
        }
      },
--    "node_modules/escape-string-regexp": {
++    "node_modules/figures/node_modules/is-unicode-supported": {
++      "version": "2.1.0",
++      "resolved": "https://registry.npmjs.org/is-unicode-supported/-/is-unicode-supported-2.1.0.tgz",
++      "integrity": "sha512-mE00Gnza5EEB3Ds0HfMyllZzbBrmLOX3vfWoj9A9PEnTfratQ/BcaJOuMhnkhjXvb2+FkY3VuHqtAGpTPmglFQ==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "engines": {
++        "node": ">=18"
++      },
++      "funding": {
++        "url": "https://github.com/sponsors/sindresorhus"
++      }
++    },
++    "node_modules/file-url": {
        "version": "4.0.0",
--      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
--      "integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
++      "resolved": "https://registry.npmjs.org/file-url/-/file-url-4.0.0.tgz",
++      "integrity": "sha512-vRCdScQ6j3Ku6Kd7W1kZk9c++5SqD6Xz5Jotrjr/nkY714M14RFHy/AAVA2WQvpsqVAVgTbDrYyBpU205F0cLw==",
        "dev": true,
        "license": "MIT",
        "peer": true,
        "engines": {
--        "node": ">=10"
++        "node": ">=12"
        },
        "funding": {
          "url": "https://github.com/sponsors/sindresorhus"
@@@ -633,6 -633,6 +2251,28 @@@
          "url": "https://github.com/sponsors/isaacs"
        }
      },
++    "node_modules/function-bind": {
++      "version": "1.1.2",
++      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
++      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "funding": {
++        "url": "https://github.com/sponsors/ljharb"
++      }
++    },
++    "node_modules/gensync": {
++      "version": "1.0.0-beta.2",
++      "resolved": "https://registry.npmjs.org/gensync/-/gensync-1.0.0-beta.2.tgz",
++      "integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "engines": {
++        "node": ">=6.9.0"
++      }
++    },
      "node_modules/get-caller-file": {
        "version": "2.0.5",
        "resolved": "https://registry.npmjs.org/get-caller-file/-/get-caller-file-2.0.5.tgz",
@@@ -644,6 -644,6 +2284,65 @@@
          "node": "6.* || 8.* || >= 10.*"
        }
      },
++    "node_modules/get-intrinsic": {
++      "version": "1.3.0",
++      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.3.0.tgz",
++      "integrity": "sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "call-bind-apply-helpers": "^1.0.2",
++        "es-define-property": "^1.0.1",
++        "es-errors": "^1.3.0",
++        "es-object-atoms": "^1.1.1",
++        "function-bind": "^1.1.2",
++        "get-proto": "^1.0.1",
++        "gopd": "^1.2.0",
++        "has-symbols": "^1.1.0",
++        "hasown": "^2.0.2",
++        "math-intrinsics": "^1.1.0"
++      },
++      "engines": {
++        "node": ">= 0.4"
++      },
++      "funding": {
++        "url": "https://github.com/sponsors/ljharb"
++      }
++    },
++    "node_modules/get-proto": {
++      "version": "1.0.1",
++      "resolved": "https://registry.npmjs.org/get-proto/-/get-proto-1.0.1.tgz",
++      "integrity": "sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "dunder-proto": "^1.0.1",
++        "es-object-atoms": "^1.0.0"
++      },
++      "engines": {
++        "node": ">= 0.4"
++      }
++    },
++    "node_modules/get-stream": {
++      "version": "9.0.1",
++      "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-9.0.1.tgz",
++      "integrity": "sha512-kVCxPF3vQM/N0B1PmoqVUqgHP+EeVjmZSQn+1oCRPxd2P21P2F19lIgbR3HBosbB1PUhOAoctJnfEn2GbN2eZA==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "@sec-ant/readable-stream": "^0.4.1",
++        "is-stream": "^4.0.1"
++      },
++      "engines": {
++        "node": ">=18"
++      },
++      "funding": {
++        "url": "https://github.com/sponsors/sindresorhus"
++      }
++    },
      "node_modules/glob": {
        "version": "10.4.5",
        "resolved": "https://registry.npmjs.org/glob/-/glob-10.4.5.tgz",
@@@ -666,6 -666,6 +2365,20 @@@
          "url": "https://github.com/sponsors/isaacs"
        }
      },
++    "node_modules/gopd": {
++      "version": "1.2.0",
++      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz",
++      "integrity": "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "engines": {
++        "node": ">= 0.4"
++      },
++      "funding": {
++        "url": "https://github.com/sponsors/ljharb"
++      }
++    },
      "node_modules/has-flag": {
        "version": "4.0.0",
        "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
@@@ -677,6 -677,6 +2390,34 @@@
          "node": ">=8"
        }
      },
++    "node_modules/has-symbols": {
++      "version": "1.1.0",
++      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.1.0.tgz",
++      "integrity": "sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "engines": {
++        "node": ">= 0.4"
++      },
++      "funding": {
++        "url": "https://github.com/sponsors/ljharb"
++      }
++    },
++    "node_modules/hasown": {
++      "version": "2.0.2",
++      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
++      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "function-bind": "^1.1.2"
++      },
++      "engines": {
++        "node": ">= 0.4"
++      }
++    },
      "node_modules/he": {
        "version": "1.2.0",
        "resolved": "https://registry.npmjs.org/he/-/he-1.2.0.tgz",
@@@ -688,6 -688,6 +2429,39 @@@
          "he": "bin/he"
        }
      },
++    "node_modules/human-signals": {
++      "version": "8.0.1",
++      "resolved": "https://registry.npmjs.org/human-signals/-/human-signals-8.0.1.tgz",
++      "integrity": "sha512-eKCa6bwnJhvxj14kZk5NCPc6Hb6BdsU9DZcOnmQKSnO1VKrfV0zCvtttPZUsBvjmNDn8rpcJfpwSYnHBjc95MQ==",
++      "dev": true,
++      "license": "Apache-2.0",
++      "peer": true,
++      "engines": {
++        "node": ">=18.18.0"
++      }
++    },
++    "node_modules/iconv-lite": {
++      "version": "0.4.24",
++      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
++      "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "safer-buffer": ">= 2.1.2 < 3"
++      },
++      "engines": {
++        "node": ">=0.10.0"
++      }
++    },
++    "node_modules/inherits": {
++      "version": "2.0.4",
++      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
++      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
++      "dev": true,
++      "license": "ISC",
++      "peer": true
++    },
      "node_modules/is-fullwidth-code-point": {
        "version": "3.0.0",
        "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
@@@ -710,6 -710,6 +2484,20 @@@
          "node": ">=8"
        }
      },
++    "node_modules/is-stream": {
++      "version": "4.0.1",
++      "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-4.0.1.tgz",
++      "integrity": "sha512-Dnz92NInDqYckGEUJv689RbRiTSEHCQ7wOVeALbkOz999YpqT46yMRIGtSNl2iCL1waAZSx40+h59NV/EwzV/A==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "engines": {
++        "node": ">=18"
++      },
++      "funding": {
++        "url": "https://github.com/sponsors/sindresorhus"
++      }
++    },
      "node_modules/is-unicode-supported": {
        "version": "0.1.0",
        "resolved": "https://registry.npmjs.org/is-unicode-supported/-/is-unicode-supported-0.1.0.tgz",
@@@ -749,6 -749,6 +2537,22 @@@
          "@pkgjs/parseargs": "^0.11.0"
        }
      },
++    "node_modules/js-md4": {
++      "version": "0.3.2",
++      "resolved": "https://registry.npmjs.org/js-md4/-/js-md4-0.3.2.tgz",
++      "integrity": "sha512-/GDnfQYsltsjRswQhN9fhv3EMw2sCpUdrdxyWDOUK7eyD++r3gRhzgiQgc/x4MAv2i1iuQ4lxO5mvqM3vj4bwA==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true
++    },
++    "node_modules/js-tokens": {
++      "version": "4.0.0",
++      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
++      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true
++    },
      "node_modules/js-yaml": {
        "version": "4.1.0",
        "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz",
@@@ -763,6 -763,6 +2567,42 @@@
          "js-yaml": "bin/js-yaml.js"
        }
      },
++    "node_modules/jsesc": {
++      "version": "3.1.0",
++      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-3.1.0.tgz",
++      "integrity": "sha512-/sM3dO2FOzXjKQhJuo0Q173wf2KOo8t4I8vHy6lF9poUp7bKT0/NHE8fPX23PwfhnykfqnC2xRxOnVw5XuGIaA==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "bin": {
++        "jsesc": "bin/jsesc"
++      },
++      "engines": {
++        "node": ">=6"
++      }
++    },
++    "node_modules/json-schema-traverse": {
++      "version": "1.0.0",
++      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-1.0.0.tgz",
++      "integrity": "sha512-NM8/P9n3XjXhIZn1lLhkFaACTOURQXjWhV4BA/RnOv8xvgqtqpAX9IO4mRQxSx1Rlo4tqzeqb0sOlruaOy3dug==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true
++    },
++    "node_modules/json5": {
++      "version": "2.2.3",
++      "resolved": "https://registry.npmjs.org/json5/-/json5-2.2.3.tgz",
++      "integrity": "sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "bin": {
++        "json5": "lib/cli.js"
++      },
++      "engines": {
++        "node": ">=6"
++      }
++    },
      "node_modules/locate-path": {
        "version": "6.0.0",
        "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-6.0.0.tgz",
@@@ -780,6 -780,6 +2620,14 @@@
          "url": "https://github.com/sponsors/sindresorhus"
        }
      },
++    "node_modules/lodash.groupby": {
++      "version": "4.6.0",
++      "resolved": "https://registry.npmjs.org/lodash.groupby/-/lodash.groupby-4.6.0.tgz",
++      "integrity": "sha512-5dcWxm23+VAoz+awKmBaiBvzox8+RqMgFhi7UvX9DHZr2HdxHXM/Wrf8cfKpsW37RNrvtPn6hSwNqurSILbmJw==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true
++    },
      "node_modules/log-symbols": {
        "version": "4.1.0",
        "resolved": "https://registry.npmjs.org/log-symbols/-/log-symbols-4.1.0.tgz",
@@@ -821,6 -821,6 +2669,25 @@@
        "license": "ISC",
        "peer": true
      },
++    "node_modules/math-intrinsics": {
++      "version": "1.1.0",
++      "resolved": "https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz",
++      "integrity": "sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "engines": {
++        "node": ">= 0.4"
++      }
++    },
++    "node_modules/minimalistic-assert": {
++      "version": "1.0.1",
++      "resolved": "https://registry.npmjs.org/minimalistic-assert/-/minimalistic-assert-1.0.1.tgz",
++      "integrity": "sha512-UtJcAD4yEaGtjPezWuO9wC4nwUnVH/8/Im3yEHQP4b67cXlD/Qr9hdITCU1xDbSEXg2XKNaP8jsReV7vQd00/A==",
++      "dev": true,
++      "license": "ISC",
++      "peer": true
++    },
      "node_modules/minimatch": {
        "version": "9.0.5",
        "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-9.0.5.tgz",
@@@ -883,16 -883,16 +2750,117 @@@
          "mocha": "bin/mocha.js"
        },
        "engines": {
--        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
++        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
++      }
++    },
++    "node_modules/ms": {
++      "version": "2.1.3",
++      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
++      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true
++    },
++    "node_modules/mutation-testing-elements": {
++      "version": "3.5.2",
++      "resolved": "https://registry.npmjs.org/mutation-testing-elements/-/mutation-testing-elements-3.5.2.tgz",
++      "integrity": "sha512-1S6oHiIT3pAYp0mJb8TAyNnaNLHuOJmtDwNEw93bhA0ayjTAPrlNiW8zxivvKD4pjvrZEMUyQCaX+3EBZ4cemw==",
++      "dev": true,
++      "license": "Apache-2.0",
++      "peer": true
++    },
++    "node_modules/mutation-testing-metrics": {
++      "version": "3.5.1",
++      "resolved": "https://registry.npmjs.org/mutation-testing-metrics/-/mutation-testing-metrics-3.5.1.tgz",
++      "integrity": "sha512-mNgEcnhyBDckgoKg1kjG/4Uo3aBCW0WdVUxINVEazMTggPtqGfxaAlQ9GjItyudu/8S9DuspY3xUaIRLozFG9g==",
++      "dev": true,
++      "license": "Apache-2.0",
++      "dependencies": {
++        "mutation-testing-report-schema": "3.5.1"
++      }
++    },
++    "node_modules/mutation-testing-report-schema": {
++      "version": "3.5.1",
++      "resolved": "https://registry.npmjs.org/mutation-testing-report-schema/-/mutation-testing-report-schema-3.5.1.tgz",
++      "integrity": "sha512-tu5ATRxGH3sf2igiTKonxlCsWnWcD3CYr3IXGUym7yTh3Mj5NoJsu7bDkJY99uOrEp6hQByC2nRUPEGfe6EnAg==",
++      "dev": true,
++      "license": "Apache-2.0"
++    },
++    "node_modules/mute-stream": {
++      "version": "2.0.0",
++      "resolved": "https://registry.npmjs.org/mute-stream/-/mute-stream-2.0.0.tgz",
++      "integrity": "sha512-WWdIxpyjEn+FhQJQQv9aQAYlHoNVdzIzUySNV1gHUPDSdZJ3yZn7pAAbQcV7B56Mvu881q9FZV+0Vx2xC44VWA==",
++      "dev": true,
++      "license": "ISC",
++      "peer": true,
++      "engines": {
++        "node": "^18.17.0 || >=20.5.0"
++      }
++    },
++    "node_modules/node-releases": {
++      "version": "2.0.19",
++      "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.19.tgz",
++      "integrity": "sha512-xxOWJsBKtzAq7DY0J+DTzuz58K8e7sJbdgwkbMWQe8UYB6ekmsQ45q0M/tJDsGaZmbC+l7n57UV8Hl5tHxO9uw==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true
++    },
++    "node_modules/npm-run-path": {
++      "version": "6.0.0",
++      "resolved": "https://registry.npmjs.org/npm-run-path/-/npm-run-path-6.0.0.tgz",
++      "integrity": "sha512-9qny7Z9DsQU8Ou39ERsPU4OZQlSTP47ShQzuKZ6PRXpYLtIFgl/DEBYEXKlvcEa+9tHVcK8CF81Y2V72qaZhWA==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "path-key": "^4.0.0",
++        "unicorn-magic": "^0.3.0"
++      },
++      "engines": {
++        "node": ">=18"
++      },
++      "funding": {
++        "url": "https://github.com/sponsors/sindresorhus"
++      }
++    },
++    "node_modules/npm-run-path/node_modules/path-key": {
++      "version": "4.0.0",
++      "resolved": "https://registry.npmjs.org/path-key/-/path-key-4.0.0.tgz",
++      "integrity": "sha512-haREypq7xkM7ErfgIyA0z+Bj4AGKlMSdlQE2jvJo6huWD1EdkKYV+G/T4nq0YEF2vgTT8kqMFKo1uHn950r4SQ==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "engines": {
++        "node": ">=12"
++      },
++      "funding": {
++        "url": "https://github.com/sponsors/sindresorhus"
++      }
++    },
++    "node_modules/object-inspect": {
++      "version": "1.13.4",
++      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.13.4.tgz",
++      "integrity": "sha512-W67iLl4J2EXEGTbfeHCffrjDfitvLANg0UlX3wFUUSTx92KXRFegMHUVgSqE+wvhAbi4WqjGg9czysTV2Epbew==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "engines": {
++        "node": ">= 0.4"
++      },
++      "funding": {
++        "url": "https://github.com/sponsors/ljharb"
        }
      },
--    "node_modules/ms": {
--      "version": "2.1.3",
--      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
--      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
++    "node_modules/os-tmpdir": {
++      "version": "1.0.2",
++      "resolved": "https://registry.npmjs.org/os-tmpdir/-/os-tmpdir-1.0.2.tgz",
++      "integrity": "sha512-D2FR03Vir7FIu45XBY20mTb+/ZSWB00sjU9jdQXt83gDrI4Ztz5Fs7/yy74g2N5SVQY4xY1qDr4rNddwYRVX0g==",
        "dev": true,
        "license": "MIT",
--      "peer": true
++      "peer": true,
++      "engines": {
++        "node": ">=0.10.0"
++      }
      },
      "node_modules/p-limit": {
        "version": "3.1.0",
@@@ -936,6 -936,6 +2904,20 @@@
        "license": "BlueOak-1.0.0",
        "peer": true
      },
++    "node_modules/parse-ms": {
++      "version": "4.0.0",
++      "resolved": "https://registry.npmjs.org/parse-ms/-/parse-ms-4.0.0.tgz",
++      "integrity": "sha512-TXfryirbmq34y8QBwgqCVLi+8oA3oWx2eAnSn62ITyEhEYaWRlVZ2DvMM9eZbMs/RfxPu/PK/aBLyGj4IrqMHw==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "engines": {
++        "node": ">=18"
++      },
++      "funding": {
++        "url": "https://github.com/sponsors/sindresorhus"
++      }
++    },
      "node_modules/path-exists": {
        "version": "4.0.0",
        "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
@@@ -994,6 -994,6 +2976,51 @@@
        "license": "ISC",
        "peer": true
      },
++    "node_modules/pretty-ms": {
++      "version": "9.2.0",
++      "resolved": "https://registry.npmjs.org/pretty-ms/-/pretty-ms-9.2.0.tgz",
++      "integrity": "sha512-4yf0QO/sllf/1zbZWYnvWw3NxCQwLXKzIj0G849LSufP15BXKM0rbD2Z3wVnkMfjdn/CB0Dpp444gYAACdsplg==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "parse-ms": "^4.0.0"
++      },
++      "engines": {
++        "node": ">=18"
++      },
++      "funding": {
++        "url": "https://github.com/sponsors/sindresorhus"
++      }
++    },
++    "node_modules/progress": {
++      "version": "2.0.3",
++      "resolved": "https://registry.npmjs.org/progress/-/progress-2.0.3.tgz",
++      "integrity": "sha512-7PiHtLll5LdnKIMw100I+8xJXR5gW2QwWYkT6iJva0bXitZKa/XMrSbdmg3r2Xnaidz9Qumd0VPaMrZlF9V9sA==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "engines": {
++        "node": ">=0.4.0"
++      }
++    },
++    "node_modules/qs": {
++      "version": "6.14.0",
++      "resolved": "https://registry.npmjs.org/qs/-/qs-6.14.0.tgz",
++      "integrity": "sha512-YWWTjgABSKcvs/nWBi9PycY/JiPJqOD4JA6o9Sej2AtvSGarXxKC3OQSk4pAarbdQlKAh5D4FCQkJNkW+GAn3w==",
++      "dev": true,
++      "license": "BSD-3-Clause",
++      "peer": true,
++      "dependencies": {
++        "side-channel": "^1.1.0"
++      },
++      "engines": {
++        "node": ">=0.6"
++      },
++      "funding": {
++        "url": "https://github.com/sponsors/ljharb"
++      }
++    },
      "node_modules/randombytes": {
        "version": "2.1.0",
        "resolved": "https://registry.npmjs.org/randombytes/-/randombytes-2.1.0.tgz",
@@@ -1031,6 -1031,6 +3058,28 @@@
          "node": ">=0.10.0"
        }
      },
++    "node_modules/require-from-string": {
++      "version": "2.0.2",
++      "resolved": "https://registry.npmjs.org/require-from-string/-/require-from-string-2.0.2.tgz",
++      "integrity": "sha512-Xf0nWe6RseziFMu+Ap9biiUbmplq6S9/p+7w7YXP/JBHhrUDDUhwa+vANyubuqfZWTveU//DYVGsDG7RKL/vEw==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "engines": {
++        "node": ">=0.10.0"
++      }
++    },
++    "node_modules/rxjs": {
++      "version": "7.8.2",
++      "resolved": "https://registry.npmjs.org/rxjs/-/rxjs-7.8.2.tgz",
++      "integrity": "sha512-dhKf903U/PQZY6boNNtAGdWbG85WAbjT/1xYoZIC7FAY0yWapOBQVsVrDl58W86//e1VpMNBtRV4MaXfdMySFA==",
++      "dev": true,
++      "license": "Apache-2.0",
++      "peer": true,
++      "dependencies": {
++        "tslib": "^2.1.0"
++      }
++    },
      "node_modules/safe-buffer": {
        "version": "5.2.1",
        "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
@@@ -1053,6 -1053,6 +3102,28 @@@
        "license": "MIT",
        "peer": true
      },
++    "node_modules/safer-buffer": {
++      "version": "2.1.2",
++      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
++      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true
++    },
++    "node_modules/semver": {
++      "version": "7.7.2",
++      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.2.tgz",
++      "integrity": "sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==",
++      "dev": true,
++      "license": "ISC",
++      "peer": true,
++      "bin": {
++        "semver": "bin/semver.js"
++      },
++      "engines": {
++        "node": ">=10"
++      }
++    },
      "node_modules/serialize-javascript": {
        "version": "6.0.2",
        "resolved": "https://registry.npmjs.org/serialize-javascript/-/serialize-javascript-6.0.2.tgz",
@@@ -1089,6 -1089,6 +3160,86 @@@
          "node": ">=8"
        }
      },
++    "node_modules/side-channel": {
++      "version": "1.1.0",
++      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.1.0.tgz",
++      "integrity": "sha512-ZX99e6tRweoUXqR+VBrslhda51Nh5MTQwou5tnUDgbtyM0dBgmhEDtWGP/xbKn6hqfPRHujUNwz5fy/wbbhnpw==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "es-errors": "^1.3.0",
++        "object-inspect": "^1.13.3",
++        "side-channel-list": "^1.0.0",
++        "side-channel-map": "^1.0.1",
++        "side-channel-weakmap": "^1.0.2"
++      },
++      "engines": {
++        "node": ">= 0.4"
++      },
++      "funding": {
++        "url": "https://github.com/sponsors/ljharb"
++      }
++    },
++    "node_modules/side-channel-list": {
++      "version": "1.0.0",
++      "resolved": "https://registry.npmjs.org/side-channel-list/-/side-channel-list-1.0.0.tgz",
++      "integrity": "sha512-FCLHtRD/gnpCiCHEiJLOwdmFP+wzCmDEkc9y7NsYxeF4u7Btsn1ZuwgwJGxImImHicJArLP4R0yX4c2KCrMrTA==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "es-errors": "^1.3.0",
++        "object-inspect": "^1.13.3"
++      },
++      "engines": {
++        "node": ">= 0.4"
++      },
++      "funding": {
++        "url": "https://github.com/sponsors/ljharb"
++      }
++    },
++    "node_modules/side-channel-map": {
++      "version": "1.0.1",
++      "resolved": "https://registry.npmjs.org/side-channel-map/-/side-channel-map-1.0.1.tgz",
++      "integrity": "sha512-VCjCNfgMsby3tTdo02nbjtM/ewra6jPHmpThenkTYh8pG9ucZ/1P8So4u4FGBek/BjpOVsDCMoLA/iuBKIFXRA==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "call-bound": "^1.0.2",
++        "es-errors": "^1.3.0",
++        "get-intrinsic": "^1.2.5",
++        "object-inspect": "^1.13.3"
++      },
++      "engines": {
++        "node": ">= 0.4"
++      },
++      "funding": {
++        "url": "https://github.com/sponsors/ljharb"
++      }
++    },
++    "node_modules/side-channel-weakmap": {
++      "version": "1.0.2",
++      "resolved": "https://registry.npmjs.org/side-channel-weakmap/-/side-channel-weakmap-1.0.2.tgz",
++      "integrity": "sha512-WPS/HvHQTYnHisLo9McqBHOJk2FkHO/tlpvldyrnem4aeQp4hai3gythswg6p01oSoTl58rcpiFAjF2br2Ak2A==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "call-bound": "^1.0.2",
++        "es-errors": "^1.3.0",
++        "get-intrinsic": "^1.2.5",
++        "object-inspect": "^1.13.3",
++        "side-channel-map": "^1.0.1"
++      },
++      "engines": {
++        "node": ">= 0.4"
++      },
++      "funding": {
++        "url": "https://github.com/sponsors/ljharb"
++      }
++    },
      "node_modules/signal-exit": {
        "version": "4.1.0",
        "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-4.1.0.tgz",
@@@ -1103,6 -1103,6 +3254,17 @@@
          "url": "https://github.com/sponsors/isaacs"
        }
      },
++    "node_modules/source-map": {
++      "version": "0.7.4",
++      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.7.4.tgz",
++      "integrity": "sha512-l3BikUxvPOcn5E74dZiq5BGsTb5yEwhaTSzccU6t4sDOH8NWJCstKO5QT2CvtFoK6F0saL7p9xHAqHOlCPJygA==",
++      "dev": true,
++      "license": "BSD-3-Clause",
++      "peer": true,
++      "engines": {
++        "node": ">= 8"
++      }
++    },
      "node_modules/string-width": {
        "version": "5.1.2",
        "resolved": "https://registry.npmjs.org/string-width/-/string-width-5.1.2.tgz",
@@@ -1215,6 -1215,6 +3377,20 @@@
          "node": ">=8"
        }
      },
++    "node_modules/strip-final-newline": {
++      "version": "4.0.0",
++      "resolved": "https://registry.npmjs.org/strip-final-newline/-/strip-final-newline-4.0.0.tgz",
++      "integrity": "sha512-aulFJcD6YK8V1G7iRB5tigAP4TsHBZZrOV8pjV++zdUwmeV8uzbY7yn6h9MswN62adStNZFuCIx4haBnRuMDaw==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "engines": {
++        "node": ">=18"
++      },
++      "funding": {
++        "url": "https://github.com/sponsors/sindresorhus"
++      }
++    },
      "node_modules/strip-json-comments": {
        "version": "3.1.1",
        "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz",
@@@ -1246,6 -1246,6 +3422,31 @@@
          "url": "https://github.com/chalk/supports-color?sponsor=1"
        }
      },
++    "node_modules/tmp": {
++      "version": "0.0.33",
++      "resolved": "https://registry.npmjs.org/tmp/-/tmp-0.0.33.tgz",
++      "integrity": "sha512-jRCJlojKnZ3addtTOjdIqoRuPEKBvNXcGYqzO6zWZX8KfKEpnGY5jfggJQ3EjKuu8D4bJRr0y+cYJFmYbImXGw==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "os-tmpdir": "~1.0.2"
++      },
++      "engines": {
++        "node": ">=0.6.0"
++      }
++    },
++    "node_modules/tree-kill": {
++      "version": "1.2.2",
++      "resolved": "https://registry.npmjs.org/tree-kill/-/tree-kill-1.2.2.tgz",
++      "integrity": "sha512-L0Orpi8qGpRG//Nd+H90vFB+3iHnue1zSSGmNOOCh1GLJ7rUKVwV2HvijphGQS2UmhUZewS9VgvxYIdgr+fG1A==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "bin": {
++        "tree-kill": "cli.js"
++      }
++    },
      "node_modules/ts-mocha": {
        "version": "11.1.0",
        "resolved": "https://registry.npmjs.org/ts-mocha/-/ts-mocha-11.1.0.tgz",
@@@ -1335,6 -1335,6 +3536,66 @@@
          "tsc": "bin/tsc"
        }
      },
++    "node_modules/tslib": {
++      "version": "2.8.1",
++      "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.8.1.tgz",
++      "integrity": "sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==",
++      "dev": true,
++      "license": "0BSD"
++    },
++    "node_modules/tunnel": {
++      "version": "0.0.6",
++      "resolved": "https://registry.npmjs.org/tunnel/-/tunnel-0.0.6.tgz",
++      "integrity": "sha512-1h/Lnq9yajKY2PEbBadPXj3VxsDDu844OnaAo52UVmIzIvwwtBPIuNvkjuzBlTWpfJyUbG3ez0KSBibQkj4ojg==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "engines": {
++        "node": ">=0.6.11 <=0.7.0 || >=0.7.3"
++      }
++    },
++    "node_modules/type-fest": {
++      "version": "0.21.3",
++      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.21.3.tgz",
++      "integrity": "sha512-t0rzBq87m3fVcduHDUFhKmyyX+9eo6WQjZvf51Ea/M0Q7+T374Jp1aUiyUl0GKxp8M/OETVHSDvmkyPgvX+X2w==",
++      "dev": true,
++      "license": "(MIT OR CC0-1.0)",
++      "peer": true,
++      "engines": {
++        "node": ">=10"
++      },
++      "funding": {
++        "url": "https://github.com/sponsors/sindresorhus"
++      }
++    },
++    "node_modules/typed-inject": {
++      "version": "5.0.0",
++      "resolved": "https://registry.npmjs.org/typed-inject/-/typed-inject-5.0.0.tgz",
++      "integrity": "sha512-0Ql2ORqBORLMdAW89TQKZsb1PQkFGImFfVmncXWe7a+AA3+7dh7Se9exxZowH4kbnlvKEFkMxUYdHUpjYWFJaA==",
++      "dev": true,
++      "license": "Apache-2.0",
++      "engines": {
++        "node": ">=18"
++      }
++    },
++    "node_modules/typed-rest-client": {
++      "version": "2.1.0",
++      "resolved": "https://registry.npmjs.org/typed-rest-client/-/typed-rest-client-2.1.0.tgz",
++      "integrity": "sha512-Nel9aPbgSzRxfs1+4GoSB4wexCF+4Axlk7OSGVQCMa+4fWcyxIsN/YNmkp0xTT2iQzMD98h8yFLav/cNaULmRA==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "des.js": "^1.1.0",
++        "js-md4": "^0.3.2",
++        "qs": "^6.10.3",
++        "tunnel": "0.0.6",
++        "underscore": "^1.12.1"
++      },
++      "engines": {
++        "node": ">= 16.0.0"
++      }
++    },
      "node_modules/typescript": {
        "version": "5.8.3",
        "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.8.3.tgz",
@@@ -1349,6 -1349,6 +3610,14 @@@
          "node": ">=14.17"
        }
      },
++    "node_modules/underscore": {
++      "version": "1.13.7",
++      "resolved": "https://registry.npmjs.org/underscore/-/underscore-1.13.7.tgz",
++      "integrity": "sha512-GMXzWtsc57XAtguZgaQViUOzs0KTkk8ojr3/xAxXLITqf/3EMwxC0inyETfDFjH/Krbhuep0HNbbjI9i/q3F3g==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true
++    },
      "node_modules/undici-types": {
        "version": "7.8.0",
        "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-7.8.0.tgz",
@@@ -1356,6 -1356,6 +3625,52 @@@
        "dev": true,
        "license": "MIT"
      },
++    "node_modules/unicorn-magic": {
++      "version": "0.3.0",
++      "resolved": "https://registry.npmjs.org/unicorn-magic/-/unicorn-magic-0.3.0.tgz",
++      "integrity": "sha512-+QBBXBCvifc56fsbuxZQ6Sic3wqqc3WWaqxs58gvJrcOuN83HGTCwz3oS5phzU9LthRNE9VrJCFCLUgHeeFnfA==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "engines": {
++        "node": ">=18"
++      },
++      "funding": {
++        "url": "https://github.com/sponsors/sindresorhus"
++      }
++    },
++    "node_modules/update-browserslist-db": {
++      "version": "1.1.3",
++      "resolved": "https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.1.3.tgz",
++      "integrity": "sha512-UxhIZQ+QInVdunkDAaiazvvT/+fXL5Osr0JZlJulepYu6Jd7qJtDZjlur0emRlT71EN3ScPoE7gvsuIKKNavKw==",
++      "dev": true,
++      "funding": [
++        {
++          "type": "opencollective",
++          "url": "https://opencollective.com/browserslist"
++        },
++        {
++          "type": "tidelift",
++          "url": "https://tidelift.com/funding/github/npm/browserslist"
++        },
++        {
++          "type": "github",
++          "url": "https://github.com/sponsors/ai"
++        }
++      ],
++      "license": "MIT",
++      "peer": true,
++      "dependencies": {
++        "escalade": "^3.2.0",
++        "picocolors": "^1.1.1"
++      },
++      "bin": {
++        "update-browserslist-db": "cli.js"
++      },
++      "peerDependencies": {
++        "browserslist": ">= 4.21.0"
++      }
++    },
      "node_modules/v8-compile-cache-lib": {
        "version": "3.0.1",
        "resolved": "https://registry.npmjs.org/v8-compile-cache-lib/-/v8-compile-cache-lib-3.0.1.tgz",
@@@ -1364,6 -1364,6 +3679,14 @@@
        "license": "MIT",
        "peer": true
      },
++    "node_modules/weapon-regex": {
++      "version": "1.3.2",
++      "resolved": "https://registry.npmjs.org/weapon-regex/-/weapon-regex-1.3.2.tgz",
++      "integrity": "sha512-jtFTAr0F3gmiX10J6+BYgPrZ/yjXhpcxK/j/Lm1fWRLATxfecPgnkd3DqSUkD0AC2wVVyAkMtsgeuiIuELlW3w==",
++      "dev": true,
++      "license": "Apache-2.0",
++      "peer": true
++    },
      "node_modules/which": {
        "version": "2.0.2",
        "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
@@@ -1502,6 -1502,6 +3825,14 @@@
          "node": ">=10"
        }
      },
++    "node_modules/yallist": {
++      "version": "3.1.1",
++      "resolved": "https://registry.npmjs.org/yallist/-/yallist-3.1.1.tgz",
++      "integrity": "sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==",
++      "dev": true,
++      "license": "ISC",
++      "peer": true
++    },
      "node_modules/yargs": {
        "version": "17.7.2",
        "resolved": "https://registry.npmjs.org/yargs/-/yargs-17.7.2.tgz",
@@@ -1623,6 -1623,6 +3954,34 @@@
        "funding": {
          "url": "https://github.com/sponsors/sindresorhus"
        }
++    },
++    "node_modules/yoctocolors": {
++      "version": "2.1.1",
++      "resolved": "https://registry.npmjs.org/yoctocolors/-/yoctocolors-2.1.1.tgz",
++      "integrity": "sha512-GQHQqAopRhwU8Kt1DDM8NjibDXHC8eoh1erhGAJPEyveY9qqVeXvVikNKrDz69sHowPMorbPUrH/mx8c50eiBQ==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "engines": {
++        "node": ">=18"
++      },
++      "funding": {
++        "url": "https://github.com/sponsors/sindresorhus"
++      }
++    },
++    "node_modules/yoctocolors-cjs": {
++      "version": "2.1.2",
++      "resolved": "https://registry.npmjs.org/yoctocolors-cjs/-/yoctocolors-cjs-2.1.2.tgz",
++      "integrity": "sha512-cYVsTjKl8b+FrnidjibDWskAv7UKOfcwaVZdp/it9n1s9fU3IkgDbhdIRKCW4JDsAlECJY0ytoVPT3sK6kideA==",
++      "dev": true,
++      "license": "MIT",
++      "peer": true,
++      "engines": {
++        "node": ">=18"
++      },
++      "funding": {
++        "url": "https://github.com/sponsors/sindresorhus"
++      }
      }
    }
  }
diff --cc package.json
index a27712c,a27712c..fceabc5
--- a/package.json
+++ b/package.json
@@@ -10,6 -10,6 +10,7 @@@
    },
    "private": true,
    "devDependencies": {
++    "@stryker-mutator/mocha-runner": "^9.0.1",
      "@types/chai": "^5.2.2",
      "@types/mocha": "^10.0.10",
      "@types/node": "^24.0.10",
diff --cc test/test_kata_1.spec.js
index 2bfe961,2bfe961..46baa32
--- a/test/test_kata_1.spec.js
+++ b/test/test_kata_1.spec.js
@@@ -32,30 -32,30 +32,33 @@@ var __importStar = (this && this.__impo
          return result;
      };
  })();
++var __importDefault = (this && this.__importDefault) || function (mod) {
++    return (mod && mod.__esModule) ? mod : { "default": mod };
++};
  Object.defineProperty(exports, "__esModule", { value: true });
--const chai_1 = require("chai");
++const node_assert_1 = __importDefault(require("node:assert"));
  const _1_kata_js_1 = __importStar(require("../src/1_kata.js"));
  describe('hello world kata', function () {
      it('should return hello world', function () {
--        chai_1.assert.equal((0, _1_kata_js_1.default)(), "Hello World");
++        node_assert_1.default.equal((0, _1_kata_js_1.default)(), "Hello World");
      });
      it('should use a generator function that returns hello', () => {
          let firstCall = (0, _1_kata_js_1.helloWorldGenerator)().next();
--        chai_1.assert.equal(firstCall.value, 'Hello');
--        chai_1.assert.equal(firstCall.done, false);
++        node_assert_1.default.equal(firstCall.value, 'Hello');
++        node_assert_1.default.equal(firstCall.done, false);
      });
      it('should use a generator function that returns world on second call', () => {
          let sequence = (0, _1_kata_js_1.helloWorldGenerator)();
          sequence.next();
          let secondCall = sequence.next();
--        chai_1.assert.equal(secondCall.value, 'World');
--        chai_1.assert.equal(secondCall.done, false);
++        node_assert_1.default.equal(secondCall.value, 'World');
++        node_assert_1.default.equal(secondCall.done, false);
      });
      it('should use a generator function that returns done after three calls', () => {
          let sequence = (0, _1_kata_js_1.helloWorldGenerator)();
          const firstCall = sequence.next();
          const secondCall = sequence.next();
          const thirdCall = sequence.next();
--        chai_1.assert.equal(thirdCall.done, true);
++        node_assert_1.default.equal(thirdCall.done, true);
      });
  });
diff --cc test/test_kata_1.spec.ts
index b9eb7d7,b9eb7d7..81f75f5
--- a/test/test_kata_1.spec.ts
+++ b/test/test_kata_1.spec.ts
@@@ -1,4 -1,4 +1,4 @@@
--﻿import { assert } from "chai";
++﻿import assert from "node:assert";
  import HelloWorld, {helloWorldGenerator} from '../src/1_kata.js';
  
  describe('hello world kata', function () {
e483f8f index on main: a370fc4 add third kata
